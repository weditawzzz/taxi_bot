# –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: step_by_step_debug.py

"""
–ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –≤–æ–¥–∏—Ç–µ–ª—è–º–∏
"""
import os
import sys
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
current_dir = Path(__file__).parent
env_file = current_dir / '.env'

if env_file.exists():
    from dotenv import load_dotenv

    load_dotenv(env_file)
    os.environ.setdefault('CLIENT_BOT_TOKEN', os.getenv('CLIENT_BOT_TOKEN', 'test'))
    os.environ.setdefault('DRIVER_BOT_TOKEN', os.getenv('DRIVER_BOT_TOKEN', 'test'))
else:
    os.environ['CLIENT_BOT_TOKEN'] = 'test_token'
    os.environ['DRIVER_BOT_TOKEN'] = 'test_token'

sys.path.insert(0, str(current_dir))


async def debug_step_by_step():
    """–ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞"""
    print("üîç –ü–û–®–ê–ì–û–í–ê–Ø –û–¢–õ–ê–î–ö–ê –ü–†–û–ë–õ–ï–ú–´")
    print("=" * 50)

    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤...")
    try:
        from core.services.driver_notification import driver_notification_service
        print("‚úÖ driver_notification_service –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

        from config import Config
        print("‚úÖ Config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        print(f"   DRIVER_IDS: {Config.DRIVER_IDS}")

        from core.handlers.driver.order_handlers import accept_order, reject_order
        print("‚úÖ order_handlers –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return

    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–∞
    print(f"\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–æ–≤ —Å–µ—Ä–≤–∏—Å–∞...")
    print(f"   notify_all_drivers: {hasattr(driver_notification_service, 'notify_all_drivers')}")
    print(f"   handle_driver_response: {hasattr(driver_notification_service, 'handle_driver_response')}")
    print(f"   pending_orders: {type(driver_notification_service.pending_orders)}")
    print(f"   driver_responses: {type(driver_notification_service.driver_responses)}")

    # –®–∞–≥ 3: –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    print(f"\n3Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞...")
    order_id = 2001
    order_data = {
        'order_type': 'alcohol_delivery',
        'products': '–¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç—ã',
        'budget': 100,
        'address': '–¢–µ—Å—Ç –∞–¥—Ä–µ—Å',
        'client_id': 999888777
    }

    try:
        await driver_notification_service.notify_all_drivers(order_id, order_data)
        print(f"‚úÖ notify_all_drivers –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"   Pending orders: {list(driver_notification_service.pending_orders.keys())}")

        if order_id not in driver_notification_service.pending_orders:
            print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–∫–∞–∑ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è –≤ pending_orders!")
            return

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        import traceback
        traceback.print_exc()
        return

    # –®–∞–≥ 4: –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
    print(f"\n4Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è...")
    driver1_id = int(Config.DRIVER_IDS[0])

    try:
        print(f"   –í–æ–¥–∏—Ç–µ–ª—å {driver1_id} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ {order_id}")
        result = await driver_notification_service.handle_driver_response(
            order_id, driver1_id, "reject"
        )

        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        print(f"   –ó–∞–∫–∞–∑ –≤ pending_orders: {order_id in driver_notification_service.pending_orders}")
        print(f"   Driver responses: {driver_notification_service.driver_responses.get(order_id, {})}")

        if order_id not in driver_notification_service.pending_orders:
            print("‚ùå –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–∫–∞–∑ —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è!")
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ handle_driver_response –∏–ª–∏ _handle_driver_rejection")

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
            print(f"\nüîç –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê:")
            responses = driver_notification_service.driver_responses.get(order_id, {})
            all_drivers = [int(d) for d in Config.DRIVER_IDS]
            rejected_count = sum(1 for resp in responses.values() if resp == "reject")

            print(f"   –í—Å–µ–≥–æ –≤–æ–¥–∏—Ç–µ–ª–µ–π: {len(all_drivers)}")
            print(f"   –û—Ç–∫–ª–æ–Ω–∏–ª–∏: {rejected_count}")
            print(f"   –£—Å–ª–æ–≤–∏–µ (rejected_count >= total): {rejected_count >= len(all_drivers)}")

            if rejected_count >= len(all_drivers):
                print("‚ùå –û–®–ò–ë–ö–ê: –õ–æ–≥–∏–∫–∞ —Å—á–∏—Ç–∞–µ—Ç —á—Ç–æ –≤—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏!")
                print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é _handle_driver_rejection")

            return
        else:
            print("‚úÖ –ó–∞–∫–∞–∑ –æ—Å—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º - –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return

    # –®–∞–≥ 5: –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –≤—Ç–æ—Ä—ã–º –≤–æ–¥–∏—Ç–µ–ª–µ–º
    if len(Config.DRIVER_IDS) > 1:
        print(f"\n5Ô∏è‚É£ –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∏—è –≤—Ç–æ—Ä—ã–º –≤–æ–¥–∏—Ç–µ–ª–µ–º...")
        driver2_id = int(Config.DRIVER_IDS[1])

        try:
            print(f"   –í–æ–¥–∏—Ç–µ–ª—å {driver2_id} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑ {order_id}")
            result = await driver_notification_service.handle_driver_response(
                order_id, driver2_id, "accept"
            )

            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            print(f"   –ó–∞–∫–∞–∑ –≤ pending_orders: {order_id in driver_notification_service.pending_orders}")

            if order_id in driver_notification_service.pending_orders:
                print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ó–∞–∫–∞–∑ –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è!")
            else:
                print("‚úÖ –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è - –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏: {e}")
            import traceback
            traceback.print_exc()

    # –û—á–∏—Å—Ç–∫–∞
    driver_notification_service.pending_orders.clear()
    driver_notification_service.driver_responses.clear()

    print(f"\nüèÅ –ü–æ—à–∞–≥–æ–≤–∞—è –æ—Ç–ª–∞–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    import asyncio

    asyncio.run(debug_step_by_step())