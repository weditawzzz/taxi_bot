"""
–í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –±–æ—Ç –¥–ª—è —Ç–∞–∫—Å–∏
"""
import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å Python
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –î–û –∏–º–ø–æ—Ä—Ç–∞ config
try:
    from dotenv import load_dotenv

    env_path = os.path.join(current_dir, '.env')
    if os.path.exists(env_path):
        load_dotenv(env_path)
        print(f"‚úÖ Loaded .env file from: {env_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        driver_token = os.getenv('DRIVER_BOT_TOKEN')
        if driver_token:
            print(f"‚úÖ DRIVER_BOT_TOKEN loaded: {driver_token[:10]}...")
        else:
            print("‚ùå DRIVER_BOT_TOKEN not found!")
    else:
        print(f"‚ùå .env file not found at: {env_path}")

except ImportError:
    print("‚ùå python-dotenv not installed. Installing...")
    import subprocess

    subprocess.check_call([sys.executable, "-m", "pip", "install", "python-dotenv"])
    from dotenv import load_dotenv

    load_dotenv()

try:
    from aiogram import Bot, Dispatcher
    from aiogram.client.default import DefaultBotProperties
    from aiogram.enums import ParseMode
    from aiogram.fsm.storage.memory import MemoryStorage

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ core
    from core.config import config
    from core.database import init_database, close_database
    from core.handlers.driver import order_handlers, vehicle_handlers
    from core.handlers.driver import driver_start

    print("‚úÖ All driver bot imports successful!")

except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print(f"Current directory: {current_dir}")
    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –±–æ—Ç–∞"""

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = Bot(
            token=config.driver_bot.token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–π
        dp = Dispatcher(storage=MemoryStorage())

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        dp.include_router(driver_start.router)  # –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Å—Ç–∞—Ä—Ç
        dp.include_router(order_handlers.router)  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–æ–≤
        dp.include_router(vehicle_handlers.router)  # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        os.makedirs('data', exist_ok=True)
        os.makedirs('logs', exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("Initializing database...")
        await init_database()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"Starting driver bot: @{bot_info.username}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ
        if config.debug:
            logger.info("üöó Driver Bot started in DEBUG mode!")
        else:
            logger.info("üöó Driver Bot started!")

        print(f"üéâ Driver Bot @{bot_info.username} is running!")
        print("üí¨ Go to Telegram and send /start to your driver bot!")
        print("üõë Press Ctrl+C to stop")

        # –ó–∞–ø—É—Å–∫ long polling
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"Error starting driver bot: {e}")
        if "Unauthorized" in str(e):
            print("‚ùå Driver bot token is invalid! Check your .env file.")
        raise

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        logger.info("Shutting down driver bot...")
        try:
            await close_database()
            await bot.session.close()
        except:
            pass


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("\nüëã Driver Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        exit(1)