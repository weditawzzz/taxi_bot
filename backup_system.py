#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –±—ç–∫–∞–ø–æ–≤ –¥–ª—è —Ç–∞–∫—Å–∏-–±–æ—Ç–æ–≤
–ò–°–ü–†–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–æ–∫
"""

import shutil
import sqlite3
import zipfile
import json
from datetime import datetime, timedelta
from pathlib import Path
import threading
import time


class BackupSystem:
    """–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self):
        self.backup_dir = Path("backups")
        self.backup_dir.mkdir(exist_ok=True)

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±—ç–∫–∞–ø–æ–≤
        self.daily_dir = self.backup_dir / "daily"
        self.weekly_dir = self.backup_dir / "weekly"
        self.monthly_dir = self.backup_dir / "monthly"
        self.manual_dir = self.backup_dir / "manual"

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ –ø–∞–ø–∫–∏
        self.daily_dir.mkdir(exist_ok=True)
        self.weekly_dir.mkdir(exist_ok=True)
        self.monthly_dir.mkdir(exist_ok=True)
        self.manual_dir.mkdir(exist_ok=True)

        self.data_dir = Path("data")
        self.logs_dir = Path("logs")

    def create_full_backup(self, backup_type: str = "manual") -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–∏—Å—Ç–µ–º—ã"""

        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_filename = f"taxi_backup_{backup_type}_{timestamp}.zip"

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–∞–ø–∫—É
        if backup_type == "daily":
            backup_folder = self.daily_dir
        elif backup_type == "weekly":
            backup_folder = self.weekly_dir
        elif backup_type == "monthly":
            backup_folder = self.monthly_dir
        else:
            backup_folder = self.manual_dir

        # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        backup_folder.mkdir(exist_ok=True)

        backup_path = backup_folder / backup_filename

        print(f"üì¶ –°–æ–∑–¥–∞–Ω–∏–µ {backup_type} –±—ç–∫–∞–ø–∞...")
        print(f"üìÅ –ü—É—Ç—å: {backup_path}")

        try:
            with zipfile.ZipFile(backup_path, 'w', zipfile.ZIP_DEFLATED) as backup_zip:

                # 1. –ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                if self.data_dir.exists():
                    print("üíæ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
                    for db_file in self.data_dir.glob("*.db"):
                        # –°–æ–∑–¥–∞–µ–º –¥–∞–º–ø SQLite –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                        dump_path = self.create_db_dump(db_file)
                        if dump_path:
                            backup_zip.write(dump_path, f"database_dumps/{dump_path.name}")
                            dump_path.unlink()  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            print(f"  ‚úÖ –î–∞–º–ø: {db_file.name}")

                        # –¢–∞–∫–∂–µ –∫–æ–ø–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
                        backup_zip.write(db_file, f"databases/{db_file.name}")
                        print(f"  ‚úÖ –ë–∞–∑–∞: {db_file.name}")
                else:
                    print("‚ö†Ô∏è –ü–∞–ø–∫–∞ data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                # 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                print("‚öôÔ∏è –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥–æ–≤...")
                config_files = [
                    "config.py",
                    ".env",
                    "requirements.txt",
                    "driver_bot.py",
                    "run.py"
                ]

                for config_file in config_files:
                    config_path = Path(config_file)
                    if config_path.exists():
                        backup_zip.write(config_path, f"config/{config_file}")
                        print(f"  ‚úÖ {config_file}")

                # 3. –õ–æ–≥–∏ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π)
                if self.logs_dir.exists():
                    print("üìã –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤...")
                    cutoff_date = datetime.now() - timedelta(days=7)
                    log_count = 0
                    for log_file in self.logs_dir.glob("*.log*"):
                        if log_file.stat().st_mtime > cutoff_date.timestamp():
                            backup_zip.write(log_file, f"logs/{log_file.name}")
                            log_count += 1
                    print(f"  ‚úÖ –õ–æ–≥–æ–≤: {log_count}")
                else:
                    print("üìã –ü–∞–ø–∫–∞ logs –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                # 4. –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                print("‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
                system_info = self.collect_system_info()
                info_json = json.dumps(system_info, indent=2, ensure_ascii=False)
                backup_zip.writestr("system_info.json", info_json)

            backup_size = backup_path.stat().st_size / (1024 * 1024)  # MB

            print(f"‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω: {backup_filename}")
            print(f"üìÅ –†–∞–∑–º–µ—Ä: {backup_size:.1f} MB")
            print(f"üìç –ü–æ–ª–Ω—ã–π –ø—É—Ç—å: {backup_path.absolute()}")

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ
            self.log_backup(backup_type, backup_filename, backup_size)

            return str(backup_path)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")
            print(f"üîç –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
            print(f"   –ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–∞: {backup_folder}")
            print(f"   –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {backup_folder.exists()}")
            print(f"   –ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏: {backup_folder.parent.exists()}")
            return None

    def create_db_dump(self, db_path: Path) -> Path:
        """–°–æ–∑–¥–∞–µ—Ç SQL –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            temp_dir = self.backup_dir / "temp"
            temp_dir.mkdir(exist_ok=True)

            dump_path = temp_dir / f"{db_path.stem}_dump.sql"

            with sqlite3.connect(db_path) as conn:
                with open(dump_path, 'w', encoding='utf-8') as f:
                    for line in conn.iterdump():
                        f.write(f"{line}\n")

            return dump_path

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∞–º–ø–∞ {db_path}: {e}")
            return None

    def collect_system_info(self) -> dict:
        """–°–æ–±–∏—Ä–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        info = {
            "backup_timestamp": datetime.now().isoformat(),
            "python_version": "",
            "database_stats": {},
            "system_stats": {}
        }

        try:
            import sys
            info["python_version"] = sys.version

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
            if self.data_dir.exists():
                for db_file in self.data_dir.glob("*.db"):
                    try:
                        conn = sqlite3.connect(db_file)
                        cursor = conn.execute(
                            "SELECT name FROM sqlite_master WHERE type='table'"
                        )
                        tables = [row[0] for row in cursor.fetchall()]

                        table_stats = {}
                        for table in tables:
                            try:
                                cursor = conn.execute(f"SELECT COUNT(*) FROM {table}")
                                count = cursor.fetchone()[0]
                                table_stats[table] = count
                            except:
                                table_stats[table] = "error"

                        info["database_stats"][db_file.name] = {
                            "tables": tables,
                            "row_counts": table_stats,
                            "file_size_mb": db_file.stat().st_size / (1024 * 1024)
                        }

                        conn.close()

                    except Exception as e:
                        info["database_stats"][db_file.name] = {"error": str(e)}

            # –†–∞–∑–º–µ—Ä—ã –ø–∞–ø–æ–∫
            if self.data_dir.exists():
                info["system_stats"]["data_dir_size_mb"] = self.get_dir_size(self.data_dir)

            if self.logs_dir.exists():
                info["system_stats"]["logs_dir_size_mb"] = self.get_dir_size(self.logs_dir)

        except Exception as e:
            info["collection_error"] = str(e)

        return info

    def get_dir_size(self, path: Path) -> float:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ –≤ MB"""
        total = 0
        try:
            for file_path in path.rglob("*"):
                if file_path.is_file():
                    total += file_path.stat().st_size
        except Exception:
            pass
        return total / (1024 * 1024)

    def log_backup(self, backup_type: str, filename: str, size_mb: float):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ"""
        log_file = self.backup_dir / "backup_log.json"

        backup_record = {
            "timestamp": datetime.now().isoformat(),
            "type": backup_type,
            "filename": filename,
            "size_mb": round(size_mb, 2),
            "status": "success"
        }

        try:
            # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥
            if log_file.exists():
                with open(log_file, 'r', encoding='utf-8') as f:
                    log_data = json.load(f)
            else:
                log_data = {"backups": []}

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            log_data["backups"].append(backup_record)

            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
            log_data["backups"] = log_data["backups"][-100:]

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
            with open(log_file, 'w', encoding='utf-8') as f:
                json.dump(log_data, f, indent=2, ensure_ascii=False)

        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞ –±—ç–∫–∞–ø–∞: {e}")

    def show_backup_status(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤"""

        print("üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ë–≠–ö–ê–ü–û–í")
        print("=" * 50)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã
        backup_types = {
            "manual": self.manual_dir,
            "daily": self.daily_dir,
            "weekly": self.weekly_dir,
            "monthly": self.monthly_dir
        }

        for backup_type, backup_folder in backup_types.items():
            if backup_folder.exists():
                backups = sorted(
                    backup_folder.glob("taxi_backup_*.zip"),
                    key=lambda x: x.stat().st_mtime,
                    reverse=True
                )

                if backups:
                    latest = backups[0]
                    backup_time = datetime.fromtimestamp(latest.stat().st_mtime)
                    size_mb = latest.stat().st_size / (1024 * 1024)

                    print(f"üì¶ {backup_type.title()}: {backup_time.strftime('%Y-%m-%d %H:%M')} ({size_mb:.1f} MB)")
                    print(f"   –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: {len(backups)}")
                else:
                    print(f"üì¶ {backup_type.title()}: –ù–µ—Ç –±—ç–∫–∞–ø–æ–≤")
            else:
                print(f"üì¶ {backup_type.title()}: –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–æ–≤
        total_size = self.get_dir_size(self.backup_dir)
        print(f"\nüíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –±—ç–∫–∞–ø–æ–≤: {total_size:.1f} MB")

        # –ß–∏—Ç–∞–µ–º –ª–æ–≥
        log_file = self.backup_dir / "backup_log.json"
        if log_file.exists():
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    log_data = json.load(f)

                recent_backups = log_data.get("backups", [])[-5:]

                if recent_backups:
                    print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—ç–∫–∞–ø—ã:")
                    for backup in reversed(recent_backups):
                        timestamp = datetime.fromisoformat(backup["timestamp"])
                        print(
                            f"   ‚Ä¢ {timestamp.strftime('%Y-%m-%d %H:%M')} - {backup['type']} ({backup['size_mb']} MB)")

            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {e}")

    def cleanup_old_backups(self):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"""

        cleanup_rules = {
            "daily": 7,  # –•—Ä–∞–Ω–∏—Ç—å 7 –¥–Ω–µ–π
            "weekly": 4,  # –•—Ä–∞–Ω–∏—Ç—å 4 –Ω–µ–¥–µ–ª–∏
            "monthly": 12,  # –•—Ä–∞–Ω–∏—Ç—å 12 –º–µ—Å—è—Ü–µ–≤
            "manual": 20  # –•—Ä–∞–Ω–∏—Ç—å 20 —Ä—É—á–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤
        }

        for backup_type, keep_count in cleanup_rules.items():
            if backup_type == "daily":
                backup_folder = self.daily_dir
            elif backup_type == "weekly":
                backup_folder = self.weekly_dir
            elif backup_type == "monthly":
                backup_folder = self.monthly_dir
            else:
                backup_folder = self.manual_dir

            if not backup_folder.exists():
                continue

            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –¥–∞—Ç–µ
            backups = sorted(
                backup_folder.glob("taxi_backup_*.zip"),
                key=lambda x: x.stat().st_mtime,
                reverse=True
            )

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã
            to_delete = backups[keep_count:]

            for backup_file in to_delete:
                try:
                    backup_file.unlink()
                    print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {backup_file.name}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {backup_file.name}: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–∏—Å—Ç–µ–º—ã
backup_system = BackupSystem()


# CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    import sys

    if len(sys.argv) < 2:
        print("üíæ –°–ò–°–¢–ï–ú–ê –ë–≠–ö–ê–ü–û–í –¢–ê–ö–°–ò-–ë–û–¢–û–í")
        print("=" * 40)
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  create [type]    - –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø (daily/weekly/monthly/manual)")
        print("  status          - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±—ç–∫–∞–ø–æ–≤")
        print("  cleanup         - –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã")
        print("")
        print("–ü—Ä–∏–º–µ—Ä—ã:")
        print("  python backup_system.py create manual")
        print("  python backup_system.py status")
        return

    command = sys.argv[1]

    if command == "create":
        backup_type = sys.argv[2] if len(sys.argv) > 2 else "manual"
        result = backup_system.create_full_backup(backup_type)
        if result:
            print(f"üéâ –ë—ç–∫–∞–ø —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")

    elif command == "status":
        backup_system.show_backup_status()

    elif command == "cleanup":
        backup_system.cleanup_old_backups()
        print("‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: create, status, cleanup")


if __name__ == "__main__":
    main()