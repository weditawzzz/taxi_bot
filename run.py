"""
–ó–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–∂–∏–¥–∞–Ω–∏—è
"""
import asyncio
import logging
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å Python
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –î–û –∏–º–ø–æ—Ä—Ç–∞ config
try:
    from dotenv import load_dotenv

    # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
    env_path = os.path.join(current_dir, '.env')
    if os.path.exists(env_path):
        load_dotenv(env_path)
        print(f"‚úÖ Loaded .env file from: {env_path}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
        client_token = os.getenv('CLIENT_BOT_TOKEN')
        if client_token:
            print(f"‚úÖ CLIENT_BOT_TOKEN loaded: {client_token[:10]}...")
        else:
            print("‚ùå CLIENT_BOT_TOKEN not found!")
    else:
        print(f"‚ùå .env file not found at: {env_path}")

except ImportError:
    print("‚ùå python-dotenv not installed. Installing...")
    import subprocess
    subprocess.check_call([sys.executable, "-m", "pip", "install", "python-dotenv"])
    from dotenv import load_dotenv
    load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –ø–∞–ø–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ
required_paths = [
    os.path.join(current_dir, 'core'),
    os.path.join(current_dir, 'core', 'config.py'),
    os.path.join(current_dir, 'core', 'database.py'),
]

for path in required_paths:
    if not os.path.exists(path):
        print(f"‚ùå Missing: {path}")
        exit(1)

try:
    from aiogram import Bot, Dispatcher
    from aiogram.client.default import DefaultBotProperties
    from aiogram.enums import ParseMode

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é –∏–∑ core
    from core.config import config
    from core.database import init_database, close_database
    from core.handlers.client.start import client_router
    from core.handlers.client.city_ride import city_ride_router

    # –û–°–ù–û–í–ù–û–ô: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π taxi_ride —Å —Å–∏—Å—Ç–µ–º–æ–π –æ–∂–∏–¥–∞–Ω–∏—è
    try:
        from core.handlers.client.taxi_ride import taxi_router
        taxi_ride_available = True
        print("‚úÖ taxi_router (with waiting system) imported successfully!")
    except ImportError as e:
        print(f"‚ö†Ô∏è taxi_router not available: {e}")
        taxi_router = None
        taxi_ride_available = False

    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–∫–æ–≥–æ–ª—è
    try:
        from core.handlers.client.alcohol import router as alcohol_router
        alcohol_available = True
        print("‚úÖ alcohol_router imported successfully!")
    except ImportError as e:
        print(f"‚ö†Ô∏è Alcohol handler not available: {e}")
        alcohol_router = None
        alcohol_available = False

    print("‚úÖ All main imports successful!")

except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print(f"Current directory: {current_dir}")
    print("Files in current directory:")
    for item in os.listdir(current_dir):
        print(f"  - {item}")

    exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞"""

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        bot = Bot(
            token=config.client_bot.token,
            default=DefaultBotProperties(parse_mode=ParseMode.HTML)
        )

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
        dp = Dispatcher()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        print("üìã Registering client routers...")

        # 1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
        dp.include_router(client_router)
        print("‚úÖ client_router registered (start, settings)")

        # 2. –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ taxi_router (—Å —Å–∏—Å—Ç–µ–º–æ–π –æ–∂–∏–¥–∞–Ω–∏—è), –ø–æ—Ç–æ–º city_ride_router
        if taxi_ride_available and taxi_router:
            dp.include_router(taxi_router)
            print("‚úÖ taxi_router registered (with waiting system)")

        dp.include_router(city_ride_router)
        print("‚úÖ city_ride_router registered (basic taxi)")

        # 3. –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–ª–∫–æ–≥–æ–ª—è –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if alcohol_available and alcohol_router:
            dp.include_router(alcohol_router)
            logger.info("üç∑ Alcohol delivery module loaded!")
            print("‚úÖ alcohol_router registered")
        else:
            logger.warning("‚ö†Ô∏è Alcohol delivery module not loaded")

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        os.makedirs('data', exist_ok=True)
        os.makedirs('logs', exist_ok=True)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        logger.info("Initializing database...")
        await init_database()

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
        bot_info = await bot.get_me()
        logger.info(f"Starting client bot: @{bot_info.username}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–ø—É—Å–∫–µ
        if config.debug:
            logger.info("üöñ Client Taxi Bot started in DEBUG mode!")
            if alcohol_available:
                logger.info("üç∑ Alcohol delivery module loaded!")
            if taxi_ride_available:
                logger.info("‚è∞ Waiting system module loaded!")
        else:
            logger.info("üöñ Client Taxi Bot started!")
            if alcohol_available:
                logger.info("üç∑ Alcohol delivery module loaded!")
            if taxi_ride_available:
                logger.info("‚è∞ Waiting system module loaded!")

        print(f"üéâ Bot @{bot_info.username} is running!")
        print("üí¨ Go to Telegram and send /start to your bot!")
        if alcohol_available:
            print("üç∑ Alcohol delivery from shops is now available!")
        if taxi_ride_available:
            print("‚è∞ Waiting counter system is ACTIVE!")
            print("üõë Passengers can now request stops during rides!")
        print("üõë Press Ctrl+C to stop")

        # –ó–∞–ø—É—Å–∫ long polling
        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"Error starting bot: {e}")
        if "Unauthorized" in str(e):
            print("‚ùå Bot token is invalid! Check your .env file.")
        elif "alcohol" in str(e).lower():
            print("‚ùå Error loading alcohol module. Check alcohol.py file.")
        elif "taxi_ride" in str(e).lower() or "waiting" in str(e).lower():
            print("‚ùå Error loading taxi_ride module. Check taxi_ride.py file.")
        raise

    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        logger.info("Shutting down...")
        try:
            await close_database()
            await bot.session.close()
        except:
            pass


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        print("\nüëã Bot stopped by user")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
        exit(1)