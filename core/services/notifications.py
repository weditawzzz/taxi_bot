"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
"""
import logging
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import Config

logger = logging.getLogger(__name__)


async def notify_driver_about_ride(ride_id: int, ride_data: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ –Ω–æ–≤–æ–π –ø–æ–µ–∑–¥–∫–µ"""
    try:
        from core.bot_instance import Bots

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ Przyjmij", callback_data=f"accept_{ride_id}")
        builder.button(text="‚ùå Odrzuƒá", callback_data=f"reject_{ride_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞
        if ride_data.get('notes', '').startswith('ALCOHOL DELIVERY'):
            # –ó–∞–∫–∞–∑ –∞–ª–∫–æ–≥–æ–ª—è –ë–ï–ó —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ notes
            notes = ride_data.get('notes', '')
            products = "N/A"
            budget = "N/A"

            if "Products:" in notes:
                products = notes.split("Products:")[1].split(",")[0].strip()
            if "Budget:" in notes:
                budget = notes.split("Budget:")[1].split("z≈Ç")[0].strip()

            text = (
                "üõí <b>DOSTAWA ALKOHOLU</b>\n\n"
                f"üìù <b>Lista zakup√≥w:</b>\n{products}\n\n"
                f"üí∞ <b>Bud≈ºet klienta:</b> {budget} z≈Ç\n"
                f"üìç <b>Dostawa na:</b> {ride_data.get('destination_address', 'N/A')}\n"
                f"üìè <b>Odleg≈Ço≈õƒá:</b> ~{ride_data.get('distance_km', 5):.1f} km\n"
                f"üíµ <b>Twoja op≈Çata:</b> 20 z≈Ç\n\n"
                f"‚ÑπÔ∏è <b>Instrukcje:</b>\n"
                f"1. Wybierz najbli≈ºszy sklep z alkoholem\n"
                f"2. Kup produkty zgodnie z listƒÖ\n"
                f"3. Zachowaj paragon fiskalny!\n"
                f"4. Dostarcz + sprawd≈∫ dokumenty (18+)\n"
                f"5. Odbierz: 20 z≈Ç + koszt zakup√≥w"
            )
        else:
            # –û–±—ã—á–Ω—ã–π –∑–∞–∫–∞–∑ —Ç–∞–∫—Å–∏
            text = (
                "üöñ <b>Nowe zam√≥wienie!</b>\n\n"
                f"Z: {ride_data.get('pickup_address', 'N/A')}\n"
                f"Do: {ride_data.get('destination_address', 'N/A')}\n"
                f"Dystans: {ride_data.get('distance_km', 0):.1f} km\n"
                f"Cena: {ride_data.get('estimated_price', 0)} z≈Ç\n"
                f"Pasa≈ºer√≥w: {ride_data.get('passengers_count', 1)}"
            )

        await Bots.driver.send_message(
            chat_id=Config.DRIVER_CHAT_ID,
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

        logger.info(f"Driver notified about ride {ride_id}")

    except Exception as e:
        logger.error(f"Error notifying driver about ride {ride_id}: {e}")


async def notify_client_order_update(user_id: int, message: str):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞"""
    try:
        from core.bot_instance import Bots

        await Bots.client.send_message(
            chat_id=user_id,
            text=message,
            parse_mode="HTML"
        )

        logger.info(f"Client {user_id} notified about order update")

    except Exception as e:
        logger.error(f"Error notifying client {user_id}: {e}")


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
async def notify_driver(order_id: int):
    """–û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é"""
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    ride_data = {
        'destination_address': 'Unknown',
        'distance_km': 5.0,
        'estimated_price': 50.0,
        'notes': 'Legacy order'
    }
    await notify_driver_about_ride(order_id, ride_data)