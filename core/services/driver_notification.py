# –ó–∞–º–µ–Ω–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ core/services/driver_notification.py –Ω–∞ —ç—Ç–æ:

"""
–°–µ—Ä–≤–∏—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π - –° –û–ë–©–ò–ú –•–†–ê–ù–ò–õ–ò–©–ï–ú
–£–õ–£–ß–®–ï–ù–û: –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∞–º–∞ –∏ —á–∏—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
"""
import asyncio
import logging
import sqlite3
import json
from typing import Dict, List, Set
from pathlib import Path
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from decimal import Decimal

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ
try:
    from core.bot_instance import Bots
    from config import Config
except ImportError:
    # Fallback –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    class MockBots:
        class driver:
            @staticmethod
            async def send_message(*args, **kwargs):
                print(f"üì® [MOCK] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {args}")

            @staticmethod
            async def delete_message(*args, **kwargs):
                print(f"üóëÔ∏è [MOCK] –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {args}")

        class client:
            @staticmethod
            async def send_message(*args, **kwargs):
                print(f"üì® [MOCK] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É: {args}")


    class MockConfig:
        DRIVER_IDS = ['628521909', '6158974369']


    Bots = MockBots()
    Config = MockConfig()

logger = logging.getLogger(__name__)


class DecimalEncoder(json.JSONEncoder):
    """–ö–∞—Å—Ç–æ–º–Ω—ã–π —ç–Ω–∫–æ–¥–µ—Ä –¥–ª—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Decimal –æ–±—ä–µ–∫—Ç–æ–≤"""
    def default(self, obj):
        if isinstance(obj, Decimal):
            return float(obj)
        return super().default(obj)


class SharedOrderStorage:
    """–û–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–æ–≤ –º–µ–∂–¥—É –±–æ—Ç–∞–º–∏ —á–µ—Ä–µ–∑ SQLite"""

    def __init__(self):
        self.db_path = Path("data/shared_orders.db")
        self.db_path.parent.mkdir(exist_ok=True)
        self._init_db()

    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("""
                         CREATE TABLE IF NOT EXISTS pending_orders
                         (
                             order_id
                             INTEGER
                             PRIMARY
                             KEY,
                             order_data
                             TEXT
                             NOT
                             NULL,
                             created_at
                             TIMESTAMP
                             DEFAULT
                             CURRENT_TIMESTAMP
                         )
                         """)

            conn.execute("""
                         CREATE TABLE IF NOT EXISTS driver_responses
                         (
                             order_id
                             INTEGER,
                             driver_id
                             INTEGER,
                             response
                             TEXT,
                             created_at
                             TIMESTAMP
                             DEFAULT
                             CURRENT_TIMESTAMP,
                             PRIMARY
                             KEY
                         (
                             order_id,
                             driver_id
                         )
                             )
                         """)

            # –ù–û–í–ê–Ø –¢–ê–ë–õ–ò–¶–ê: –•—Ä–∞–Ω–µ–Ω–∏–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
            conn.execute("""
                         CREATE TABLE IF NOT EXISTS driver_messages
                         (
                             driver_id
                             INTEGER,
                             message_id
                             INTEGER,
                             order_id
                             INTEGER,
                             created_at
                             TIMESTAMP
                             DEFAULT
                             CURRENT_TIMESTAMP,
                             PRIMARY
                             KEY
                         (
                             driver_id,
                             message_id
                         )
                             )
                         """)

    def add_order(self, order_id: int, order_data: dict):
        """–î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute(
                "INSERT OR REPLACE INTO pending_orders (order_id, order_data) VALUES (?, ?)",
                (order_id, json.dumps(order_data, cls=DecimalEncoder, ensure_ascii=False))
            )
            print(f"üíæ [STORAGE] Order {order_id} added to shared storage")

    def get_order(self, order_id: int) -> dict:
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute(
                "SELECT order_data FROM pending_orders WHERE order_id = ?",
                (order_id,)
            )
            row = cursor.fetchone()
            if row:
                return json.loads(row[0])
            return {}

    def remove_order(self, order_id: int):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute("DELETE FROM pending_orders WHERE order_id = ?", (order_id,))
            conn.execute("DELETE FROM driver_responses WHERE order_id = ?", (order_id,))
            conn.execute("DELETE FROM driver_messages WHERE order_id = ?", (order_id,))
            print(f"üóëÔ∏è [STORAGE] Order {order_id} removed from shared storage")

    def get_all_orders(self) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute("SELECT order_id FROM pending_orders")
            return [row[0] for row in cursor.fetchall()]

    def add_response(self, order_id: int, driver_id: int, response: str):
        """–î–æ–±–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute(
                "INSERT OR REPLACE INTO driver_responses (order_id, driver_id, response) VALUES (?, ?, ?)",
                (order_id, driver_id, response)
            )
            print(f"üìù [STORAGE] Response from driver {driver_id} for order {order_id}: {response}")

    def get_responses(self, order_id: int) -> Dict[int, str]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.execute(
                "SELECT driver_id, response FROM driver_responses WHERE order_id = ?",
                (order_id,)
            )
            return {row[0]: row[1] for row in cursor.fetchall()}

    # –ù–û–í–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    def add_message(self, driver_id: int, message_id: int, order_id: int):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è"""
        with sqlite3.connect(self.db_path) as conn:
            conn.execute(
                "INSERT OR REPLACE INTO driver_messages (driver_id, message_id, order_id) VALUES (?, ?, ?)",
                (driver_id, message_id, order_id)
            )

    def get_driver_messages(self, driver_id: int, order_id: int = None) -> List[int]:
        """–ü–æ–ª—É—á–∏—Ç—å ID —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ–¥–∏—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            if order_id:
                cursor = conn.execute(
                    "SELECT message_id FROM driver_messages WHERE driver_id = ? AND order_id = ?",
                    (driver_id, order_id)
                )
            else:
                cursor = conn.execute(
                    "SELECT message_id FROM driver_messages WHERE driver_id = ?",
                    (driver_id,)
                )
            return [row[0] for row in cursor.fetchall()]

    def remove_driver_messages(self, driver_id: int, order_id: int = None):
        """–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö"""
        with sqlite3.connect(self.db_path) as conn:
            if order_id:
                conn.execute(
                    "DELETE FROM driver_messages WHERE driver_id = ? AND order_id = ?",
                    (driver_id, order_id)
                )
            else:
                conn.execute("DELETE FROM driver_messages WHERE driver_id = ?", (driver_id,))


class DriverNotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π —Å –æ–±—â–∏–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º"""

    def __init__(self):
        self.storage = SharedOrderStorage()
        self.notification_tasks: Dict[int, asyncio.Task] = {}  # –¢–æ–ª—å–∫–æ —Ç–∞–π–º–µ—Ä—ã –ª–æ–∫–∞–ª—å–Ω–æ

    @property
    def pending_orders(self) -> Dict[int, Dict]:
        """–≠–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        orders = {}
        for order_id in self.storage.get_all_orders():
            orders[order_id] = self.storage.get_order(order_id)
        return orders

    @property
    def driver_responses(self) -> Dict[int, Dict[int, str]]:
        """–≠–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
        responses = {}
        for order_id in self.storage.get_all_orders():
            responses[order_id] = self.storage.get_responses(order_id)
        return responses

    async def notify_all_drivers(self, order_id: int, order_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –≤–æ–¥–∏—Ç–µ–ª—è–º"""
        try:
            print(f"üöÄ [SERVICE] Starting notification for order {order_id}")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–∫–∞–∑ –≤ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.storage.add_order(order_id, order_data)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
            all_orders = self.storage.get_all_orders()
            print(f"üìä [SERVICE] All orders in shared storage: {all_orders}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –≤–æ–¥–∏—Ç–µ–ª—è–º
            drivers = getattr(Config, 'DRIVER_IDS', ['628521909', '6158974369'])
            success_count = 0

            for driver_id in drivers:
                try:
                    await self._send_clean_notification(int(driver_id), order_id, order_data)
                    success_count += 1
                    print(f"‚úÖ [SERVICE] Notified driver {driver_id}")
                    await asyncio.sleep(0.2)
                except Exception as e:
                    print(f"‚ùå [SERVICE] Failed to notify driver {driver_id}: {e}")

            if success_count > 0:
                # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ—Ç–º–µ–Ω—ã
                self.notification_tasks[order_id] = asyncio.create_task(
                    self._auto_cancel_order(order_id)
                )
                print(f"‚è∞ [SERVICE] Started timer for order {order_id}")
                print(f"üéØ [SERVICE] Successfully notified {success_count}/{len(drivers)} drivers")
            else:
                await self._notify_client_no_drivers(order_data)
                self.storage.remove_order(order_id)
                print(f"‚ö†Ô∏è [SERVICE] No drivers notified, order cleaned up")

        except Exception as e:
            print(f"üí• [SERVICE] Critical error in notify_all_drivers: {e}")
            import traceback
            traceback.print_exc()

    async def _send_clean_notification(self, driver_id: int, order_id: int, order_data: dict):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–∏—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ —Å–ø–∞–º–∞"""
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–æ–≤–æ–≥–æ
            await self._cleanup_old_messages(driver_id)

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            builder = InlineKeyboardBuilder()
            builder.button(text="‚úÖ Przyjmij", callback_data=f"accept_{order_id}")
            builder.button(text="‚ùå Odrzuƒá", callback_data=f"reject_{order_id}")

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if order_data.get('order_type') == 'alcohol_delivery':
                text = (
                    f"üõí <b>DOSTAWA ALKOHOLU #{order_id}</b>\n\n"
                    f"üìù <b>Produkty:</b> {order_data.get('products', 'N/A')}\n"
                    f"üí∞ <b>Bud≈ºet:</b> {order_data.get('budget', 'N/A')} z≈Ç\n"
                    f"üìç <b>Adres:</b> {order_data.get('address', 'N/A')}\n"
                    f"üìè <b>Dystans:</b> ~{order_data.get('distance', 5):.1f} km\n"
                    f"üíµ <b>Zarobek:</b> {order_data.get('price', 20)} z≈Ç\n\n"
                    f"‚è∞ <b>Czas na odpowied≈∫:</b> 2 minuty"
                )
            else:
                text = (
                    f"üöñ <b>NOWE ZAM√ìWIENIE #{order_id}</b>\n\n"
                    f"üìç <b>Z:</b> {order_data.get('pickup_address', 'N/A')}\n"
                    f"üìç <b>Do:</b> {order_data.get('destination_address', 'N/A')}\n"
                    f"üìè <b>Dystans:</b> {order_data.get('distance_km', 0):.1f} km\n"
                    f"üíµ <b>Cena:</b> {order_data.get('estimated_price', 0)} z≈Ç\n"
                    f"üë• <b>Pasa≈ºer√≥w:</b> {order_data.get('passengers_count', 1)}\n\n"
                    f"‚è∞ <b>Czas na odpowied≈∫:</b> 2 minuty"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–î–ù–û —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
            message = await Bots.driver.send_message(
                chat_id=driver_id,
                text=text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML",
                disable_notification=False  # –ó–≤—É–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏—è
            self.storage.add_message(driver_id, message.message_id, order_id)
            print(f"üì± [CLEAN] Sent clean notification to driver {driver_id}")

        except Exception as e:
            print(f"‚ùå [CLEAN] Error sending clean notification to driver {driver_id}: {e}")
            raise

    async def _cleanup_old_messages(self, driver_id: int):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é"""
        try:
            message_ids = self.storage.get_driver_messages(driver_id)

            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2)
            if len(message_ids) > 2:
                to_delete = message_ids[:-2]  # –í—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2

                for message_id in to_delete:
                    try:
                        await Bots.driver.delete_message(chat_id=driver_id, message_id=message_id)
                        print(f"üóëÔ∏è [CLEAN] Deleted old message {message_id} for driver {driver_id}")
                    except TelegramBadRequest:
                        pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
                    except Exception as e:
                        print(f"‚ö†Ô∏è [CLEAN] Could not delete message {message_id}: {e}")

                # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                self.storage.remove_driver_messages(driver_id)

                # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 2 —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
                for message_id in message_ids[-2:]:
                    self.storage.add_message(driver_id, message_id, 0)  # order_id = 0 –¥–ª—è —Å—Ç–∞—Ä—ã—Ö

        except Exception as e:
            print(f"‚ùå [CLEAN] Error cleaning up messages for driver {driver_id}: {e}")

    async def _send_driver_notification(self, driver_id: int, order_id: int, order_data: dict):
        """–°–¢–ê–†–´–ô –ú–ï–¢–û–î: –û—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        await self._send_clean_notification(driver_id, order_id, order_data)

    async def handle_driver_response(self, order_id: int, driver_id: int, response: str):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –≤–æ–¥–∏—Ç–µ–ª—è - –° –û–ë–©–ò–ú –•–†–ê–ù–ò–õ–ò–©–ï–ú"""
        try:
            print(f"üé¨ [SERVICE] Processing {response} from driver {driver_id} for order {order_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ –≤ –æ–±—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            all_orders = self.storage.get_all_orders()
            print(f"üìä [SERVICE] Orders in shared storage: {all_orders}")

            if order_id not in all_orders:
                print(f"‚ö†Ô∏è [SERVICE] Order {order_id} NOT in shared storage")
                return False

            order_data = self.storage.get_order(order_id)
            if not order_data:
                print(f"‚ùå [SERVICE] No order data for {order_id}")
                return False

            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            self.storage.add_response(order_id, driver_id, response)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
            responses = self.storage.get_responses(order_id)
            print(f"üìù [SERVICE] All responses for order {order_id}: {responses}")

            if response == "accept":
                print(f"‚úÖ [SERVICE] ORDER ACCEPTED: {order_id} by driver {driver_id}")
                await self._handle_order_accepted(order_id, driver_id, order_data)
                return True

            elif response == "reject":
                print(f"‚ùå [SERVICE] ORDER REJECTED: {order_id} by driver {driver_id}")
                await self._handle_driver_rejection(order_id, driver_id, responses)
                return True

        except Exception as e:
            print(f"üí• [SERVICE] Error in handle_driver_response: {e}")
            import traceback
            traceback.print_exc()
            return False

    async def _handle_order_accepted(self, order_id: int, accepting_driver_id: int, order_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏–Ω—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞"""
        try:
            print(f"üéâ [SERVICE] Processing ORDER ACCEPTANCE: {order_id} by driver {accepting_driver_id}")

            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä
            if order_id in self.notification_tasks:
                self.notification_tasks[order_id].cancel()
                del self.notification_tasks[order_id]
                print(f"‚è∞ [SERVICE] Cancelled auto-cancel timer for order {order_id}")

            # –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª—è–º
            drivers = getattr(Config, 'DRIVER_IDS', ['628521909', '6158974369'])
            for driver_str in drivers:
                driver_id = int(driver_str)
                if driver_id != accepting_driver_id:
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç
                        message = await Bots.driver.send_message(
                            chat_id=driver_id,
                            text=f"‚úÖ <b>–ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º</b>",
                            parse_mode="HTML",
                            disable_notification=True  # –ë–µ–∑ –∑–≤—É–∫–∞
                        )

                        # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
                        asyncio.create_task(self._delete_message_after_delay(driver_id, message.message_id, 3))

                        print(f"üì¢ [SERVICE] Notified driver {driver_id} that order {order_id} was taken")
                    except Exception as e:
                        print(f"‚ùå [SERVICE] Failed to notify driver {driver_id}: {e}")

            # –£–¥–∞–ª—è–µ–º –∏–∑ –æ–±—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            self.storage.remove_order(order_id)
            print(f"‚úÖ [SERVICE] Order {order_id} processed and cleaned up successfully")

        except Exception as e:
            print(f"üí• [SERVICE] Error handling order acceptance: {e}")

    async def _handle_driver_rejection(self, order_id: int, rejecting_driver_id: int, responses: Dict[int, str]):
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ"""
        try:
            print(f"üëé [SERVICE] Processing REJECTION from driver {rejecting_driver_id} for order {order_id}")

            drivers = getattr(Config, 'DRIVER_IDS', ['628521909', '6158974369'])
            all_drivers = [int(d) for d in drivers]

            rejected_drivers = [d_id for d_id, resp in responses.items() if resp == "reject"]
            rejected_count = len(rejected_drivers)
            total_drivers = len(all_drivers)

            print(f"üìä [SERVICE] REJECTION STATUS for order {order_id}:")
            print(f"   - Rejected by {rejected_count}/{total_drivers} drivers")
            print(f"   - Rejected drivers: {rejected_drivers}")
            print(f"   - All responses: {responses}")

            if rejected_count >= total_drivers:
                print(f"üö´ [SERVICE] ALL {total_drivers} DRIVERS REJECTED ORDER {order_id}")
                order_data = self.storage.get_order(order_id)
                await self._cancel_order_all_rejected(order_id, order_data)
            else:
                remaining = total_drivers - rejected_count
                print(f"‚è≥ [SERVICE] Order {order_id} REMAINS ACTIVE - {remaining} drivers can still accept")

        except Exception as e:
            print(f"üí• [SERVICE] Error handling driver rejection: {e}")

    async def _cancel_order_all_rejected(self, order_id: int, order_data: dict):
        """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∫–æ–≥–¥–∞ –í–°–ï –≤–æ–¥–∏—Ç–µ–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏"""
        try:
            print(f"üö´ [SERVICE] CANCELLING ORDER {order_id} - all drivers rejected")

            # –û—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
            if order_id in self.notification_tasks:
                self.notification_tasks[order_id].cancel()
                del self.notification_tasks[order_id]

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client_id = order_data.get('client_id') or order_data.get('user_id')
            if client_id:
                await Bots.client.send_message(
                    chat_id=client_id,
                    text=(
                        "üòû <b>Przepraszamy</b>\n\n"
                        "Niestety wszyscy dostƒôpni kierowcy sƒÖ obecnie zajƒôci.\n"
                        "Spr√≥buj ponownie za kilka minut."
                    ),
                    parse_mode="HTML",
                    disable_notification=False
                )
                print(f"üì± [SERVICE] Notified client {client_id} about order {order_id} rejection")

            self.storage.remove_order(order_id)
            print(f"‚úÖ [SERVICE] Order {order_id} cancelled and cleaned up successfully")

        except Exception as e:
            print(f"üí• [SERVICE] Error cancelling order: {e}")

    async def _auto_cancel_order(self, order_id: int):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–º–µ–Ω–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É"""
        try:
            print(f"‚è∞ [SERVICE] Starting 120 second timer for order {order_id}")
            await asyncio.sleep(120)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–∫–∞–∑ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            all_orders = self.storage.get_all_orders()
            if order_id in all_orders:
                print(f"‚è∞ [SERVICE] AUTO-CANCELLING order {order_id} due to timeout")

                order_data = self.storage.get_order(order_id)
                client_id = order_data.get('client_id') or order_data.get('user_id')

                if client_id:
                    await Bots.client.send_message(
                        chat_id=client_id,
                        text=(
                            "‚è∞ <b>Up≈ÇynƒÖ≈Ç czas oczekiwania</b>\n\n"
                            "Niestety kierowcy nie odpowiedzieli na Twoje zam√≥wienie.\n"
                            "Spr√≥buj ponownie."
                        ),
                        parse_mode="HTML",
                        disable_notification=False
                    )

                # –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–∞–π–º-–∞—É—Ç–µ
                drivers = getattr(Config, 'DRIVER_IDS', ['628521909', '6158974369'])
                for driver_str in drivers:
                    try:
                        message = await Bots.driver.send_message(
                            chat_id=int(driver_str),
                            text=f"‚è∞ <b>–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω –ø–æ —Ç–∞–π–º-–∞—É—Ç—É</b>",
                            parse_mode="HTML",
                            disable_notification=True  # –ë–µ–∑ –∑–≤—É–∫–∞
                        )

                        # –ê–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                        asyncio.create_task(self._delete_message_after_delay(int(driver_str), message.message_id, 5))

                    except Exception as e:
                        print(f"‚ùå [SERVICE] Failed to notify driver {driver_str} about timeout: {e}")

                self.storage.remove_order(order_id)
                print(f"‚è∞ [SERVICE] Order {order_id} auto-cancelled successfully")
            else:
                print(f"‚è∞ [SERVICE] Order {order_id} already processed before timeout")

        except asyncio.CancelledError:
            print(f"‚è∞ [SERVICE] Timer for order {order_id} was cancelled (order was accepted)")
        except Exception as e:
            print(f"üí• [SERVICE] Error in auto-cancel: {e}")

    async def _delete_message_after_delay(self, chat_id: int, message_id: int, delay_seconds: int):
        """–ù–û–í–´–ô –ú–ï–¢–û–î: –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        try:
            await asyncio.sleep(delay_seconds)
            await Bots.driver.delete_message(chat_id=chat_id, message_id=message_id)
            print(f"üóëÔ∏è [CLEAN] Auto-deleted message {message_id} after {delay_seconds}s")
        except TelegramBadRequest:
            pass  # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
        except Exception as e:
            print(f"‚ö†Ô∏è [CLEAN] Could not delete message {message_id}: {e}")

    async def _notify_client_no_drivers(self, order_data: dict):
        """–£–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –≤–æ–¥–∏—Ç–µ–ª–µ–π"""
        try:
            client_id = order_data.get('client_id') or order_data.get('user_id')
            if client_id:
                await Bots.client.send_message(
                    chat_id=client_id,
                    text=(
                        "üòû <b>Brak dostƒôpnych kierowc√≥w</b>\n\n"
                        "Przepraszamy, obecnie ≈ºaden kierowca nie jest dostƒôpny.\n"
                        "Spr√≥buj ponownie za kilka minut."
                    ),
                    parse_mode="HTML",
                    disable_notification=False
                )
                print(f"üì± [SERVICE] Notified client {client_id} about no available drivers")
        except Exception as e:
            print(f"üí• [SERVICE] Error notifying client: {e}")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
driver_notification_service = DriverNotificationService()