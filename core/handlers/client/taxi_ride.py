"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–æ–π –∫–ª–∏–µ–Ω—Ç–æ–º - –° –°–ò–°–¢–ï–ú–û–ô –û–ñ–ò–î–ê–ù–ò–Ø
"""
import logging
from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.types import CallbackQuery, Message, Location
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from core.models import Session, Ride as Order
from core.bot_instance import Bots
from core.services.maps_service import MapsService, Location as MapLocation
from core.services.price_calculator import PriceCalculatorService
from core.keyboards import (
    get_client_ride_keyboard,
    get_location_keyboard,
    get_passengers_keyboard,
    get_ride_confirmation_keyboard,
    get_main_menu_keyboard
)
from core.states import ClientStates
from core.utils.localization import get_text, Language
from core.models import UserRole

logger = logging.getLogger(__name__)
taxi_router = Router()
maps_service = MapsService()


async def get_user_language_simple(user_id: int) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from core.services.user_service import UserService
        user_service = UserService()
        user = await user_service.get_user_by_telegram_id(user_id)
        return user.language if user and user.language else "pl"
    except Exception:
        return "pl"


async def get_user_language(telegram_id: int) -> Language:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from core.services.user_service import UserService
        user_service = UserService()
        user = await user_service.get_user_by_telegram_id(telegram_id)
        if user and user.language in ['en', 'pl', 'ru']:
            return Language(user.language)
        return Language.PL
    except Exception as e:
        logger.error(f"Error getting user language: {e}")
        return Language.PL


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–û–¶–ï–°–°–ê –ó–ê–ö–ê–ó–ê –¢–ê–ö–°–ò
# ===================================================================

@taxi_router.message(F.location, StateFilter(ClientStates.WAITING_PICKUP_LOCATION))
async def handle_pickup_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–¥–∞—á–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        address = await maps_service.reverse_geocode(
            message.location.latitude,
            message.location.longitude
        )

        pickup_location = MapLocation(
            latitude=message.location.latitude,
            longitude=message.location.longitude,
            address=address
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(pickup_location=pickup_location)

        language = await get_user_language(message.from_user.id)

        await message.answer(
            f"‚úÖ <b>Miejsce odbioru:</b>\n{address}\n\n"
            f"üìç Teraz wy≈õlij lokalizacjƒô docelowƒÖ lub wpisz adres:",
            parse_mode="HTML",
            reply_markup=get_location_keyboard(language.value)
        )

        await state.set_state(ClientStates.WAITING_DESTINATION_LOCATION)

    except Exception as e:
        logger.error(f"Error handling pickup location: {e}")
        await message.answer("‚ùå B≈ÇƒÖd podczas przetwarzania lokalizacji")


@taxi_router.message(F.location, StateFilter(ClientStates.WAITING_DESTINATION_LOCATION))
async def handle_destination_location(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
        address = await maps_service.reverse_geocode(
            message.location.latitude,
            message.location.longitude
        )

        destination_location = MapLocation(
            latitude=message.location.latitude,
            longitude=message.location.longitude,
            address=address
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(destination_location=destination_location)

        language = await get_user_language(message.from_user.id)

        await message.answer(
            f"‚úÖ <b>Miejsce docelowe:</b>\n{address}\n\n"
            f"üë• Wybierz liczbƒô pasa≈ºer√≥w:",
            parse_mode="HTML",
            reply_markup=get_passengers_keyboard(language.value)
        )

        await state.set_state(ClientStates.WAITING_PASSENGERS_COUNT)

    except Exception as e:
        logger.error(f"Error handling destination location: {e}")
        await message.answer("‚ùå B≈ÇƒÖd podczas przetwarzania lokalizacji")


@taxi_router.message(F.text.regexp(r'^[1-4]$'), StateFilter(ClientStates.WAITING_PASSENGERS_COUNT))
async def handle_passengers_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤"""
    try:
        passengers = int(message.text)
        await state.update_data(passengers_count=passengers)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        data = await state.get_data()
        pickup = data['pickup_location']
        destination = data['destination_location']

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
        distance = pickup.distance_to(destination)
        price_service = PriceCalculatorService()
        estimated_price = price_service.calculate_price(distance)

        language = await get_user_language(message.from_user.id)

        await message.answer(
            f"üìã <b>Podsumowanie zam√≥wienia:</b>\n\n"
            f"üìç <b>Odbi√≥r:</b> {pickup.address}\n"
            f"üìç <b>Cel:</b> {destination.address}\n"
            f"üë• <b>Pasa≈ºer√≥w:</b> {passengers}\n"
            f"üìè <b>Dystans:</b> {distance:.1f} km\n"
            f"üíµ <b>Koszt:</b> {estimated_price} z≈Ç\n"
            f"‚è±Ô∏è <b>Szacowany czas:</b> {int(distance * 2.5)} min\n\n"
            f"‚úÖ Potwierd≈∫ zam√≥wienie:",
            reply_markup=get_ride_confirmation_keyboard(language.value),
            parse_mode="HTML"
        )

        await state.set_state(ClientStates.WAITING_RIDE_CONFIRMATION)

    except Exception as e:
        logger.error(f"Error handling passengers count: {e}")
        await message.answer("‚ùå B≈ÇƒÖd podczas przetwarzania danych")


@taxi_router.callback_query(F.data == "confirm_ride")
async def confirm_ride(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()

        if not all(key in data for key in ['pickup_location', 'destination_location', 'passengers_count']):
            await callback.answer("‚ùå Dane zam√≥wienia sƒÖ niekompletne")
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        with Session() as session:
            from core.models import Ride
            from datetime import datetime

            price_service = PriceCalculatorService()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
            pickup_loc = data['pickup_location']
            dest_loc = data['destination_location']
            distance = pickup_loc.distance_to(dest_loc)
            estimated_price = price_service.calculate_price(distance)

            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            order = Ride(
                client_id=callback.from_user.id,
                pickup_address=pickup_loc.address,
                pickup_lat=pickup_loc.latitude,
                pickup_lng=pickup_loc.longitude,
                destination_address=dest_loc.address,
                destination_lat=dest_loc.latitude,
                destination_lng=dest_loc.longitude,
                distance_km=distance,
                estimated_price=estimated_price,
                passengers_count=data['passengers_count'],
                status="pending",
                order_type="city_ride"
            )

            session.add(order)
            session.commit()
            session.refresh(order)

            order_id = order.id

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            from core.services.driver_notification import driver_notification_service

            order_data = {
                'order_id': order_id,
                'client_id': callback.from_user.id,
                'pickup_address': pickup_loc.address,
                'destination_address': dest_loc.address,
                'distance_km': distance,
                'estimated_price': float(estimated_price),
                'passengers_count': data['passengers_count'],
                'order_type': 'city_ride'
            }

            await driver_notification_service.notify_all_drivers(order_id, order_data)
        except ImportError:
            # Fallback - –ø—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª–µ–π
            from config import Config
            from aiogram.utils.keyboard import InlineKeyboardBuilder

            builder = InlineKeyboardBuilder()
            builder.button(text="‚úÖ Przyjmij", callback_data=f"accept_{order_id}")
            builder.button(text="‚ùå Odrzuƒá", callback_data=f"reject_{order_id}")

            notification_text = (
                f"üöñ <b>Nowe zam√≥wienie!</b>\n\n"
                f"üìç Z: {pickup_loc.address}\n"
                f"üìç Do: {dest_loc.address}\n"
                f"üíµ Cena: {estimated_price} z≈Ç\n"
                f"üë• Pasa≈ºer√≥w: {data['passengers_count']}\n"
                f"üìè Dystans: {distance:.1f} km"
            )

            await Bots.driver.send_message(
                chat_id=Config.DRIVER_CHAT_ID,
                text=notification_text,
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        language = await get_user_language(callback.from_user.id)

        await callback.message.edit_text(
            f"‚úÖ <b>Zam√≥wienie z≈Ço≈ºone!</b>\n\n"
            f"üì¶ <b>Numer zam√≥wienia:</b> #{order_id}\n"
            f"üìç <b>Odbi√≥r:</b> {pickup_loc.address}\n"
            f"üìç <b>Cel:</b> {dest_loc.address}\n"
            f"üë• <b>Pasa≈ºer√≥w:</b> {data['passengers_count']}\n"
            f"üíµ <b>Koszt:</b> {estimated_price} z≈Ç\n"
            f"üìè <b>Dystans:</b> {distance:.1f} km\n\n"
            f"‚è∞ Szukamy dostƒôpnego kierowcy...",
            reply_markup=get_client_ride_keyboard(language.value, "pending"),
            parse_mode="HTML"
        )

        await callback.answer("‚úÖ Zam√≥wienie z≈Ço≈ºone!")
        await state.set_state(ClientStates.RIDE_IN_PROGRESS)  # –û–±–Ω–æ–≤–∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    except Exception as e:
        logger.error(f"Error confirming ride: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas sk≈Çadania zam√≥wienia")


# ===================================================================
# –°–ò–°–¢–ï–ú–ê –û–ñ–ò–î–ê–ù–ò–Ø - –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–õ–ò–ï–ù–¢–ê
# ===================================================================

@taxi_router.callback_query(F.data == "request_stop")
async def request_stop(callback: CallbackQuery):
    """–û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –ó–∞–ø—Ä–æ—Å–∏—Ç—å –æ—Å—Ç–∞–Ω–æ–≤–∫—É –≤–æ –≤—Ä–µ–º—è –ø–æ–µ–∑–¥–∫–∏"""
    try:
        print(f"üõë [CLIENT] Stop request from passenger {callback.from_user.id}")

        with Session() as session:
            order = session.query(Order).filter_by(
                client_id=callback.from_user.id,
                status="in_progress"
            ).order_by(Order.created_at.desc()).first()

            if not order or not order.driver_id:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            print(f"üéØ [CLIENT] Found active ride {order.id} with driver {order.driver_id}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ —Å—á–µ—Ç—á–∏–∫ –æ–∂–∏–¥–∞–Ω–∏—è
            try:
                from core.handlers.driver.ride_handlers import waiting_timers
                if order.id in waiting_timers:
                    await callback.answer("‚è∞ Licznik oczekiwania ju≈º jest aktywny")
                    return
            except ImportError:
                print("‚ö†Ô∏è [CLIENT] Could not import waiting_timers, continuing anyway")

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
            builder = InlineKeyboardBuilder()
            builder.button(text="‚è∏Ô∏è Zatrzymaj i uruchom licznik", callback_data="accept_waiting")
            builder.button(text="‚ùå Nie mogƒô siƒô zatrzymaƒá", callback_data="decline_waiting")
            builder.adjust(1)

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –æ –∑–∞–ø—Ä–æ—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            passenger_name = callback.from_user.first_name or f"ID {callback.from_user.id}"

            driver_message = (
                "‚è∏Ô∏è <b>PASA≈ªER PROSI O ZATRZYMANIE</b>\n\n"
                f"üöñ <b>ID podr√≥≈ºy:</b> {order.id}\n"
                f"üë§ <b>Pasa≈ºer:</b> {passenger_name}\n"
                f"üìç <b>Trasa:</b> {order.pickup_address} ‚Üí {order.destination_address}\n\n"
                "‚è∞ <b>Taryfa oczekiwania:</b> 1 z≈Ç/minuta\n\n"
                "Wybierz dzia≈Çanie:"
            )

            await Bots.driver.send_message(
                chat_id=order.driver_id,
                text=driver_message,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )

            print(f"üì¢ [CLIENT] Sent stop request to driver {order.driver_id}")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            passenger_message = (
                "‚è∏Ô∏è <b>Pro≈õba o zatrzymanie wys≈Çana!</b>\n\n"
                "‚è∞ <b>Taryfa oczekiwania:</b> 1 z≈Ç/minuta\n\n"
                "Czekamy na odpowied≈∫ kierowcy..."
            )

            await callback.message.edit_text(
                text=passenger_message,
                parse_mode="HTML"
            )

            await callback.answer("‚úÖ Pro≈õba wys≈Çana do kierowcy")
            print(f"‚úÖ [CLIENT] Stop request processed successfully")

    except Exception as e:
        logger.error(f"Error requesting stop: {e}")
        print(f"üí• [CLIENT] Error: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas wysy≈Çania pro≈õby")


@taxi_router.callback_query(F.data == "current_location")
async def show_current_location_enhanced(callback: CallbackQuery):
    """–û–ë–ù–û–í–õ–ï–ù–ù–´–ô: –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞)"""
    try:
        print(f"üìç [CLIENT] Location request from passenger {callback.from_user.id}")

        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–µ–∑–¥–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        with Session() as session:
            order = session.query(Order).filter(
                Order.client_id == callback.from_user.id,
                Order.status.in_(["accepted", "driver_arrived", "in_progress"])
            ).order_by(Order.created_at.desc()).first()

            if not order or not order.driver_id:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –≤–æ–¥–∏—Ç–µ–ª—è —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            await Bots.driver.send_message(
                chat_id=order.driver_id,
                text=(
                    "üìç <b>PASA≈ªER PROSI O LOKALIZACJƒò</b>\n\n"
                    "Pasa≈ºer chce poznaƒá TwojƒÖ aktualnƒÖ lokalizacjƒô.\n"
                    "Naci≈õnij przycisk '–¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é' aby wys≈Çaƒá swojƒÖ lokalizacjƒô."
                ),
                parse_mode="HTML"
            )

            await callback.answer("‚úÖ Poproszono kierowcƒô o lokalizacjƒô")

            await callback.message.edit_text(
                "üìç <b>Pro≈õba o lokalizacjƒô wys≈Çana</b>\n\n"
                "Poproszono kierowcƒô o przes≈Çanie aktualnej lokalizacji.",
                parse_mode="HTML"
            )

            print(f"üìç [CLIENT] Location request sent to driver {order.driver_id}")

    except Exception as e:
        logger.error(f"Error requesting current location: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas pobierania lokalizacji")


@taxi_router.callback_query(F.data == "ready_to_continue")
async def passenger_ready_to_continue(callback: CallbackQuery):
    """–ü–∞—Å—Å–∞–∂–∏—Ä –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–µ–∑–¥–∫—É"""
    try:
        print(f"‚úÖ [CLIENT] Passenger ready to continue: {callback.from_user.id}")

        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–µ–∑–¥–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        with Session() as session:
            order = session.query(Order).filter(
                Order.client_id == callback.from_user.id,
                Order.status == "in_progress"
            ).order_by(Order.created_at.desc()).first()

            if not order or not order.driver_id:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
            await Bots.driver.send_message(
                chat_id=order.driver_id,
                text=(
                    "‚úÖ <b>PASA≈ªER GOTOWY DO KONTYNUACJI</b>\n\n"
                    "Pasa≈ºer jest gotowy do kontynuacji podr√≥≈ºy.\n"
                    "Mo≈ºesz zako≈Ñczyƒá oczekiwanie i kontynuowaƒá jazdƒô."
                ),
                parse_mode="HTML"
            )

            await callback.message.edit_text(
                "‚úÖ <b>Kierowca zosta≈Ç powiadomiony</b>\n\n"
                "Poinformowali≈õmy kierowcƒô, ≈ºe jeste≈õ gotowy do kontynuacji podr√≥≈ºy.",
                parse_mode="HTML"
            )

            await callback.answer("‚úÖ Kierowca zosta≈Ç powiadomiony")
            print(f"üì¢ [CLIENT] Notified driver {order.driver_id} that passenger is ready")

    except Exception as e:
        logger.error(f"Error notifying driver passenger ready: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas powiadamiania kierowcy")


@taxi_router.callback_query(F.data == "check_waiting_cost")
async def check_waiting_cost_passenger(callback: CallbackQuery):
    """–ü–∞—Å—Å–∞–∂–∏—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è"""
    try:
        print(f"üìä [CLIENT] Passenger checking waiting cost: {callback.from_user.id}")

        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–µ–∑–¥–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        with Session() as session:
            order = session.query(Order).filter(
                Order.client_id == callback.from_user.id,
                Order.status == "in_progress"
            ).order_by(Order.created_at.desc()).first()

            if not order:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –ø–æ–µ–∑–¥–∫–∏
            try:
                from core.handlers.driver.ride_handlers import waiting_timers
                from datetime import datetime

                if order.id in waiting_timers:
                    start_time = waiting_timers[order.id]['start_time']
                    current_time = datetime.now()
                    elapsed = current_time - start_time
                    minutes = int(elapsed.total_seconds() / 60)
                    cost = max(1, minutes)  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞

                    text = (
                        f"üìä <b>AKTUALNY KOSZT OCZEKIWANIA</b>\n\n"
                        f"‚è∞ <b>Rozpoczƒôto:</b> {start_time.strftime('%H:%M:%S')}\n"
                        f"‚è±Ô∏è <b>Up≈Çynƒô≈Ço:</b> {minutes} min\n"
                        f"üí∞ <b>Koszt:</b> {cost} z≈Ç\n\n"
                        f"<i>Taryfa: 1 z≈Ç za minutƒô</i>"
                    )
                else:
                    text = "‚ÑπÔ∏è Licznik oczekiwania nie jest aktywny"

            except ImportError:
                text = "‚ö†Ô∏è Informacje o oczekiwaniu niedostƒôpne"

            await callback.answer(text, show_alert=True)

    except Exception as e:
        logger.error(f"Error checking waiting cost for passenger: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas sprawdzania kosztu")


# ===================================================================
# –°–¢–ê–ù–î–ê–†–¢–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–ï–ó–î–ö–û–ô
# ===================================================================

@taxi_router.callback_query(F.data == "cancel_ride")
async def cancel_ride_client(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∫–ª–∏–µ–Ω—Ç–æ–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞
        with Session() as session:
            order = session.query(Order).filter_by(
                client_id=callback.from_user.id
            ).filter(Order.status.in_(["pending", "accepted", "driver_arrived"])).order_by(
                Order.created_at.desc()).first()

            if not order:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            order.status = "cancelled"
            order.cancellation_reason = "Cancelled by client"
            from datetime import datetime
            order.cancelled_at = datetime.now()
            session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –∑–∞–∫–∞–∑ –±—ã–ª –ø—Ä–∏–Ω—è—Ç
            if order.driver_id:
                try:
                    await Bots.driver.send_message(
                        chat_id=order.driver_id,
                        text=f"‚ùå <b>–ó–∞–∫–∞–∑ #{order.id} –æ—Ç–º–µ–Ω–µ–Ω –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º</b>",
                        parse_mode="HTML"
                    )
                except:
                    pass

            await callback.message.edit_text(
                "‚ùå <b>Zam√≥wienie anulowane</b>\n\n"
                "Twoje zam√≥wienie zosta≈Ço pomy≈õlnie anulowane.",
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ Zam√≥wienie anulowane")
            await state.clear()

    except Exception as e:
        logger.error(f"Error cancelling ride: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas anulowania")


@taxi_router.callback_query(F.data == "show_driver_location")
async def show_driver_location(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        with Session() as session:
            order = session.query(Order).filter_by(
                client_id=callback.from_user.id
            ).filter(Order.status.in_(["accepted", "driver_arrived"])).order_by(Order.created_at.desc()).first()

            if not order or not order.driver_id:
                await callback.answer("‚ùå –í–æ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏—è
            await callback.message.answer_location(
                latitude=order.pickup_lat + 0.001,  # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ä—è–¥–æ–º —Å —Ç–æ—á–∫–æ–π –ø–æ–¥–∞—á–∏
                longitude=order.pickup_lng + 0.001
            )
            await callback.answer("üìç Lokalizacja kierowcy")

    except Exception as e:
        logger.error(f"Error showing driver location: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas pobierania lokalizacji")


@taxi_router.callback_query(F.data == "call_driver")
async def call_driver(callback: CallbackQuery):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    await callback.answer(
        "üìû Funkcja dzwonienia zostanie wkr√≥tce dodana",
        show_alert=True
    )


@taxi_router.callback_query(F.data == "call_support")
async def call_support(callback: CallbackQuery):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
    await callback.answer(
        "üìû Skontaktuj siƒô z pomocƒÖ: @taxi_support_bot",
        show_alert=True
    )


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–í–û–î–ê –ê–î–†–ï–°–û–í –í–†–£–ß–ù–£–Æ
# ===================================================================

@taxi_router.message(F.text.in_(["‚úçÔ∏è Wpisz adres rƒôcznie", "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é", "‚úçÔ∏è Enter Address Manually"]),
                     StateFilter(ClientStates.WAITING_PICKUP_LOCATION))
async def manual_pickup_address(message: Message, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –ø–æ–¥–∞—á–∏"""
    await message.answer(
        "üìù <b>Wpisz adres odbioru:</b>\n\n"
        "Przyk≈Çad: ul. Wojska Polskiego 12, Szczecin",
        parse_mode="HTML"
    )
    await state.set_state(ClientStates.WAITING_PICKUP_LOCATION)


@taxi_router.message(F.text.in_(["‚úçÔ∏è Wpisz adres rƒôcznie", "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é", "‚úçÔ∏è Enter Address Manually"]),
                     StateFilter(ClientStates.WAITING_DESTINATION_LOCATION))
async def manual_destination_address(message: Message, state: FSMContext):
    """–†—É—á–Ω–æ–π –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    await message.answer(
        "üìù <b>Wpisz adres docelowy:</b>\n\n"
        "Przyk≈Çad: Galeria Kaskada, al. Niepodleg≈Ço≈õci 36, Szczecin",
        parse_mode="HTML"
    )


@taxi_router.message(F.text, StateFilter(ClientStates.WAITING_PICKUP_LOCATION))
async def handle_pickup_address_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–æ–¥–∞—á–∏"""
    try:
        if message.text in ["‚ùå Anuluj", "‚ùå –û—Ç–º–µ–Ω–∞", "‚ùå Cancel"]:
            await state.clear()
            await message.answer("‚ùå Zam√≥wienie anulowane")
            return

        # –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        pickup_location = await maps_service.geocode_address(message.text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(pickup_location=pickup_location)

        language = await get_user_language(message.from_user.id)

        await message.answer(
            f"‚úÖ <b>Miejsce odbioru:</b>\n{pickup_location.address}\n\n"
            f"üìç Teraz wy≈õlij lokalizacjƒô docelowƒÖ lub wpisz adres:",
            parse_mode="HTML",
            reply_markup=get_location_keyboard(language.value)
        )

        await state.set_state(ClientStates.WAITING_DESTINATION_LOCATION)

    except Exception as e:
        logger.error(f"Error handling pickup address text: {e}")
        await message.answer("‚ùå Nie mo≈ºna znale≈∫ƒá tego adresu. Spr√≥buj ponownie.")


@taxi_router.message(F.text, StateFilter(ClientStates.WAITING_DESTINATION_LOCATION))
async def handle_destination_address_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        if message.text in ["‚ùå Anuluj", "‚ùå –û—Ç–º–µ–Ω–∞", "‚ùå Cancel"]:
            await state.clear()
            await message.answer("‚ùå Zam√≥wienie anulowane")
            return

        # –ì–µ–æ–∫–æ–¥–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
        destination_location = await maps_service.geocode_address(message.text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(destination_location=destination_location)

        language = await get_user_language(message.from_user.id)

        await message.answer(
            f"‚úÖ <b>Miejsce docelowe:</b>\n{destination_location.address}\n\n"
            f"üë• Wybierz liczbƒô pasa≈ºer√≥w:",
            parse_mode="HTML",
            reply_markup=get_passengers_keyboard(language.value)
        )

        await state.set_state(ClientStates.WAITING_PASSENGERS_COUNT)

    except Exception as e:
        logger.error(f"Error handling destination address text: {e}")
        await message.answer("‚ùå Nie mo≈ºna znale≈∫ƒá tego adresu. Spr√≥buj ponownie.")


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–¢–ú–ï–ù–´
# ===================================================================

@taxi_router.message(F.text.in_(["‚ùå Anuluj", "‚ùå –û—Ç–º–µ–Ω–∞", "‚ùå Cancel"]))
async def cancel_order_process(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–∫–∞–∑–∞"""
    await state.clear()

    language = await get_user_language(message.from_user.id)

    if language == Language.EN:
        text = "‚ùå Order cancelled. You can start over anytime."
    elif language == Language.RU:
        text = "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
    else:  # pl
        text = "‚ùå Zam√≥wienie anulowane. Mo≈ºesz zaczƒÖƒá od nowa w ka≈ºdej chwili."

    await message.answer(
        text,
        reply_markup=get_main_menu_keyboard(language.value, UserRole.CLIENT)
    )


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô –û –ò–ó–ú–ï–ù–ï–ù–ò–ò –°–¢–ê–¢–£–°–ê (–¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏)
# ===================================================================

@taxi_router.callback_query(F.data.startswith("ride_status_"))
async def handle_ride_status_update(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–µ–∑–¥–∫–∏"""
    try:
        status = callback.data.split("_")[2]

        with Session() as session:
            order = session.query(Order).filter_by(
                client_id=callback.from_user.id
            ).filter(Order.status.in_(["accepted", "driver_arrived", "in_progress"])).order_by(
                Order.created_at.desc()).first()

            if not order:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            lang = await get_user_language_simple(callback.from_user.id)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            if status == "accepted":
                keyboard = get_client_ride_keyboard(lang, "accepted")
                status_text = "‚úÖ Kierowca jedzie do Ciebie"
            elif status == "arrived":
                keyboard = get_client_ride_keyboard(lang, "arrived")
                status_text = "üöó Kierowca przyjecha≈Ç na miejsce"
            elif status == "in_progress":
                keyboard = get_client_ride_keyboard(lang, "in_progress")
                status_text = "üö¶ Podr√≥≈º rozpoczƒôta"
            else:
                keyboard = None
                status_text = "üì± Status zaktualizowany"

            if keyboard:
                await callback.message.edit_reply_markup(reply_markup=keyboard)

            await callback.answer(f"üì± {status_text}")

    except Exception as e:
        logger.error(f"Error handling ride status update: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd aktualizacji statusu")


# ===================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –û–¢–õ–ê–î–ö–ò
# ===================================================================

@taxi_router.message(F.text.startswith("/client_status"))
async def check_client_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        with Session() as session:
            # –ù–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –∫–ª–∏–µ–Ω—Ç–∞
            active_order = session.query(Order).filter_by(
                client_id=message.from_user.id
            ).filter(Order.status.not_in(["completed", "cancelled"])).order_by(Order.created_at.desc()).first()

            if not active_order:
                await message.answer("üìä <b>–°–¢–ê–¢–£–° –ö–õ–ò–ï–ù–¢–ê</b>\n\n‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", parse_mode="HTML")
                return

            result_text = (
                f"üìä <b>–°–¢–ê–¢–£–° –ö–õ–ò–ï–ù–¢–ê</b>\n\n"
                f"üÜî <b>–ó–∞–∫–∞–∑:</b> #{active_order.id}\n"
                f"üìã <b>–°—Ç–∞—Ç—É—Å:</b> {active_order.status}\n"
                f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {active_order.pickup_address}\n"
                f"üìç <b>–ö—É–¥–∞:</b> {active_order.destination_address}\n"
                f"üë• <b>–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤:</b> {getattr(active_order, 'passengers_count', 1)}\n"
                f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {getattr(active_order, 'estimated_price', getattr(active_order, 'price', 0))} z≈Ç\n"
                f"üïí <b>–°–æ–∑–¥–∞–Ω:</b> {active_order.created_at.strftime('%H:%M:%S')}"
            )

            if active_order.driver_id:
                result_text += f"\nüë§ <b>–í–æ–¥–∏—Ç–µ–ª—å:</b> {active_order.driver_name or active_order.driver_id}"

            if active_order.started_at:
                result_text += f"\nüö¶ <b>–ù–∞—á–∞—Ç:</b> {active_order.started_at.strftime('%H:%M:%S')}"

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏
            lang = await get_user_language_simple(message.from_user.id)
            keyboard = None

            if active_order.status == "pending":
                keyboard = get_client_ride_keyboard(lang, "pending")
            elif active_order.status == "accepted":
                keyboard = get_client_ride_keyboard(lang, "accepted")
            elif active_order.status == "in_progress":
                keyboard = get_client_ride_keyboard(lang, "in_progress")

            await message.answer(result_text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")


# ===================================================================
# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–ï–†–ï–•–í–ê–¢–ß–ò–ö CALLBACK –î–õ–Ø –û–¢–õ–ê–î–ö–ò
# ===================================================================

@taxi_router.callback_query()
async def catch_unhandled_taxi_callbacks(callback: CallbackQuery):
    """–ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ callback –≤ taxi_ride"""
    print(f"üîß [TAXI DEBUG] Unhandled callback: {callback.data}")
    await callback.answer(f"üîß TAXI DEBUG: Callback '{callback.data}' –ø–æ–ª—É—á–µ–Ω –Ω–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
    logger.warning(f"Unhandled taxi callback: {callback.data} from user {callback.from_user.id}")


# ===================================================================
# –ú–ï–ù–ï–î–ñ–ï–† –°–¢–ê–¢–£–°–û–í
# ===================================================================

class RideStatusManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–µ–∑–¥–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""

    @staticmethod
    def get_status_text(status: str, language: str = "pl") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ"""
        status_texts = {
            "pending": {
                "pl": "‚è≥ Szukamy kierowcy",
                "en": "‚è≥ Looking for driver",
                "ru": "‚è≥ –ò—â–µ–º –≤–æ–¥–∏—Ç–µ–ª—è"
            },
            "accepted": {
                "pl": "‚úÖ Kierowca jedzie do Ciebie",
                "en": "‚úÖ Driver is coming to you",
                "ru": "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –µ–¥–µ—Ç –∫ –≤–∞–º"
            },
            "driver_arrived": {
                "pl": "üöó Kierowca przyjecha≈Ç",
                "en": "üöó Driver has arrived",
                "ru": "üöó –í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª"
            },
            "in_progress": {
                "pl": "üö¶ Podr√≥≈º w toku",
                "en": "üö¶ Trip in progress",
                "ru": "üö¶ –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å"
            },
            "completed": {
                "pl": "üèÅ Podr√≥≈º zako≈Ñczona",
                "en": "üèÅ Trip completed",
                "ru": "üèÅ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            },
            "cancelled": {
                "pl": "‚ùå Anulowane",
                "en": "‚ùå Cancelled",
                "ru": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
            }
        }

        return status_texts.get(status, {}).get(language, status)


# ===================================================================
# –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô
# ===================================================================

__all__ = [
    'taxi_router',
    'RideStatusManager'
]