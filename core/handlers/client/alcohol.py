"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è (–ø–æ–∫—É–ø–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–æ–≤)
"""
import logging
import sys
import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ states
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))

try:
    from states import AlcoholOrderState
except ImportError:
    # Fallback - —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ
    from aiogram.fsm.state import State, StatesGroup

    class AlcoholOrderState(StatesGroup):
        waiting_products = State()
        waiting_budget = State()
        waiting_age = State()
        waiting_address = State()
        confirmation = State()

from config import Config
from core.services.user_service import UserService
from core.models import User, Ride, RideStatus
from core.database import get_session

logger = logging.getLogger(__name__)
router = Router()


# –§—É–Ω–∫—Ü–∏–∏ –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
def get_localization(lang: str, key: str) -> str:
    """–§—É–Ω–∫—Ü–∏—è –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –≤—Å–µ—Ö —è–∑—ã–∫–æ–≤"""
    translations = {
        "pl": {
            "start": "üëã Witaj! Wybierz us≈Çugƒô:",
            "enter_shopping_list": "üõí Wprowad≈∫ listƒô zakup√≥w (np. 1x ≈ªubr 0.5L, 2x ≈ªywiec, 1x Vodka):",
            "enter_budget": "üí∞ Podaj maksymalny bud≈ºet na zakupy (w z≈Ç):",
            "invalid_budget": "‚ùå Nieprawid≈Çowy bud≈ºet! Wprowad≈∫ liczbƒô:",
            "budget_too_low": "‚ùå Minimalna kwota zakup√≥w to 20 z≈Ç",
            "confirm_age": "üîû Czy masz uko≈Ñczone 18 lat?",
            "age_warning": "üö´ Dostawa alkoholu mo≈ºliwa tylko dla os√≥b pe≈Çnoletnich!",
            "enter_alcohol_address": "üìç Podaj adres dostawy:",
            "alcohol_shop_tariff_info": "üöö <b>Zakup i dostawa alkoholu:</b>\n\n‚Ä¢ Op≈Çata za us≈Çugƒô: 25 z≈Ç + 15 z≈Ç\n‚Ä¢ Op≈Çata za km: 3 z≈Ç/km\n‚Ä¢ Taryfa nocna (22:00-6:00): +30%\n‚Ä¢ Dodatkowo: koszt zakup√≥w\n‚Ä¢ P≈Çatno≈õƒá <u>wy≈ÇƒÖcznie got√≥wkƒÖ</u>",
            "alcohol_cash_only": "‚ö†Ô∏è <b>Uwaga!</b> Przy dostawie alkoholu mo≈ºliwa jest <u>wy≈ÇƒÖcznie p≈Çatno≈õƒá got√≥wkƒÖ</u>!",
            "alcohol_shop_receipt_info": "üìù <b>Uwaga!</b> Kierowca kupi alkohol w wybranym sklepie i przywiezie paragon. Koszt zakup√≥w nale≈ºy op≈Çaciƒá <u>dodatkowo</u> do op≈Çaty za us≈Çugƒô.",
            "back_to_menu": "‚Ü©Ô∏è Wr√≥ƒá do menu",
            "route_error": "‚ùå B≈ÇƒÖd trasy. Sprawd≈∫ adresy.",
            "yes": "‚úî Tak",
            "no": "‚úñ Nie",
            "alcohol_service_description": "üõí <b>Us≈Çuga zakupu i dostawy alkoholu</b>\n\nKierowca kupi alkohol zgodnie z TwojƒÖ listƒÖ i dostawi pod wskazany adres.",
            "alcohol_order_waiting": "üïí <b>Zam√≥wienie oczekuje na akceptacjƒô przez kierowcƒô</b>\n\nPo akceptacji otrzymasz:\n- Dane kierowcy i pojazdu\n- Szacowany czas realizacji",
            "order_cancelled": "‚ùå <b>Zam√≥wienie anulowane</b>",
            "order_error": "‚ùå <b>B≈ÇƒÖd podczas tworzenia zam√≥wienia</b>"
        },
        "ru": {
            "start": "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            "enter_shopping_list": "üõí –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ (–Ω–∞–ø—Ä. 1x –ü–∏–≤–æ 0.5–õ, 2x –í–æ–¥–∫–∞, 1x –í–∏–Ω–æ):",
            "enter_budget": "üí∞ –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –ø–æ–∫—É–ø–∫–∏ (–≤ z≈Ç):",
            "invalid_budget": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:",
            "budget_too_low": "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫ 20 z≈Ç",
            "confirm_age": "üîû –í–∞–º –µ—Å—Ç—å 18 –ª–µ—Ç?",
            "age_warning": "üö´ –î–æ—Å—Ç–∞–≤–∫–∞ –∞–ª–∫–æ–≥–æ–ª—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–Ω–∏—Ö!",
            "enter_alcohol_address": "üìç –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:",
            "alcohol_shop_tariff_info": "üöö <b>–ü–æ–∫—É–ø–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∞–ª–∫–æ–≥–æ–ª—è:</b>\n\n‚Ä¢ –ü–ª–∞—Ç–∞ –∑–∞ —É—Å–ª—É–≥—É: 25 z≈Ç + 15 z≈Ç\n‚Ä¢ –ü–ª–∞—Ç–∞ –∑–∞ –∫–º: 3 z≈Ç/–∫–º\n‚Ä¢ –ù–æ—á–Ω–æ–π —Ç–∞—Ä–∏—Ñ (22:00-6:00): +30%\n‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫\n‚Ä¢ –û–ø–ª–∞—Ç–∞ <u>—Ç–æ–ª—å–∫–æ –Ω–∞–ª–∏—á–Ω—ã–º–∏</u>",
            "alcohol_cash_only": "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –ü—Ä–∏ –¥–æ—Å—Ç–∞–≤–∫–µ –∞–ª–∫–æ–≥–æ–ª—è –≤–æ–∑–º–æ–∂–Ω–∞ <u>—Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏</u>!",
            "alcohol_shop_receipt_info": "üìù <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í–æ–¥–∏—Ç–µ–ª—å –∫—É–ø–∏—Ç –∞–ª–∫–æ–≥–æ–ª—å –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –∏ –ø—Ä–∏–≤–µ–∑–µ—Ç —á–µ–∫. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–æ–∫ –Ω—É–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å <u>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ</u> –∫ –ø–ª–∞—Ç–µ –∑–∞ —É—Å–ª—É–≥—É.",
            "back_to_menu": "‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
            "route_error": "‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å–∞.",
            "yes": "‚úî –î–∞",
            "no": "‚úñ –ù–µ—Ç",
            "alcohol_service_description": "üõí <b>–£—Å–ª—É–≥–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–ª–∫–æ–≥–æ–ª—è</b>\n\n–í–æ–¥–∏—Ç–µ–ª—å –∫—É–ø–∏—Ç –∞–ª–∫–æ–≥–æ–ª—å —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.",
            "alcohol_order_waiting": "üïí <b>–ó–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–º</b>\n\n–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n- –î–∞–Ω–Ω—ã–µ –≤–æ–¥–∏—Ç–µ–ª—è –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n- –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            "order_cancelled": "‚ùå <b>–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω</b>",
            "order_error": "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞</b>"
        },
        "en": {
            "start": "üëã Hello! Choose service:",
            "enter_shopping_list": "üõí Enter shopping list (e.g. 1x Beer 0.5L, 2x Vodka, 1x Wine):",
            "enter_budget": "üí∞ Enter maximum budget for purchases (in z≈Ç):",
            "invalid_budget": "‚ùå Invalid budget! Enter a number:",
            "budget_too_low": "‚ùå Minimum purchase amount is 20 z≈Ç",
            "confirm_age": "üîû Are you 18+ years old?",
            "age_warning": "üö´ Alcohol delivery only for adults!",
            "enter_alcohol_address": "üìç Enter delivery address:",
            "alcohol_shop_tariff_info": "üöö <b>Alcohol purchase and delivery:</b>\n\n‚Ä¢ Service fee: 25 z≈Ç + 15 z≈Ç\n‚Ä¢ Fee per km: 3 z≈Ç/km\n‚Ä¢ Night tariff (22:00-6:00): +30%\n‚Ä¢ Additionally: purchase cost\n‚Ä¢ Payment <u>cash only</u>",
            "alcohol_cash_only": "‚ö†Ô∏è <b>Attention!</b> For alcohol delivery <u>only cash payment</u> is possible!",
            "alcohol_shop_receipt_info": "üìù <b>Attention!</b> Driver will buy alcohol at selected shop and bring receipt. Purchase cost must be paid <u>additionally</u> to service fee.",
            "back_to_menu": "‚Ü©Ô∏è Back to menu",
            "route_error": "‚ùå Route error. Check addresses.",
            "yes": "‚úî Yes",
            "no": "‚úñ No",
            "alcohol_service_description": "üõí <b>Alcohol purchase and delivery service</b>\n\nDriver will buy alcohol according to your list and deliver to specified address.",
            "alcohol_order_waiting": "üïí <b>Order awaiting driver acceptance</b>\n\nAfter confirmation you will receive:\n- Driver and vehicle details\n- Estimated completion time",
            "order_cancelled": "‚ùå <b>Order cancelled</b>",
            "order_error": "‚ùå <b>Error creating order</b>"
        }
    }
    return translations.get(lang, {}).get(key, key)


async def get_user_language(telegram_id: int) -> str:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_service = UserService()
        user = await user_service.get_user_by_telegram_id(telegram_id)
        return user.language if user else "pl"
    except Exception:
        return "pl"


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def confirm_keyboard(lang: str):
    builder = InlineKeyboardBuilder()
    builder.button(text=get_localization(lang, "yes"), callback_data="confirm_yes")
    builder.button(text=get_localization(lang, "no"), callback_data="confirm_no")
    return builder.as_markup()


def back_keyboard(lang: str):
    builder = InlineKeyboardBuilder()
    builder.button(text=get_localization(lang, "back_to_menu"), callback_data="back_to_menu")
    return builder.as_markup()


def main_menu_keyboard(lang: str):
    builder = InlineKeyboardBuilder()
    builder.button(text="üöñ Przejazd miejski", callback_data="menu_city_ride")
    builder.button(text="üç∑ Dostawa alkoholu", callback_data="menu_alcohol")
    builder.button(text="‚úàÔ∏è Lotnisko", callback_data="menu_airport")
    builder.adjust(2, 1)
    return builder.as_markup()


# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞
def calculate_distance(origin: str, destination: str) -> float:
    """–ü—Ä–∏–º–µ—Ä–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è"""
    # TODO: –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Google Maps API
    return 5.0


def calculate_alcohol_delivery_price(distance: float) -> float:
    """–†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–ª–∫–æ–≥–æ–ª—è"""
    from datetime import datetime, time

    base = 25
    service_fee = 15
    per_km = 3
    total = base + service_fee + (distance * per_km)

    # –ù–æ—á–Ω–æ–π —Ç–∞—Ä–∏—Ñ (22:00-6:00)
    now = datetime.now().time()
    night_start = time(22, 0)
    night_end = time(6, 0)

    if now >= night_start or now <= night_end:
        total *= 1.3  # +30%

    return round(total, 2)


async def save_alcohol_order(user_id: int, order_data: dict) -> int:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∞–ª–∫–æ–≥–æ–ª—è"""
    try:
        async with get_session() as session:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å Ride –∫–∞–∫ –æ—Å–Ω–æ–≤—É –¥–ª—è –∑–∞–∫–∞–∑–∞
            ride = Ride(
                client_id=user_id,
                pickup_address="Alcohol Shop Delivery",
                pickup_lat=53.4285,  # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –©–µ—Ü–∏–Ω–∞
                pickup_lng=14.5528,
                destination_address=order_data['address'],
                destination_lat=53.4285,  # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                destination_lng=14.5528,
                distance_km=order_data.get('distance', 5.0),
                estimated_price=order_data['price'],
                status=RideStatus.PENDING,
                notes=f"ALCOHOL DELIVERY - Products: {order_data['products']}, Budget: {order_data['budget']} z≈Ç"
            )

            session.add(ride)
            await session.commit()
            await session.refresh(ride)

            logger.info(f"Alcohol order saved: {ride.id}")
            return ride.id

    except Exception as e:
        logger.error(f"Error saving alcohol order: {e}")
        return 1  # Fallback ID


async def notify_driver_simple(order_id: int, order_data: dict):
    """–ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –±–µ–∑ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    try:
        from core.bot_instance import Bots

        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ Przyjmij", callback_data=f"accept_{order_id}")
        builder.button(text="‚ùå Odrzuƒá", callback_data=f"reject_{order_id}")

        text = (
            "üõí <b>ZAKUP I DOSTAWA ALKOHOLU</b>\n\n"
            f"üìù <b>Lista zakup√≥w:</b>\n{order_data['products']}\n\n"
            f"üí∞ <b>Bud≈ºet klienta:</b> {order_data['budget']} z≈Ç\n"
            f"üìç <b>Dostawa na:</b> {order_data['address']}\n"
            f"üìè <b>Odleg≈Ço≈õƒá:</b> ~{order_data.get('distance', 5):.1f} km\n"
            f"üíµ <b>Twoja op≈Çata:</b> {order_data['price']} z≈Ç\n\n"
            f"‚ÑπÔ∏è <b>Instrukcje:</b>\n"
            f"1. Wybierz najbli≈ºszy sklep z alkoholem\n"
            f"2. Kup produkty zgodnie z listƒÖ\n"
            f"3. Zachowaj paragon fiskalny!\n"
            f"4. Dostarcz + sprawd≈∫ dokumenty (18+)\n"
            f"5. Odbierz: {order_data['price']} z≈Ç + koszt zakup√≥w"
        )

        await Bots.driver.send_message(
            chat_id=Config.DRIVER_CHAT_ID,
            text=text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Error notifying driver: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–æ–≤ –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.callback_query(F.data == "confirm_yes")
async def handle_confirm_yes_from_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    current_state = await state.get_state()

    if current_state == AlcoholOrderState.confirmation.state:
        await confirm_alcohol_order(callback, state)


@router.callback_query(F.data == "confirm_no")
async def handle_confirm_no_from_menu(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await cancel_order(callback, state)


@router.callback_query(F.data == "menu_alcohol")
async def start_alcohol_order(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞ –∞–ª–∫–æ–≥–æ–ª—è"""
    lang = await get_user_language(callback.from_user.id)

    await callback.message.edit_text(
        text=get_localization(lang, "enter_shopping_list"),
        reply_markup=back_keyboard(lang)
    )
    await state.set_state(AlcoholOrderState.waiting_budget)





@router.message(AlcoholOrderState.waiting_budget)
async def process_shopping_list(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"""
    lang = await get_user_language(message.from_user.id)

    if message.text == get_localization(lang, "back_to_menu"):
        await state.clear()
        await message.answer(
            text=get_localization(lang, "start"),
            reply_markup=main_menu_keyboard(lang)
        )
        return

    await state.update_data(products=message.text)
    await message.answer(
        text=get_localization(lang, "enter_budget"),
        reply_markup=back_keyboard(lang)
    )
    await state.set_state(AlcoholOrderState.waiting_age)


@router.message(AlcoholOrderState.waiting_age)
async def process_budget(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞"""
    lang = await get_user_language(message.from_user.id)

    if message.text == get_localization(lang, "back_to_menu"):
        await state.clear()
        await message.answer(
            text=get_localization(lang, "start"),
            reply_markup=main_menu_keyboard(lang)
        )
        return

    try:
        budget = float(message.text)
        if budget < 20:
            await message.answer(get_localization(lang, "budget_too_low"))
            return

        await state.update_data(budget=budget)
        await message.answer(
            text=get_localization(lang, "confirm_age"),
            reply_markup=confirm_keyboard(lang)
        )
        await state.set_state(AlcoholOrderState.waiting_address)

    except ValueError:
        await message.answer(get_localization(lang, "invalid_budget"))


@router.callback_query(AlcoholOrderState.waiting_address, F.data.startswith("confirm_"))
async def process_age_confirmation(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    lang = await get_user_language(callback.from_user.id)
    is_adult = callback.data.split("_")[1] == "yes"

    if not is_adult:
        await callback.message.edit_text(get_localization(lang, "age_warning"))
        await state.clear()
        return

    await callback.message.answer(
        text=get_localization(lang, "alcohol_shop_tariff_info"),
        parse_mode="HTML"
    )

    await callback.message.answer(
        text=get_localization(lang, "enter_alcohol_address"),
        reply_markup=back_keyboard(lang)
    )
    await state.set_state(AlcoholOrderState.confirmation)


@router.message(AlcoholOrderState.confirmation)
async def process_delivery_address(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    lang = await get_user_language(message.from_user.id)
    data = await state.get_data()

    if message.text == get_localization(lang, "back_to_menu"):
        await state.clear()
        await message.answer(
            text=get_localization(lang, "start"),
            reply_markup=main_menu_keyboard(lang)
        )
        return

    try:
        distance = calculate_distance("Plac ≈ªo≈Çnierza, Szczecin", message.text)
        price = calculate_alcohol_delivery_price(distance)

        await state.update_data(address=message.text, distance=distance, price=price)

        await message.answer(
            text=get_localization(lang, "alcohol_cash_only") + "\n\n" +
                 get_localization(lang, "alcohol_shop_receipt_info"),
            parse_mode="HTML"
        )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞
        order_text = (
            f"üõí <b>{get_localization(lang, 'alcohol_service_description').replace('<b>', '').replace('</b>', '')}</b>\n\n"
            f"üìã <b>Lista zakup√≥w:</b>\n<i>{data['products']}</i>\n\n"
            f"üí∞ <b>Bud≈ºet na zakupy:</b> {data['budget']} z≈Ç\n"
            f"üè† <b>Adres dostawy:</b>\n{message.text}\n"
            f"üìè <b>Odleg≈Ço≈õƒá:</b> ~{distance:.1f} km\n\n"
            f"üíµ <b>Op≈Çata za us≈Çugƒô:</b> {price} z≈Ç\n"
            f"üíµ <b>+ koszt zakup√≥w</b> (do {data['budget']} z≈Ç)\n\n"
            f"üí∞ <b>P≈Çatno≈õƒá:</b> got√≥wka\n"
            f"üïí <b>Czas realizacji:</b> 30-45 minut"
        )

        await message.answer(
            text=order_text,
            parse_mode="HTML",
            reply_markup=confirm_keyboard(lang)
        )

    except Exception as e:
        logger.error(f"Error processing address: {e}")
        await message.answer(get_localization(lang, "route_error"))


@router.callback_query(F.data.startswith("confirm_"), AlcoholOrderState.confirmation)
async def confirm_alcohol_order(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    lang = await get_user_language(callback.from_user.id)
    action = callback.data.split("_")[1]

    if action == "yes":
        data = await state.get_data()

        try:
            order_id = await save_alcohol_order(callback.from_user.id, data)
            await notify_driver_simple(order_id, data)

            await callback.message.edit_text(
                text=get_localization(lang, "alcohol_order_waiting"),
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"Error confirming order: {e}")
            await callback.message.edit_text(
                text=get_localization(lang, "order_error"),
                parse_mode="HTML"
            )
    else:
        await callback.message.edit_text(
            text=get_localization(lang, "order_cancelled"),
            parse_mode="HTML"
        )

    await state.clear()


@router.callback_query(F.data == "confirm_no")
async def cancel_order(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞"""
    lang = await get_user_language(callback.from_user.id)
    await state.clear()
    await callback.message.edit_text(
        text=get_localization(lang, "start"),
        reply_markup=main_menu_keyboard(lang)
    )


@router.callback_query(F.data == "back_to_menu")
async def back_to_menu_handler(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    lang = await get_user_language(callback.from_user.id)
    await callback.message.edit_text(
        text=get_localization(lang, "start"),
        reply_markup=main_menu_keyboard(lang)
    )