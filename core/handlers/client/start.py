"""
–•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ –±–æ—Ç–∞ - –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
"""
import logging
from typing import Optional

from aiogram import types, F, Router
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from core.handlers.client.alcohol import router as alcohol_router
from core.services import UserService
from core.models import UserRole
from core.exceptions import TaxiBotException, ValidationError, NotFoundError
from core.utils.localization import get_text, Language
from core.keyboards import get_main_menu_keyboard, get_language_keyboard
from core.states import ClientStates

logger = logging.getLogger(__name__)

# –†–æ—É—Ç–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤
client_router = Router()

# –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
user_service = UserService()


async def get_user_language(telegram_id: int) -> Language:
    """–ü–æ–ª—É—á–∏—Ç—å —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await user_service.get_user_by_telegram_id(telegram_id)
        if user and user.language in ['en', 'pl', 'ru']:
            return Language(user.language)
        return Language.PL  # –ü–æ–ª—å—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –©–µ—Ü–∏–Ω–∞
    except Exception as e:
        logger.error(f"Error getting user language: {e}")
        return Language.PL


async def handle_error(
    update: types.Update,
    error: Exception,
    user_id: int,
    default_message: str = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
    try:
        language = await get_user_language(user_id)

        if isinstance(error, ValidationError):
            message = get_text("validation_error", language, error=str(error))
        elif isinstance(error, NotFoundError):
            message = get_text("not_found_error", language)
        elif isinstance(error, TaxiBotException):
            message = get_text("service_error", language)
        else:
            logger.error(f"Unexpected error: {error}", exc_info=True)
            message = get_text("unexpected_error", language)

        if isinstance(update, Message):
            await update.answer(message)
        elif isinstance(update, CallbackQuery):
            await update.message.answer(message)
            await update.answer()

    except Exception as e:
        logger.error(f"Error in error handler: {e}")
        try:
            if isinstance(update, Message):
                await update.answer(default_message)
            elif isinstance(update, CallbackQuery):
                await update.message.answer(default_message)
                await update.answer()
        except:
            pass


@client_router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    try:
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await user_service.get_or_create_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            role=UserRole.CLIENT
        )

        language = await get_user_language(message.from_user.id)

        welcome_text = get_text(
            "welcome_client",
            language,
            name=user.first_name or "Friend"
        )

        keyboard = get_main_menu_keyboard(language.value, UserRole.CLIENT)

        await message.answer(
            welcome_text,
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    except Exception as e:
        await handle_error(message, e, message.from_user.id)


@client_router.message(F.text.in_(["üöñ Zam√≥w taxi", "üöñ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏", "üöñ Order Taxi"]))
async def order_taxi(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ —Ç–∞–∫—Å–∏"""
    try:
        language = await get_user_language(message.from_user.id)

        text = get_text("send_pickup_location", language)

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∑–¥–µ—Å—å —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∏–º–ø–æ—Ä—Ç–æ–≤
        from core.keyboards import get_location_keyboard
        keyboard = get_location_keyboard(language.value)

        await message.answer(text, reply_markup=keyboard)
        await state.set_state(ClientStates.WAITING_PICKUP_LOCATION)

    except Exception as e:
        await handle_error(message, e, message.from_user.id)


@client_router.message(F.text.in_(["üç∑ Dostawa alkoholu", "üç∑ –î–æ—Å—Ç–∞–≤–∫–∞ –∞–ª–∫–æ–≥–æ–ª—è", "üç∑ Alcohol Delivery"]))
async def order_alcohol(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ –∞–ª–∫–æ–≥–æ–ª—è –±–µ–∑ –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –º–∞–≥–∞–∑–∏–Ω–æ–≤"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        language = await get_user_language(message.from_user.id)

        # –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
        alcohol_texts = {
            Language.PL: {
                'service_info': 'üõí <b>Us≈Çuga zakupu i dostawy alkoholu</b>\n\nKierowca kupi alkohol zgodnie z TwojƒÖ listƒÖ i dostawi pod wskazany adres.',
                'confirm_yes': '‚úî Tak',
                'confirm_no': '‚úñ Nie'
            },
            Language.RU: {
                'service_info': 'üõí <b>–£—Å–ª—É–≥–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–ª–∫–æ–≥–æ–ª—è</b>\n\n–í–æ–¥–∏—Ç–µ–ª—å –∫—É–ø–∏—Ç –∞–ª–∫–æ–≥–æ–ª—å —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —Å–ø–∏—Å–∫—É –∏ –¥–æ—Å—Ç–∞–≤–∏—Ç –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –∞–¥—Ä–µ—Å—É.',
                'confirm_yes': '‚úî –î–∞',
                'confirm_no': '‚úñ –ù–µ—Ç'
            },
            Language.EN: {
                'service_info': 'üõí <b>Alcohol purchase and delivery service</b>\n\nDriver will buy alcohol according to your list and deliver to specified address.',
                'confirm_yes': '‚úî Yes',
                'confirm_no': '‚úñ No'
            }
        }

        # –ë–µ—Ä–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —è–∑—ã–∫–∞
        texts = alcohol_texts.get(language, alcohol_texts[Language.PL])

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        from aiogram.utils.keyboard import InlineKeyboardBuilder
        builder = InlineKeyboardBuilder()
        builder.button(text=texts['confirm_yes'], callback_data="confirm_yes")
        builder.button(text=texts['confirm_no'], callback_data="confirm_no")

        await message.answer(
            text=texts['service_info'],
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–ª–∫–æ–≥–æ–ª—è
        try:
            import sys
            import os
            sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(__file__))))
            from states import AlcoholOrderState
            await state.set_state(AlcoholOrderState.waiting_products)
        except ImportError:
            # Fallback - —Å–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ
            from aiogram.fsm.state import State, StatesGroup

            class AlcoholOrderState(StatesGroup):
                waiting_products = State()
                waiting_budget = State()
                waiting_age = State()
                waiting_address = State()
                confirmation = State()

            await state.set_state(AlcoholOrderState.waiting_products)

    except Exception as e:
        logger.error(f"Error starting alcohol order: {e}")
        await message.answer("‚ö†Ô∏è –ú–æ–¥—É–ª—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∞–ª–∫–æ–≥–æ–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")


@client_router.message(F.text.in_(["üìã Moje przejazdy", "üìã –ú–æ–∏ –ø–æ–µ–∑–¥–∫–∏", "üìã My Rides"]))
async def my_rides(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–µ–∑–¥–æ–∫"""
    try:
        language = await get_user_language(message.from_user.id)

        text = get_text("rides_history", language)
        await message.answer(text, parse_mode="HTML")

    except Exception as e:
        await handle_error(message, e, message.from_user.id)


@client_router.message(F.text.in_(["‚öôÔ∏è Ustawienia", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚öôÔ∏è Settings"]))
async def settings(message: Message) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        language = await get_user_language(message.from_user.id)

        text = get_text("settings_menu", language)
        keyboard = get_language_keyboard()

        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")

    except Exception as e:
        await handle_error(message, e, message.from_user.id)


@client_router.callback_query(F.data.startswith("lang_"))
async def set_language(callback: CallbackQuery) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —è–∑—ã–∫–∞"""
    try:
        lang_code = callback.data.split("_")[1]

        await user_service.update_user_language(
            callback.from_user.id,
            lang_code
        )

        new_language = Language(lang_code)
        success_text = get_text("language_changed", new_language)

        await callback.message.edit_text(success_text)
        await callback.answer()

        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤—ã–º —è–∑—ã–∫–æ–º
        main_keyboard = get_main_menu_keyboard(new_language.value, UserRole.CLIENT)
        await callback.message.answer(
            get_text("main_menu", new_language),
            reply_markup=main_keyboard
        )

    except Exception as e:
        await handle_error(callback, e, callback.from_user.id)


@client_router.message(F.text.in_(["‚ÑπÔ∏è Pomoc", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "‚ÑπÔ∏è Help"]))
async def help_command(message: Message) -> None:
    """–ü–æ–º–æ—â—å"""
    try:
        language = await get_user_language(message.from_user.id)

        if language == Language.EN:
            help_text = """
‚ÑπÔ∏è <b>Help</b>

<b>How to order a taxi:</b>
1. Press "üöñ Order Taxi"
2. Send your location or enter pickup address
3. Enter destination
4. Choose number of passengers
5. Confirm the order

<b>How to order alcohol delivery:</b>
1. Press "üç∑ Alcohol Delivery"
2. Enter shopping list
3. Set budget (min 20 z≈Ç)
4. Confirm age (18+) and address

<b>Other features:</b>
‚Ä¢ üìã View ride history
‚Ä¢ ‚öôÔ∏è Change language and settings
‚Ä¢ ‚ÑπÔ∏è Get help

<b>Support:</b> @taxi_support_bot
"""
        elif language == Language.RU:
            help_text = """
‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å</b>

<b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üöñ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–∞–∫—Å–∏"
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –ø–æ–¥–∞—á–∏
3. –í–≤–µ–¥–∏—Ç–µ –º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
4. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤
5. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑

<b>–ö–∞–∫ –∑–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∞–ª–∫–æ–≥–æ–ª—è:</b>
1. –ù–∞–∂–º–∏—Ç–µ "üç∑ –î–æ—Å—Ç–∞–≤–∫–∞ –∞–ª–∫–æ–≥–æ–ª—è"
2. –í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
3. –£–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç (–º–∏–Ω 20 z≈Ç)
4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (18+) –∏ –∞–¥—Ä–µ—Å

<b>–î—Ä—É–≥–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–µ–∑–¥–æ–∫
‚Ä¢ ‚öôÔ∏è –°–º–µ–Ω–∞ —è–∑—ã–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚Ä¢ ‚ÑπÔ∏è –ü–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å

<b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @taxi_support_bot
"""
        else:  # Polish
            help_text = """
‚ÑπÔ∏è <b>Pomoc</b>

<b>Jak zam√≥wiƒá taxi:</b>
1. Naci≈õnij "üöñ Zam√≥w taxi"  
2. Wy≈õlij lokalizacjƒô lub wpisz adres odbioru
3. Wpisz miejsce docelowe
4. Wybierz liczbƒô pasa≈ºer√≥w
5. Potwierd≈∫ zam√≥wienie

<b>Jak zam√≥wiƒá dostawƒô alkoholu:</b>
1. Naci≈õnij "üç∑ Dostawa alkoholu"
2. Wpisz listƒô zakup√≥w
3. Ustaw bud≈ºet (min 20 z≈Ç)
4. Potwierd≈∫ wiek (18+) i adres

<b>Inne funkcje:</b>
‚Ä¢ üìã PrzeglƒÖdanie historii przejazd√≥w
‚Ä¢ ‚öôÔ∏è Zmiana jƒôzyka i ustawie≈Ñ
‚Ä¢ ‚ÑπÔ∏è Uzyskaj pomoc

<b>Wsparcie:</b> @taxi_support_bot
"""

        await message.answer(help_text, parse_mode="HTML")

    except Exception as e:
        await handle_error(message, e, message.from_user.id)