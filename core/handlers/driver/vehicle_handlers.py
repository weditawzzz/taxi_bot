from aiogram import Router, F
from aiogram.types import Message, PhotoSize, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from core.models import Session, DriverVehicle
from core.bot_instance import Bots
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
from core.services.user_service import get_user_language
from config import Config

router = Router()


class VehicleStates(StatesGroup):
    waiting_info = State()
    waiting_photo = State()


def get_vehicle_keyboard(lang: str = 'pl'):
    translations = {
        'pl': {
            'add_vehicle': 'üöó Dodaj/zmie≈Ñ auto',
            'my_car_info': '‚ÑπÔ∏è Moje dane samochodu'
        },
        'ru': {
            'add_vehicle': 'üöó –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ',
            'my_car_info': '‚ÑπÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ'
        },
        'en': {
            'add_vehicle': 'üöó Add/change car',
            'my_car_info': '‚ÑπÔ∏è My car info'
        }
    }

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=translations[lang]['add_vehicle'],
            callback_data="add_vehicle"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=translations[lang]['my_car_info'],
            callback_data="my_car_info"
        )
    )
    return builder.as_markup()

@router.callback_query(F.data == "add_vehicle")
async def add_vehicle_callback(callback: CallbackQuery, state: FSMContext):
    lang = get_user_language(callback.from_user.id)
    await callback.answer()
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ú–æ–¥–µ–ª—å, –¶–≤–µ—Ç, –ì–æ–¥, –ù–æ–º–µ—Ä\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n"
        "Lexus RX, black, 2024, ZS111ZS"
    )
    await state.set_state(VehicleStates.waiting_info)

@router.callback_query(F.data == "my_car_info")
async def show_vehicle_info(callback: CallbackQuery):
    with Session() as session:
        vehicle = session.query(DriverVehicle).filter_by(driver_id=callback.from_user.id).first()
        if vehicle:
            await callback.message.answer(
                f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:\n\n"
                f"–ú–æ–¥–µ–ª—å: {vehicle.model}\n"
                f"–¶–≤–µ—Ç: {vehicle.color}\n"
                f"–ì–æ–¥: {vehicle.year}\n"
                f"–ù–æ–º–µ—Ä: {vehicle.license_plate}"
            )
        else:
            await callback.message.answer(
                "–í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                reply_markup=get_vehicle_keyboard(get_user_language(callback.from_user.id))
            )
    await callback.answer()

@router.message(VehicleStates.waiting_info, F.text)
async def process_vehicle_info(message: Message, state: FSMContext):
    try:
        model, color, year, plate = map(str.strip, message.text.split(","))

        with Session() as session:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å
            session.query(DriverVehicle).filter_by(driver_id=message.from_user.id).delete()

            vehicle = DriverVehicle(
                driver_id=message.from_user.id,
                driver_name=message.from_user.full_name,
                model=model,
                color=color,
                year=int(year),
                license_plate=plate
            )
            session.add(vehicle)
            session.commit()

        await message.answer(
            "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
            "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"
        )
        await state.set_state(VehicleStates.waiting_photo)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ü—Ä–∏–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:\nToyota Corolla, black, 2020, ABC1234")


@router.message(VehicleStates.waiting_photo, F.photo)
async def process_vehicle_photo(message: Message, state: FSMContext):
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    photo_data = await Bots.driver.download(photo.file_id)

    with Session() as session:
        vehicle = session.query(DriverVehicle).filter_by(driver_id=message.from_user.id).first()
        if vehicle:
            vehicle.photo = photo_data.read()
            session.commit()
            await message.answer("–§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        else:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ!")

    await state.clear()


@router.message(VehicleStates.waiting_photo, F.text)
async def skip_photo(message: Message, state: FSMContext):
    await message.answer("–§–æ—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await state.clear()