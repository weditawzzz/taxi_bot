from aiogram import Router, F
from aiogram.types import Message, PhotoSize, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from core.models import Session, DriverVehicle, VehicleType, detect_vehicle_type, get_seats_by_type
from core.bot_instance import Bots
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton

router = Router()


# –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_user_language(user_id: int) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return "pl"  # Fallback –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏


class VehicleStates(StatesGroup):
    waiting_info = State()
    waiting_photo = State()


def get_vehicle_keyboard(lang: str = 'pl'):
    translations = {
        'pl': {
            'add_vehicle': 'üöó Dodaj/zmie≈Ñ auto',
            'my_car_info': '‚ÑπÔ∏è Moje dane samochodu'
        },
        'ru': {
            'add_vehicle': 'üöó –î–æ–±–∞–≤–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å –∞–≤—Ç–æ',
            'my_car_info': '‚ÑπÔ∏è –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ'
        },
        'en': {
            'add_vehicle': 'üöó Add/change car',
            'my_car_info': '‚ÑπÔ∏è My car info'
        }
    }

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text=translations[lang]['add_vehicle'],
            callback_data="add_vehicle"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text=translations[lang]['my_car_info'],
            callback_data="my_car_info"
        )
    )
    return builder.as_markup()


def get_vehicle_type_display(vehicle_type: VehicleType, lang: str = 'pl') -> str:
    """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞"""
    display_names = {
        'pl': {
            VehicleType.SEDAN: 'Sedan',
            VehicleType.HATCHBACK: 'Hatchback',
            VehicleType.WAGON: 'Kombi',
            VehicleType.COUPE: 'Coupe',
            VehicleType.CONVERTIBLE: 'Kabriolet',
            VehicleType.SUV: 'SUV',
            VehicleType.CROSSOVER: 'Crossover',
            VehicleType.MPV: 'Van (MPV)',
            VehicleType.VAN: 'Furgon',
            VehicleType.PICKUP: 'Pickup',
            VehicleType.ELECTRIC: 'Elektryczny',
            VehicleType.LUXURY: 'Luksusowy'
        },
        'ru': {
            VehicleType.SEDAN: '–°–µ–¥–∞–Ω',
            VehicleType.HATCHBACK: '–•—ç—Ç—á–±–µ–∫',
            VehicleType.WAGON: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª',
            VehicleType.COUPE: '–ö—É–ø–µ',
            VehicleType.CONVERTIBLE: '–ö–∞–±—Ä–∏–æ–ª–µ—Ç',
            VehicleType.SUV: '–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫',
            VehicleType.CROSSOVER: '–ö—Ä–æ—Å—Å–æ–≤–µ—Ä',
            VehicleType.MPV: '–ú–∏–Ω–∏–≤—ç–Ω',
            VehicleType.VAN: '–§—É—Ä–≥–æ–Ω',
            VehicleType.PICKUP: '–ü–∏–∫–∞–ø',
            VehicleType.ELECTRIC: '–≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª—å',
            VehicleType.LUXURY: '–õ—é–∫—Å'
        },
        'en': {
            VehicleType.SEDAN: 'Sedan',
            VehicleType.HATCHBACK: 'Hatchback',
            VehicleType.WAGON: 'Wagon',
            VehicleType.COUPE: 'Coupe',
            VehicleType.CONVERTIBLE: 'Convertible',
            VehicleType.SUV: 'SUV',
            VehicleType.CROSSOVER: 'Crossover',
            VehicleType.MPV: 'MPV',
            VehicleType.VAN: 'Van',
            VehicleType.PICKUP: 'Pickup',
            VehicleType.ELECTRIC: 'Electric',
            VehicleType.LUXURY: 'Luxury'
        }
    }

    return display_names.get(lang, display_names['pl']).get(vehicle_type, str(vehicle_type.value))


@router.callback_query(F.data == "add_vehicle")
async def add_vehicle_callback(callback: CallbackQuery, state: FSMContext):
    lang = get_user_language(callback.from_user.id)
    await callback.answer()
    await callback.message.answer(
        "üìù <b>–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b>\n"
        "<code>–ú–æ–¥–µ–ª—å, –¶–≤–µ—Ç, –ì–æ–¥, –ù–æ–º–µ—Ä</code>\n\n"
        "‚úÖ <b>–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞:</b>\n"
        "‚Ä¢ <code>Toyota Corolla, black, 2020, ABC1234</code>\n"
        "‚Ä¢ <code>BMW X5 M Sport, white, 2019, ZS123AB</code>\n"
        "‚Ä¢ <code>Mercedes-Benz C-Class AMG, silver, 2021, ZS999ZZ</code>\n"
        "‚Ä¢ <code>Mitsubishi Lancer Sportback, red, 2016, ZS456CD</code>\n\n"
        "‚ÑπÔ∏è <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—Å—è:</b>\n"
        "‚Ä¢ –¢–∏–ø –∫—É–∑–æ–≤–∞ (Sedan, Hatchback, SUV –∏ —Ç.–¥.)\n"
        "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç\n"
        "‚Ä¢ –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
        parse_mode="HTML"
    )
    await state.set_state(VehicleStates.waiting_info)


@router.callback_query(F.data == "my_car_info")
async def show_vehicle_info(callback: CallbackQuery):
    lang = get_user_language(callback.from_user.id)

    with Session() as session:
        vehicle = session.query(DriverVehicle).filter_by(driver_id=callback.from_user.id).first()
        if vehicle:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞
            type_display = get_vehicle_type_display(vehicle.vehicle_type,
                                                    lang) if vehicle.vehicle_type else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

            info_text = (
                f"üöó <b>–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:</b>\n\n"
                f"üè≠ <b>–ú–∞—Ä–∫–∞:</b> {vehicle.make or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}\n"
                f"üöô <b>–ú–æ–¥–µ–ª—å:</b> {vehicle.model}\n"
                f"üé® <b>–¶–≤–µ—Ç:</b> {vehicle.color}\n"
                f"üìÖ <b>–ì–æ–¥:</b> {vehicle.year}\n"
                f"üî¢ <b>–ù–æ–º–µ—Ä:</b> {vehicle.license_plate}\n"
                f"üöò <b>–¢–∏–ø –∫—É–∑–æ–≤–∞:</b> {type_display}\n"
                f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:</b> {vehicle.seats}\n"
            )

            if vehicle.photo:
                info_text += f"\nüì∑ <b>–§–æ—Ç–æ:</b> –ó–∞–≥—Ä—É–∂–µ–Ω–æ"
            else:
                info_text += f"\nüì∑ <b>–§–æ—Ç–æ:</b> –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ"

            await callback.message.answer(info_text, parse_mode="HTML")
        else:
            await callback.message.answer(
                "‚ö†Ô∏è –í—ã –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                reply_markup=get_vehicle_keyboard(lang)
            )
    await callback.answer()


@router.message(VehicleStates.waiting_info, F.text)
async def process_vehicle_info(message: Message, state: FSMContext):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º —Ç–∏–ø–∞"""
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å—Ç–∏ –∫–∞–∫ —Ü–≤–µ—Ç, –≥–æ–¥, –Ω–æ–º–µ—Ä
        parts = [part.strip() for part in message.text.split(",")]

        if len(parts) < 4:
            raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")

        # –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª–æ–≤, –ø–æ—ç—Ç–æ–º—É –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 3
        full_model = ", ".join(parts[:-3]).strip()
        color = parts[-3].strip()
        year = parts[-2].strip()
        plate = parts[-1].strip()

        print(f"üöó [VEHICLE] Processing: {full_model}")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–∞—Ä–∫—É –∏–∑ –º–æ–¥–µ–ª–∏ (–ø–µ—Ä–≤–æ–µ —Å–ª–æ–≤–æ)
        model_parts = full_model.split()
        make = model_parts[0] if model_parts else "Unknown"
        model = full_model

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–¥
        year_int = int(year)
        if year_int < 1900 or year_int > 2030:
            raise ValueError("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–æ–¥")

        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
        vehicle_type = detect_vehicle_type(make, model)
        seats = get_seats_by_type(vehicle_type)

        print(f"üîç [VEHICLE] Auto-detected type: {vehicle_type}, seats: {seats}")

        with Session() as session:
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å –µ—Å–ª–∏ –µ—Å—Ç—å
            session.query(DriverVehicle).filter_by(driver_id=message.from_user.id).delete()

            vehicle = DriverVehicle(
                driver_id=message.from_user.id,
                driver_name=message.from_user.full_name,
                make=make,
                model=model,
                color=color,
                year=year_int,
                license_plate=plate,
                vehicle_type=vehicle_type,
                seats=seats
            )
            session.add(vehicle)
            session.commit()

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        lang = get_user_language(message.from_user.id)
        type_display = get_vehicle_type_display(vehicle_type, lang)

        success_message = (
            f"‚úÖ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
            f"üè≠ <b>–ú–∞—Ä–∫–∞:</b> {make}\n"
            f"üöó <b>–ú–æ–¥–µ–ª—å:</b> {model}\n"
            f"üé® <b>–¶–≤–µ—Ç:</b> {color}\n"
            f"üìÖ <b>–ì–æ–¥:</b> {year}\n"
            f"üî¢ <b>–ù–æ–º–µ—Ä:</b> {plate}\n"
            f"üöô <b>–¢–∏–ø –∫—É–∑–æ–≤–∞:</b> {type_display}\n"
            f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:</b> {seats}\n\n"
            f"üì∑ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –∏–ª–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."
        )

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Lancer Sportback
        if 'lancer' in model.lower() and 'sportback' in model.lower():
            success_message += (
                f"\n\nüéØ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ:</b>\n"
                f"Lancer Sportback –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ Hatchback!"
            )

        await message.answer(success_message, parse_mode="HTML")
        await state.set_state(VehicleStates.waiting_photo)

    except ValueError as e:
        error_message = (
            f"‚ùå <b>–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö!</b>\n\n"
            f"üìù <b>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:</b>\n"
            f"<code>–ú–æ–¥–µ–ª—å, –¶–≤–µ—Ç, –ì–æ–¥, –ù–æ–º–µ—Ä</code>\n\n"
            f"‚úÖ <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            f"‚Ä¢ <code>Toyota Corolla, black, 2020, ABC1234</code>\n"
            f"‚Ä¢ <code>BMW X5 M Sport, white, 2019, ZS123AB</code>\n"
            f"‚Ä¢ <code>Mercedes-Benz C-Class AMG, silver, 2021, ZS999ZZ</code>\n"
            f"‚Ä¢ <code>Mitsubishi Lancer Sportback, red, 2016, ZS456CD</code>\n\n"
            f"‚ö†Ô∏è <b>–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:</b>\n"
            f"‚Ä¢ –ú–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–æ—è—Ç –∑–∞–ø—è—Ç—ã–µ\n"
            f"‚Ä¢ –ì–æ–¥ —É–∫–∞–∑–∞–Ω —á–∏—Å–ª–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2016)\n"
            f"‚Ä¢ –í—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã\n\n"
            f"üîß <b>–û—à–∏–±–∫–∞:</b> {str(e)}"
        )
        await message.answer(error_message, parse_mode="HTML")

    except Exception as e:
        await message.answer(
            f"‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:</b> {str(e)}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            parse_mode="HTML"
        )


@router.message(VehicleStates.waiting_photo, F.photo)
async def process_vehicle_photo(message: Message, state: FSMContext):
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
    photo_data = await Bots.driver.download(photo.file_id)

    with Session() as session:
        vehicle = session.query(DriverVehicle).filter_by(driver_id=message.from_user.id).first()
        if vehicle:
            vehicle.photo = photo_data.read()
            session.commit()
            await message.answer("‚úÖ –§–æ—Ç–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
        else:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ!")

    await state.clear()


@router.message(VehicleStates.waiting_photo, F.text)
async def skip_photo(message: Message, state: FSMContext):
    await message.answer("‚ÑπÔ∏è –§–æ—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")
    await state.clear()


# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø
@router.message(Command("test_detection"))
async def test_vehicle_detection(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""

    # –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
    test_cases = [
        ("Mitsubishi", "Lancer Sportback"),
        ("BMW", "X5 M Sport"),
        ("Audi", "A4 Avant"),
        ("Mercedes-Benz", "Sprinter"),
        ("Volkswagen", "Golf"),
        ("Toyota", "Prius Hybrid"),
        ("Porsche", "911 Coupe"),
        ("BMW", "Z4 Roadster"),
        ("Opel", "Zafira"),
        ("Ford", "Transit Van")
    ]

    results = []
    for make, model in test_cases:
        vehicle_type = detect_vehicle_type(make, model)
        seats = get_seats_by_type(vehicle_type)
        lang = get_user_language(message.from_user.id)
        type_display = get_vehicle_type_display(vehicle_type, lang)

        results.append(f"‚Ä¢ {make} {model} ‚Üí {type_display} ({seats} –º–µ—Å—Ç)")

    test_message = (
            f"üß™ <b>–¢–ï–°–¢ –ê–í–¢–û–û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–û–í</b>\n\n" +
            "\n".join(results) +
            f"\n\nüéØ <b>Lancer Sportback –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ Hatchback!</b>"
    )

    await message.answer(test_message, parse_mode="HTML")


@router.message(Command("vehicle_stats"))
async def show_vehicle_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""

    if str(message.from_user.id) not in ["628521909"]:  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        return

    try:
        with Session() as session:
            vehicles = session.query(DriverVehicle).all()

            if not vehicles:
                await message.answer("üìä –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–∏–ø–∞–º
            type_stats = {}
            total_vehicles = len(vehicles)
            lancer_sportback_count = 0

            for vehicle in vehicles:
                vehicle_type = getattr(vehicle, 'vehicle_type', 'UNKNOWN')
                type_stats[vehicle_type] = type_stats.get(vehicle_type, 0) + 1

                # –°—á–∏—Ç–∞–µ–º Lancer Sportback
                if (vehicle.model and 'lancer' in vehicle.model.lower() and
                        'sportback' in vehicle.model.lower()):
                    lancer_sportback_count += 1

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            stats_text = f"üìä <b>–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô</b>\n\n"
            stats_text += f"üìà <b>–í—Å–µ–≥–æ:</b> {total_vehicles} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π\n\n"

            stats_text += f"üöó <b>–ü–æ —Ç–∏–ø–∞–º –∫—É–∑–æ–≤–∞:</b>\n"
            for vehicle_type, count in sorted(type_stats.items()):
                percentage = (count / total_vehicles) * 100
                lang = get_user_language(message.from_user.id)
                type_display = get_vehicle_type_display(VehicleType(vehicle_type), lang) if vehicle_type in [t.value for
                                                                                                             t in
                                                                                                             VehicleType] else vehicle_type
                stats_text += f"‚Ä¢ {type_display}: {count} ({percentage:.1f}%)\n"

            if lancer_sportback_count > 0:
                stats_text += f"\nüéØ <b>Lancer Sportback:</b> {lancer_sportback_count} —à—Ç.\n"

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ç–∏–ø–∞
                with Session() as check_session:
                    correct_lancers = check_session.query(DriverVehicle).filter(
                        DriverVehicle.model.ilike('%lancer%'),
                        DriverVehicle.model.ilike('%sportback%'),
                        DriverVehicle.vehicle_type == VehicleType.HATCHBACK
                    ).count()

                if correct_lancers == lancer_sportback_count:
                    stats_text += f"‚úÖ –í—Å–µ Lancer Sportback –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ Hatchback"
                else:
                    stats_text += f"‚ùå {lancer_sportback_count - correct_lancers} Lancer Sportback —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ç–∏–ø–æ–º"

            await message.answer(stats_text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")


@router.message(Command("fix_lancer"))
async def fix_lancer_sportback(message: Message):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ Lancer Sportback"""

    if str(message.from_user.id) not in ["628521909"]:  # –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        return

    try:
        with Session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ Lancer Sportback
            lancers = session.query(DriverVehicle).filter(
                DriverVehicle.model.ilike('%lancer%'),
                DriverVehicle.model.ilike('%sportback%')
            ).all()

            if not lancers:
                await message.answer("üéØ Lancer Sportback –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ")
                return

            fixed_count = 0
            result_text = f"üîß <b>–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï LANCER SPORTBACK</b>\n\n"

            for lancer in lancers:
                old_type = lancer.vehicle_type
                if old_type != VehicleType.HATCHBACK:
                    lancer.vehicle_type = VehicleType.HATCHBACK
                    lancer.seats = get_seats_by_type(VehicleType.HATCHBACK)
                    fixed_count += 1

                    result_text += f"‚úÖ {lancer.model} ({lancer.license_plate})\n"
                    result_text += f"   {old_type} ‚Üí HATCHBACK\n\n"
                else:
                    result_text += f"‚ÑπÔ∏è {lancer.model} ({lancer.license_plate})\n"
                    result_text += f"   –£–∂–µ HATCHBACK ‚úì\n\n"

            if fixed_count > 0:
                session.commit()
                result_text += f"üéâ <b>–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:</b> {fixed_count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"
            else:
                result_text += f"‚úÖ <b>–í—Å–µ Lancer Sportback —É–∂–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø</b>"

            await message.answer(result_text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")


@router.message(Command("vehicle_info"))
async def show_my_vehicle_info(message: Message):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–µ–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ"""

    try:
        with Session() as session:
            vehicle = session.query(DriverVehicle).filter_by(driver_id=message.from_user.id).first()

            if not vehicle:
                await message.answer(
                    "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –±–æ—Ç–µ –≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–≤—Ç–æ",
                    reply_markup=get_vehicle_keyboard(get_user_language(message.from_user.id))
                )
                return

            lang = get_user_language(message.from_user.id)
            type_display = get_vehicle_type_display(vehicle.vehicle_type,
                                                    lang) if vehicle.vehicle_type else "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø
            auto_detected_type = detect_vehicle_type(vehicle.make or "", vehicle.model or "")
            auto_seats = get_seats_by_type(auto_detected_type)

            type_status = "‚úÖ" if vehicle.vehicle_type == auto_detected_type else "‚ö†Ô∏è"
            seats_status = "‚úÖ" if vehicle.seats == auto_seats else "‚ö†Ô∏è"

            info_text = (
                f"üöó <b>–ü–û–î–†–û–ë–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ê–í–¢–û–ú–û–ë–ò–õ–ï</b>\n\n"
                f"üë§ <b>–í–ª–∞–¥–µ–ª–µ—Ü:</b> {vehicle.driver_name}\n"
                f"üè≠ <b>–ú–∞—Ä–∫–∞:</b> {vehicle.make or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}\n"
                f"üöô <b>–ú–æ–¥–µ–ª—å:</b> {vehicle.model}\n"
                f"üé® <b>–¶–≤–µ—Ç:</b> {vehicle.color}\n"
                f"üìÖ <b>–ì–æ–¥:</b> {vehicle.year}\n"
                f"üî¢ <b>–ù–æ–º–µ—Ä:</b> {vehicle.license_plate}\n\n"
                f"üöò <b>–¢–∏–ø –∫—É–∑–æ–≤–∞:</b> {type_status} {type_display}\n"
                f"üë• <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:</b> {seats_status} {vehicle.seats}\n\n"
            )

            if vehicle.vehicle_type != auto_detected_type:
                auto_type_display = get_vehicle_type_display(auto_detected_type, lang)
                info_text += (
                    f"ü§ñ <b>–ê–≤—Ç–æ-–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç:</b>\n"
                    f"   –¢–∏–ø: {auto_type_display}\n"
                    f"   –ú–µ—Å—Ç: {auto_seats}\n\n"
                )

            # –°—Ç–∞—Ç—É—Å —Ñ–æ—Ç–æ
            if vehicle.photo:
                info_text += f"üì∑ <b>–§–æ—Ç–æ:</b> ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ({len(vehicle.photo)} –±–∞–π—Ç)\n"
            else:
                info_text += f"üì∑ <b>–§–æ—Ç–æ:</b> ‚ùå –ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ\n"

            # –°—Ç–∞—Ç—É—Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            status_icon = "üü¢" if vehicle.is_active else "üî¥"
            verified_icon = "‚úÖ" if vehicle.is_verified else "‚è≥"

            info_text += (
                f"\nüìä <b>–°–¢–ê–¢–£–°:</b>\n"
                f"{status_icon} –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'–ê–∫—Ç–∏–≤–µ–Ω' if vehicle.is_active else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}\n"
                f"{verified_icon} –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è: {'–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω' if vehicle.is_verified else '–û–∂–∏–¥–∞–µ—Ç'}\n"
            )

            # –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è
            if hasattr(vehicle, 'last_lat') and vehicle.last_lat:
                info_text += (
                    f"\nüìç <b>–ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ó–ò–¶–ò–Ø:</b>\n"
                    f"   –®–∏—Ä–æ—Ç–∞: {vehicle.last_lat:.6f}\n"
                    f"   –î–æ–ª–≥–æ—Ç–∞: {vehicle.last_lon:.6f}\n"
                )

            # –î–∞—Ç—ã
            info_text += (
                f"\nüìÖ <b>–î–ê–¢–´:</b>\n"
                f"   –°–æ–∑–¥–∞–Ω: {vehicle.created_at.strftime('%d.%m.%Y %H:%M')}\n"
            )

            if vehicle.updated_at:
                info_text += f"   –û–±–Ω–æ–≤–ª–µ–Ω: {vehicle.updated_at.strftime('%d.%m.%Y %H:%M')}\n"

            await message.answer(info_text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
@router.message(Command("help_vehicle"))
async def vehicle_help(message: Message):
    """–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""

    help_text = (
        f"üöó <b>–ö–û–ú–ê–ù–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ê–í–¢–û–ú–û–ë–ò–õ–Ø–ú–ò</b>\n\n"
        f"üë§ <b>–î–ª—è –≤–æ–¥–∏—Ç–µ–ª–µ–π:</b>\n"
        f"‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ - —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏ –≤ –±–æ—Ç–µ\n"
        f"‚Ä¢ <code>/vehicle_info</code> - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
        f"‚Ä¢ <code>/test_detection</code> - —Ç–µ—Å—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è\n\n"
        f"üîß <b>–î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:</b>\n"
        f"‚Ä¢ <code>/vehicle_stats</code> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º\n"
        f"‚Ä¢ <code>/fix_lancer</code> - –∏—Å–ø—Ä–∞–≤–∏—Ç—å Lancer Sportback\n\n"
        f"‚ÑπÔ∏è <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:</b>\n"
        f"‚Ä¢ Sedan, Hatchback, Wagon (Kombi)\n"
        f"‚Ä¢ SUV, Crossover, Coupe, Convertible\n"
        f"‚Ä¢ MPV, Van, Pickup, Electric, Luxury\n\n"
        f"üéØ <b>–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏:</b>\n"
        f"‚Ä¢ Lancer Sportback ‚Üí Hatchback\n"
        f"‚Ä¢ BMW Touring ‚Üí Wagon\n"
        f"‚Ä¢ Audi Avant ‚Üí Wagon"
    )

    await message.answer(help_text, parse_mode="HTML")