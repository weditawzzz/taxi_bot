# –ò–°–ü–†–ê–í–õ–ï–ù–û: order_handlers.py —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω–æ–π –∞–ª–∫–æ–≥–æ–ª—è 20 z≈Ç

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton
from core.models import Session, Ride as Order, Vehicle as DriverVehicle
from core.bot_instance import Bots
from config import Config
from core.handlers.driver.vehicle_handlers import get_vehicle_keyboard

router = Router()


async def get_user_language_simple(user_id: int) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from core.services.user_service import UserService
        user_service = UserService()
        user = await user_service.get_user_by_telegram_id(user_id)
        return user.language if user and user.language else "pl"
    except Exception:
        return "pl"


@router.callback_query(F.data.startswith("accept_"))
async def accept_order(callback: CallbackQuery):
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: Handle order acceptance by driver —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∞–ª–∫–æ–≥–æ–ª—è"""
    try:
        print(f"üé¨ [HANDLER] Accept order callback from driver {callback.from_user.id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–¥–∏—Ç–µ–ª–µ–º
        if str(callback.from_user.id) not in Config.DRIVER_IDS:
            await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", show_alert=True)
            return

        order_id = int(callback.data.split("_")[1])
        print(f"üì¶ [HANDLER] Processing accept for order {order_id}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        from core.services.driver_notification import driver_notification_service

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        if order_id not in driver_notification_service.pending_orders:
            print(
                f"‚ùå [HANDLER] Order {order_id} not in pending orders: {list(driver_notification_service.pending_orders.keys())}")
            await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
            await callback.message.edit_text("‚ÑπÔ∏è <b>–ó–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>", parse_mode="HTML")
            return

        print(f"‚úÖ [HANDLER] Order {order_id} found in pending orders")

        with Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            order = session.query(Order).get(order_id)
            if not order:
                print(f"‚ùå [HANDLER] Order {order_id} not found in database")
                await callback.answer("Zam√≥wienie nie zosta≈Ço znalezione!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if order.status != "pending":
                print(f"‚ùå [HANDLER] Order {order_id} status is {order.status}, not pending")
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º", show_alert=True)
                await callback.message.edit_text("‚ÑπÔ∏è <b>–ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç</b>", parse_mode="HTML")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
            vehicle = session.query(DriverVehicle).filter_by(driver_id=callback.from_user.id).first()
            if not vehicle:
                print(f"‚ö†Ô∏è [HANDLER] No vehicle data for driver {callback.from_user.id}")
                await callback.answer()
                lang = await get_user_language_simple(callback.from_user.id)
                await callback.message.answer(
                    "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                    reply_markup=get_vehicle_keyboard(lang)
                )
                return

            print(f"üöó [HANDLER] Vehicle found for driver: {vehicle.model}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            order.status = "accepted"
            order.driver_id = callback.from_user.id
            order.driver_name = callback.from_user.full_name

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            car_info = f"{vehicle.color} {vehicle.model} ({vehicle.license_plate})"

            session.commit()
            print(f"üíæ [HANDLER] Order {order_id} updated in database")

            # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
            print(f"üì¢ [HANDLER] Notifying service about acceptance...")
            await driver_notification_service.handle_driver_response(
                order_id, callback.from_user.id, "accept"
            )

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∞–ª–∫–æ–≥–æ–ª—è
            if order.order_type == "alcohol_delivery" or (order.notes and "ALCOHOL DELIVERY" in order.notes):
                arrival_time = "~30-45 minut"
                budget_info = f" (do {getattr(order, 'budget', 'N/A')} z≈Ç)" if hasattr(order,
                                                                                       'budget') and order.budget else ""

                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ 20 z≈Ç –¥–ª—è –∞–ª–∫–æ–≥–æ–ª—è
                alcohol_delivery_price = 20  # –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –¶–ï–ù–ê

                message_text = (
                    "‚úÖ <b>Kierowca zaakceptowa≈Ç zam√≥wienie zakupu!</b>\n\n"
                    f"üë§ <b>Kierowca:</b> {callback.from_user.full_name}\n"
                    f"üöó <b>Samoch√≥d:</b> {car_info}\n"
                    f"üïí <b>Szacowany czas:</b> {arrival_time}\n\n"
                    "üõí <b>Proces realizacji:</b>\n"
                    "1. Kierowca kupi produkty w sklepie\n"
                    "2. Dostarczy je pod wskazany adres\n"
                    "3. Przedstawi paragon do zap≈Çaty\n\n"
                    f"üíµ <b>Do zap≈Çaty:</b>\n"
                    f"- Op≈Çata za us≈Çugƒô: {alcohol_delivery_price} z≈Ç\n"  # –ò–°–ü–†–ê–í–õ–ï–ù–û: 20 z≈Ç
                    f"- Koszt zakup√≥w{budget_info}\n\n"
                    "‚ö†Ô∏è <b>Przygotuj:</b>\n"
                    "1. Dow√≥d osobisty\n"
                    "2. Got√≥wkƒô na pe≈ÇnƒÖ kwotƒô"
                )
            else:
                arrival_time = "~10 minut"
                message_text = (
                    "‚úÖ <b>Kierowca zaakceptowa≈Ç Twoje zam√≥wienie!</b>\n\n"
                    f"üë§ Kierowca: {callback.from_user.full_name}\n"
                    f"üöó Samoch√≥d: {car_info}\n"
                    f"üïí Czas dojazdu: {arrival_time}\n\n"
                    f"üíµ Do zap≈Çaty: {getattr(order, 'estimated_price', getattr(order, 'price', 0))} z≈Ç"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            try:
                client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
                if client_id:
                    await Bots.client.send_message(
                        chat_id=client_id,
                        text=message_text,
                        parse_mode="HTML",
                        disable_notification=False
                    )
                    print(f"üì± [HANDLER] Client {client_id} notified about acceptance")
            except Exception as e:
                print(f"‚ùå [HANDLER] Error notifying client: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—é
            location_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìç –¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]
                ],
                resize_keyboard=True
            )
            await Bots.driver.send_message(
                chat_id=callback.from_user.id,
                text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–∞—Å—Å–∞–∂–∏—Ä –≤–∏–¥–µ–ª –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                reply_markup=location_keyboard
            )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—é
            await callback.answer("‚úÖ Zam√≥wienie zaakceptowane!")

            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            if order.order_type == "alcohol_delivery" or (order.notes and "ALCOHOL DELIVERY" in order.notes):
                products = getattr(order, 'products', 'Zobacz szczeg√≥≈Çy w zam√≥wieniu')
                if order.notes and "Products:" in order.notes:
                    try:
                        products = order.notes.split("Products:")[1].split(",")[0].strip()
                    except:
                        pass

                confirmation_text = "‚úÖ <b>ZAM√ìWIENIE PRZYJƒòTE</b>\n\n"
                confirmation_text += (
                    f"üõí <b>Twoje zadania:</b>\n"
                    f"1. Wybierz najbli≈ºszy sklep\n"
                    f"2. Kup: {products}\n"
                    f"3. Zachowaj paragon!\n"
                    f"4. Dostarcz na: {order.destination_address}\n\n"
                    f"üí∞ <b>Bud≈ºet klienta:</b> {getattr(order, 'budget', 'N/A')} z≈Ç\n"
                    f"üíµ <b>Twoja op≈Çata:</b> 20 z≈Ç\n\n"  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞
                    f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_id}\n"
                    f"üöó <b>–í–∞—à–µ –∞–≤—Ç–æ:</b> {car_info}"
                )
            else:
                confirmation_text = (
                    f"‚úÖ <b>–ó–ê–ö–ê–ó –ü–†–ò–ù–Ø–¢</b>\n\n"
                    f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order.pickup_address}\n"
                    f"üìç <b>–ö—É–¥–∞:</b> {order.destination_address}\n"
                    f"üë• <b>–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤:</b> {getattr(order, 'passengers_count', 1)}\n"
                    f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {getattr(order, 'estimated_price', getattr(order, 'price', 0))} z≈Ç\n\n"
                    f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_id}\n"
                    f"üöó <b>–í–∞—à–µ –∞–≤—Ç–æ:</b> {car_info}"
                )

            await callback.message.edit_text(
                text=confirmation_text,
                parse_mode="HTML"
            )

            print(f"‚úÖ [HANDLER] Order {order_id} processed successfully")

    except Exception as e:
        print(f"üí• [HANDLER] Error in accept_order: {e}")
        import traceback
        traceback.print_exc()
        await callback.answer("WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania zam√≥wienia")


@router.callback_query(F.data.startswith("reject_"))
async def reject_order(callback: CallbackQuery):
    """Handle order rejection by driver - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        print(f"üé¨ [HANDLER] Reject order callback from driver {callback.from_user.id}")

        order_id = int(callback.data.split("_")[1])
        print(f"üì¶ [HANDLER] Processing reject for order {order_id}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        from core.services.driver_notification import driver_notification_service

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        if order_id not in driver_notification_service.pending_orders:
            print(
                f"‚ùå [HANDLER] Order {order_id} not in pending orders: {list(driver_notification_service.pending_orders.keys())}")
            await callback.answer("‚ÑπÔ∏è –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
            await callback.message.edit_text("‚ÑπÔ∏è <b>–ó–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>", parse_mode="HTML")
            return

        print(f"‚úÖ [HANDLER] Order {order_id} found in pending orders")

        # –í–ê–ñ–ù–û: –ù–ï –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –æ–¥–Ω–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º
        # –í–ê–ñ–ù–û: –ù–ï —É–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∑–¥–µ—Å—å - —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        print(f"üì¢ [HANDLER] Notifying service about rejection...")
        await driver_notification_service.handle_driver_response(
            order_id, callback.from_user.id, "reject"
        )

        await callback.answer("‚ùå Zam√≥wienie odrzucone")
        await callback.message.edit_text(
            text=f"‚ùå <b>–ó–ê–ö–ê–ó –û–¢–ö–õ–û–ù–ï–ù</b>\n\n–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ #{order_id}\n\n‚è≥ –î—Ä—É–≥–∏–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –≤—Å–µ –µ—â–µ –º–æ–≥—É—Ç –µ–≥–æ –ø—Ä–∏–Ω—è—Ç—å.",
            parse_mode="HTML"
        )

        print(f"‚úÖ [HANDLER] Rejection for order {order_id} processed successfully")

    except Exception as e:
        print(f"üí• [HANDLER] Error in reject_order: {e}")
        import traceback
        traceback.print_exc()
        await callback.answer("WystƒÖpi≈Ç b≈ÇƒÖ–¥ podczas przetwarzania zam√≥wienia")


@router.message(F.location)
async def handle_driver_location(message: Message):
    """Handle driver's location updates"""
    with Session() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è
        driver = session.query(DriverVehicle).filter_by(driver_id=message.from_user.id).first()
        if driver:
            if hasattr(driver, 'last_lat'):
                driver.last_lat = message.location.latitude
                driver.last_lon = message.location.longitude
                session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–∞—Å—Å–∞–∂–∏—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        order = session.query(Order).filter_by(
            driver_id=message.from_user.id,
            status="accepted"
        ).order_by(Order.created_at.desc()).first()

        if order:
            try:
                client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
                if client_id:
                    await Bots.client.send_location(
                        chat_id=client_id,
                        latitude=message.location.latitude,
                        longitude=message.location.longitude,
                        disable_notification=False
                    )
                    await message.answer("‚úÖ –ü–∞—Å—Å–∞–∂–∏—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            except Exception as e:
                print(f"‚ùå Error sending location to client: {e}")


# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –¶–ï–ù –ê–õ–ö–û–ì–û–õ–Ø
@router.message(F.text.startswith("/check_alcohol_price"))
async def check_alcohol_price(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å"""

    if str(message.from_user.id) not in Config.DRIVER_IDS:
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –∞–ª–∫–æ–≥–æ–ª—è –≤ –±–∞–∑–µ
        with Session() as session:
            alcohol_orders = session.query(Order).filter_by(order_type="alcohol_delivery").limit(5).all()

            if not alcohol_orders:
                await message.answer("üìä –ó–∞–∫–∞–∑–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            result_text = "üìä <b>–ü–†–û–í–ï–†–ö–ê –¶–ï–ù –ù–ê –ê–õ–ö–û–ì–û–õ–¨</b>\n\n"

            for order in alcohol_orders:
                price = getattr(order, 'estimated_price', getattr(order, 'price', 0))
                status = "‚úÖ" if float(price) == 20.0 else "‚ùå"

                result_text += (
                    f"{status} <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                    f"   –¶–µ–Ω–∞: {price} z≈Ç\n"
                    f"   –°—Ç–∞—Ç—É—Å: {order.status}\n"
                    f"   –ü—Ä–æ–¥—É–∫—Ç—ã: {getattr(order, 'products', 'N/A')[:50]}...\n\n"
                )

            result_text += (
                f"\nüí° <b>–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–ª–∫–æ–≥–æ–ª—è: 20 z≈Ç</b>\n"
                f"‚ùå –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ü–µ–Ω—ã - –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –æ—à–∏–±–∫–∞"
            )

            await message.answer(result_text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")


# –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –¢–ò–ü–û–í –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô
@router.message(F.text.startswith("/check_vehicle_types"))
async def check_vehicle_types(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π"""

    if str(message.from_user.id) not in Config.DRIVER_IDS:
        return

    try:
        with Session() as session:
            vehicles = session.query(DriverVehicle).all()

            if not vehicles:
                await message.answer("üöó –ê–≤—Ç–æ–º–æ–±–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            result_text = "üöó <b>–ü–†–û–í–ï–†–ö–ê –¢–ò–ü–û–í –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô</b>\n\n"

            lancer_sportback_count = 0

            for vehicle in vehicles:
                vehicle_type = getattr(vehicle, 'vehicle_type', 'N/A')

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º Lancer Sportback
                if (vehicle.model and 'lancer' in vehicle.model.lower() and
                        'sportback' in vehicle.model.lower()):
                    lancer_sportback_count += 1
                    status = "‚úÖ" if vehicle_type == "HATCHBACK" else "‚ùå"
                    result_text += f"{status} <b>Lancer Sportback</b> ‚Üí {vehicle_type}\n"

            result_text += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            result_text += f"–í—Å–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(vehicles)}\n"
            result_text += f"Lancer Sportback: {lancer_sportback_count}\n"

            if lancer_sportback_count > 0:
                result_text += f"\nüí° <b>Lancer Sportback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å HATCHBACK</b>"

            await message.answer(result_text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")