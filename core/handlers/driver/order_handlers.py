# –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–û: order_handlers.py - —Ç–æ—á–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã callback

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton
from core.models import Session, Ride as Order, Vehicle as DriverVehicle
from core.bot_instance import Bots
from config import Config
from core.handlers.driver.vehicle_handlers import get_vehicle_keyboard
import logging

logger = logging.getLogger(__name__)
router = Router()


async def get_user_language_simple(user_id: int) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from core.services.user_service import UserService
        user_service = UserService()
        user = await user_service.get_user_by_telegram_id(user_id)
        return user.language if user and user.language else "pl"
    except Exception:
        return "pl"


def is_numeric_order_id(callback_data: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ callback –¥–∞–Ω–Ω—ã–º–∏ —Å —á–∏—Å–ª–æ–≤—ã–º ID –∑–∞–∫–∞–∑–∞"""
    try:
        parts = callback_data.split("_")
        if len(parts) >= 2:
            int(parts[1])  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–æ
            return True
        return False
    except (ValueError, IndexError):
        return False


@router.callback_query(F.data.startswith("accept_") & F.func(lambda call: is_numeric_order_id(call.data)))
async def accept_order(callback: CallbackQuery):
    """Handle order acceptance by driver - –¢–û–õ–¨–ö–û –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID –∑–∞–∫–∞–∑–æ–≤"""
    try:
        print(f"üé¨ [HANDLER] Accept order callback from driver {callback.from_user.id}")
        print(f"üìù [HANDLER] Callback data: {callback.data}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–¥–∏—Ç–µ–ª–µ–º
        if str(callback.from_user.id) not in Config.DRIVER_IDS:
            await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", show_alert=True)
            return

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º order_id
        try:
            order_id = int(callback.data.split("_")[1])
        except (ValueError, IndexError) as e:
            print(f"‚ùå [HANDLER] Invalid callback format: {callback.data}, error: {e}")
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        print(f"üì¶ [HANDLER] Processing accept for order {order_id}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            from core.services.driver_notification import driver_notification_service

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            if order_id not in driver_notification_service.pending_orders:
                print(f"‚ùå [HANDLER] Order {order_id} not in pending orders")
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω", show_alert=True)
                await callback.message.edit_text("‚ÑπÔ∏è <b>–ó–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>", parse_mode="HTML")
                return
        except ImportError:
            print("‚ö†Ô∏è [HANDLER] Driver notification service not available, using basic acceptance")

        with Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            order = session.query(Order).get(order_id)
            if not order:
                print(f"‚ùå [HANDLER] Order {order_id} not found in database")
                await callback.answer("Zam√≥wienie nie zosta≈Ço znalezione!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if order.status != "pending":
                print(f"‚ùå [HANDLER] Order {order_id} status is {order.status}, not pending")
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç –¥—Ä—É–≥–∏–º –≤–æ–¥–∏—Ç–µ–ª–µ–º", show_alert=True)
                await callback.message.edit_text("‚ÑπÔ∏è <b>–ó–∞–∫–∞–∑ —É–∂–µ –ø—Ä–∏–Ω—è—Ç</b>", parse_mode="HTML")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤–æ–¥–∏—Ç–µ–ª—è
            vehicle = session.query(DriverVehicle).filter_by(driver_id=callback.from_user.id).first()
            if not vehicle:
                print(f"‚ö†Ô∏è [HANDLER] No vehicle data for driver {callback.from_user.id}")
                await callback.answer()
                lang = await get_user_language_simple(callback.from_user.id)
                await callback.message.answer(
                    "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                    reply_markup=get_vehicle_keyboard(lang)
                )
                return

            print(f"üöó [HANDLER] Vehicle found for driver: {vehicle.model}")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            order.status = "accepted"
            order.driver_id = callback.from_user.id
            order.driver_name = callback.from_user.full_name

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            car_info = f"{vehicle.color} {vehicle.model} ({vehicle.license_plate})"

            session.commit()
            print(f"üíæ [HANDLER] Order {order_id} updated in database")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å –ü–û–°–õ–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            try:
                from core.services.driver_notification import driver_notification_service
                print(f"üì¢ [HANDLER] Notifying service about acceptance...")
                await driver_notification_service.handle_driver_response(
                    order_id, callback.from_user.id, "accept"
                )
            except ImportError:
                print("‚ö†Ô∏è [HANDLER] Driver notification service not available")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–æ–π
            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if client_id:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                try:
                    from core.keyboards import get_client_ride_keyboard
                    lang = await get_user_language_simple(client_id)
                    client_keyboard = get_client_ride_keyboard(lang, "accepted")
                except ImportError:
                    client_keyboard = None

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∞–ª–∫–æ–≥–æ–ª—è
                if order.order_type == "alcohol_delivery" or (order.notes and "ALCOHOL DELIVERY" in order.notes):
                    arrival_time = "~30-45 minut"
                    budget_info = f" (do {getattr(order, 'budget', 'N/A')} z≈Ç)" if hasattr(order,
                                                                                           'budget') and order.budget else ""

                    # –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –¶–ï–ù–ê 20 z≈Ç –¥–ª—è –∞–ª–∫–æ–≥–æ–ª—è
                    alcohol_delivery_price = 20

                    message_text = (
                        "‚úÖ <b>Kierowca zaakceptowa≈Ç zam√≥wienie zakupu!</b>\n\n"
                        f"üë§ <b>Kierowca:</b> {callback.from_user.full_name}\n"
                        f"üöó <b>Samoch√≥d:</b> {car_info}\n"
                        f"üïí <b>Szacowany czas:</b> {arrival_time}\n\n"
                        "üõí <b>Proces realizacji:</b>\n"
                        "1. Kierowca kupi produkty w sklepie\n"
                        "2. Dostarczy je pod wskazany adres\n"
                        "3. Przedstawi paragon do zap≈Çaty\n\n"
                        f"üíµ <b>Do zap≈Çaty:</b>\n"
                        f"- Op≈Çata za us≈Çugƒô: {alcohol_delivery_price} z≈Ç\n"
                        f"- Koszt zakup√≥w{budget_info}\n\n"
                        "‚ö†Ô∏è <b>Przygotuj:</b>\n"
                        "1. Dow√≥d osobisty\n"
                        "2. Got√≥wkƒô na pe≈ÇnƒÖ kwotƒô"
                    )
                else:
                    arrival_time = "~10 minut"
                    message_text = (
                        "‚úÖ <b>Kierowca zaakceptowa≈Ç Twoje zam√≥wienie!</b>\n\n"
                        f"üë§ <b>Kierowca:</b> {callback.from_user.full_name}\n"
                        f"üöó <b>Samoch√≥d:</b> {car_info}\n"
                        f"üïí <b>Czas dojazdu:</b> {arrival_time}\n\n"
                        f"üíµ <b>Do zap≈Çaty:</b> {getattr(order, 'estimated_price', getattr(order, 'price', 0))} z≈Ç\n\n"
                        "üéØ –í–æ–¥–∏—Ç–µ–ª—å –µ–¥–µ—Ç –∫ –≤–∞–º. –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ–≥–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."
                    )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
                try:
                    await Bots.client.send_message(
                        chat_id=client_id,
                        text=message_text,
                        reply_markup=client_keyboard,
                        parse_mode="HTML",
                        disable_notification=False
                    )
                    print(f"üì± [HANDLER] Client {client_id} notified about acceptance")
                except Exception as e:
                    print(f"‚ùå [HANDLER] Error notifying client: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—é —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–æ–π
            try:
                lang = await get_user_language_simple(callback.from_user.id)

                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                from core.keyboards import get_driver_ride_keyboard
                ride_keyboard = get_driver_ride_keyboard(lang, "accepted")

                await Bots.driver.send_message(
                    chat_id=callback.from_user.id,
                    text=(
                        f"üéØ <b>–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–û–ú #{order_id}</b>\n\n"
                        f"üìç –ï–¥—å—Ç–µ –∫ –ø–∞—Å—Å–∞–∂–∏—Ä—É: {order.pickup_address}\n"
                        f"‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è: ~10 –º–∏–Ω—É—Ç\n\n"
                        f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–º:"
                    ),
                    reply_markup=ride_keyboard,
                    parse_mode="HTML"
                )

                print(f"‚úÖ [HANDLER] Sent ride management interface to driver {callback.from_user.id}")

            except Exception as e:
                logger.error(f"Error sending ride management interface: {e}")

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—é
            await callback.answer("‚úÖ Zam√≥wienie zaakceptowane!")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π
            if order.order_type == "alcohol_delivery" or (order.notes and "ALCOHOL DELIVERY" in order.notes):
                products = getattr(order, 'products', 'Zobacz szczeg√≥≈Çy w zam√≥wieniu')
                if order.notes and "Products:" in order.notes:
                    try:
                        products = order.notes.split("Products:")[1].split(",")[0].strip()
                    except:
                        pass

                confirmation_text = "‚úÖ <b>ZAM√ìWIENIE PRZYJƒòTE</b>\n\n"
                confirmation_text += (
                    f"üõí <b>Twoje zadania:</b>\n"
                    f"1. Wybierz najbli≈ºszy sklep\n"
                    f"2. Kup: {products}\n"
                    f"3. Zachowaj paragon!\n"
                    f"4. Dostarcz na: {order.destination_address}\n\n"
                    f"üí∞ <b>Bud≈ºet klienta:</b> {getattr(order, 'budget', 'N/A')} z≈Ç\n"
                    f"üíµ <b>Twoja op≈Çata:</b> 20 z≈Ç\n\n"  # –§–ò–ö–°–ò–†–û–í–ê–ù–ù–ê–Ø –¶–ï–ù–ê
                    f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_id}\n"
                    f"üöó <b>–í–∞—à–µ –∞–≤—Ç–æ:</b> {car_info}"
                )
            else:
                confirmation_text = (
                    f"‚úÖ <b>–ó–ê–ö–ê–ó –ü–†–ò–ù–Ø–¢</b>\n\n"
                    f"üìç <b>–û—Ç–∫—É–¥–∞:</b> {order.pickup_address}\n"
                    f"üìç <b>–ö—É–¥–∞:</b> {order.destination_address}\n"
                    f"üë• <b>–ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤:</b> {getattr(order, 'passengers_count', 1)}\n"
                    f"üíµ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {getattr(order, 'estimated_price', getattr(order, 'price', 0))} z≈Ç\n\n"
                    f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {client_id}\n"
                    f"üöó <b>–í–∞—à–µ –∞–≤—Ç–æ:</b> {car_info}"
                )

            await callback.message.edit_text(
                text=confirmation_text,
                parse_mode="HTML"
            )

            print(f"‚úÖ [HANDLER] Order {order_id} processed successfully")

    except Exception as e:
        print(f"üí• [HANDLER] Error in accept_order: {e}")
        import traceback
        traceback.print_exc()
        await callback.answer("WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania zam√≥wienia")


@router.callback_query(F.data.startswith("reject_") & F.func(lambda call: is_numeric_order_id(call.data)))
async def reject_order(callback: CallbackQuery):
    """Handle order rejection by driver - –¢–û–õ–¨–ö–û –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö ID –∑–∞–∫–∞–∑–æ–≤"""
    try:
        print(f"üé¨ [HANDLER] Reject order callback from driver {callback.from_user.id}")
        print(f"üìù [HANDLER] Callback data: {callback.data}")

        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º order_id
        try:
            order_id = int(callback.data.split("_")[1])
        except (ValueError, IndexError) as e:
            print(f"‚ùå [HANDLER] Invalid callback format: {callback.data}, error: {e}")
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            return

        print(f"üì¶ [HANDLER] Processing reject for order {order_id}")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        try:
            from core.services.driver_notification import driver_notification_service

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            if order_id not in driver_notification_service.pending_orders:
                print(f"‚ùå [HANDLER] Order {order_id} not in pending orders")
                await callback.answer("‚ÑπÔ∏è –ó–∞–∫–∞–∑ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω", show_alert=True)
                await callback.message.edit_text("‚ÑπÔ∏è <b>–ó–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω</b>", parse_mode="HTML")
                return

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
            print(f"üì¢ [HANDLER] Notifying service about rejection...")
            await driver_notification_service.handle_driver_response(
                order_id, callback.from_user.id, "reject"
            )
        except ImportError:
            print("‚ö†Ô∏è [HANDLER] Driver notification service not available, using basic rejection")
            # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –±–µ–∑ —Å–µ—Ä–≤–∏—Å–∞

        await callback.answer("‚ùå Zam√≥wienie odrzucone")
        await callback.message.edit_text(
            text=f"‚ùå <b>–ó–ê–ö–ê–ó –û–¢–ö–õ–û–ù–ï–ù</b>\n\n–í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ #{order_id}\n\n‚è≥ –î—Ä—É–≥–∏–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –≤—Å–µ –µ—â–µ –º–æ–≥—É—Ç –µ–≥–æ –ø—Ä–∏–Ω—è—Ç—å.",
            parse_mode="HTML"
        )

        print(f"‚úÖ [HANDLER] Rejection for order {order_id} processed successfully")

    except Exception as e:
        print(f"üí• [HANDLER] Error in reject_order: {e}")
        import traceback
        traceback.print_exc()
        await callback.answer("WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania zam√≥wienia")


@router.message(F.location)
async def handle_driver_location_enhanced(message: Message):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—è —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—Ç–∞—Ç—É—Å–∞–º–∏"""
    try:
        with Session() as session:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ
            driver = session.query(DriverVehicle).filter_by(driver_id=message.from_user.id).first()
            if driver and hasattr(driver, 'last_lat'):
                driver.last_lat = message.location.latitude
                driver.last_lon = message.location.longitude
                session.commit()

            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º)
            order = session.query(Order).filter_by(
                driver_id=message.from_user.id
            ).filter(Order.status.in_(["accepted", "driver_arrived", "in_progress"])).order_by(
                Order.created_at.desc()).first()

            if not order:
                await message.answer("‚ÑπÔ∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–∞—Å—Å–∞–∂–∏—Ä—É
            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if client_id:
                try:
                    await Bots.client.send_location(
                        chat_id=client_id,
                        latitude=message.location.latitude,
                        longitude=message.location.longitude,
                        disable_notification=True
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏ –ø–æ–µ–∑–¥–∫–∏
                    if order.status == "accepted":
                        status_text = "üöó Kierowca jedzie do Ciebie"
                    elif order.status == "driver_arrived":
                        status_text = "‚úÖ Kierowca czeka na miejscu"
                    elif order.status == "in_progress":
                        status_text = "üö¶ Podr√≥≈º w toku"
                    else:
                        status_text = "üìç Aktualizacja lokalizacji"

                    await Bots.client.send_message(
                        chat_id=client_id,
                        text=f"üìç {status_text}",
                        disable_notification=True
                    )

                    print(f"üìç [LOCATION] Sent location update to client {client_id} for order {order.id}")

                except Exception as e:
                    print(f"‚ùå [LOCATION] Error sending location to client: {e}")

            await message.answer("‚úÖ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ", disable_notification=True)

    except Exception as e:
        print(f"üí• [LOCATION] Error in location handler: {e}")
        await message.answer("‚ùå B≈ÇƒÖd podczas aktualizacji lokalizacji")


# ===================================================================
# –ö–û–ú–ê–ù–î–´ –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò –û–¢–õ–ê–î–ö–ò
# ===================================================================

@router.message(F.text.startswith("/test_callback_routing"))
async def test_callback_routing(message: Message):
    """–¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ callback"""
    if str(message.from_user.id) not in Config.DRIVER_IDS:
        return

    try:
        from aiogram.utils.keyboard import InlineKeyboardBuilder

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ TEST: accept_123", callback_data="accept_123")
        builder.button(text="‚ùå TEST: reject_456", callback_data="reject_456")
        builder.button(text="‚è∏Ô∏è TEST: accept_waiting", callback_data="accept_waiting")
        builder.button(text="üöó TEST: driver_arrived", callback_data="driver_arrived")
        builder.adjust(2)

        await message.answer(
            "üß™ <b>TEST –ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–ò CALLBACK</b>\n\n"
            "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞:\n"
            "‚Ä¢ accept_123, reject_456 ‚Üí order_handlers\n"
            "‚Ä¢ accept_waiting, driver_arrived ‚Üí ride_handlers\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫: {e}")


@router.message(F.text.startswith("/check_alcohol_price"))
async def check_alcohol_price(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ü–µ–Ω –Ω–∞ –∞–ª–∫–æ–≥–æ–ª—å"""
    if str(message.from_user.id) not in Config.DRIVER_IDS:
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–∫–∞–∑—ã –∞–ª–∫–æ–≥–æ–ª—è –≤ –±–∞–∑–µ
        with Session() as session:
            alcohol_orders = session.query(Order).filter_by(order_type="alcohol_delivery").limit(5).all()

            if not alcohol_orders:
                await message.answer("üìä –ó–∞–∫–∞–∑–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            result_text = "üìä <b>–ü–†–û–í–ï–†–ö–ê –¶–ï–ù –ù–ê –ê–õ–ö–û–ì–û–õ–¨</b>\n\n"

            for order in alcohol_orders:
                price = getattr(order, 'estimated_price', getattr(order, 'price', 0))
                status = "‚úÖ" if float(price) == 20.0 else "‚ùå"

                result_text += (
                    f"{status} <b>–ó–∞–∫–∞–∑ #{order.id}</b>\n"
                    f"   –¶–µ–Ω–∞: {price} z≈Ç\n"
                    f"   –°—Ç–∞—Ç—É—Å: {order.status}\n"
                    f"   –ü—Ä–æ–¥—É–∫—Ç—ã: {getattr(order, 'products', 'N/A')[:50]}...\n\n"
                )

            result_text += (
                f"\nüí° <b>–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –∞–ª–∫–æ–≥–æ–ª—è: 20 z≈Ç</b>\n"
                f"‚ùå –ï—Å–ª–∏ –≤–∏–¥–∏—Ç–µ –¥—Ä—É–≥–∏–µ —Ü–µ–Ω—ã - –∑–Ω–∞—á–∏—Ç –µ—Å—Ç—å –æ—à–∏–±–∫–∞"
            )

            await message.answer(result_text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")


# ===================================================================
# –û–¢–õ–ê–î–û–ß–ù–´–ï –õ–û–ì–ò –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê CALLBACK
# ===================================================================

@router.callback_query(F.data.in_(["debug_order_test"]))
async def debug_order_handlers(callback: CallbackQuery):
    """–û—Ç–ª–∞–¥–æ—á–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è order_handlers"""
    print(f"üîß [ORDER_DEBUG] Debug callback in order_handlers: {callback.data}")
    await callback.answer("üîß ORDER_DEBUG: –≠—Ç–æ—Ç callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ order_handlers")


# –ù–ï –î–û–ë–ê–í–õ–Ø–ï–ú –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –ü–ï–†–ï–•–í–ê–¢–ß–ò–ö - –ø—É—Å—Ç—å –¥—Ä—É–≥–∏–µ callback –ø—Ä–æ—Ö–æ–¥—è—Ç –¥–∞–ª—å—à–µ
print("üìã [ORDER_HANDLERS] Loaded with selective callback filtering")