from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton
from core.models import Session, Order, DriverVehicle
from core.bot_instance import Bots
from config import Config
from core.handlers.driver.vehicle_handlers import get_vehicle_keyboard
from core.services.user_service import get_user_language

router = Router()


@router.callback_query(F.data.startswith("accept_"))
async def accept_order(callback: CallbackQuery):
    """Handle order acceptance by driver"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–¥–∏—Ç–µ–ª–µ–º
        if str(callback.from_user.id) not in Config.DRIVER_IDS:
            await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", show_alert=True)
            return

        order_id = int(callback.data.split("_")[1])

        with Session() as session:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = session.query(Order).get(order_id)
            if not order:
                await callback.answer("Zam√≥wienie nie zosta≈Ço znalezione!")
                return

            # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—è
            vehicle = session.query(DriverVehicle).filter_by(driver_id=callback.from_user.id).first()
            if not vehicle:
                await callback.answer()
                lang = get_user_language(callback.from_user.id)
                await callback.message.answer(
                    "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                    reply_markup=get_vehicle_keyboard(lang)
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            order.status = "accepted"
            order.driver_id = callback.from_user.id
            order.driver_name = callback.from_user.full_name

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            car_info = f"{vehicle.color} {vehicle.model} ({vehicle.license_plate})"

            session.commit()

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
            if order.order_type == "alcohol_delivery":
                # –ù–æ–≤—ã–π —Ç–∏–ø: –ø–æ–∫—É–ø–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞
                arrival_time = "~30-45 minut"
                budget_info = f" (do {order.budget} z≈Ç)" if hasattr(order, 'budget') and order.budget else ""
                message_text = (
                    "‚úÖ <b>Kierowca zaakceptowa≈Ç zam√≥wienie zakupu!</b>\n\n"
                    f"üë§ <b>Kierowca:</b> {callback.from_user.full_name}\n"
                    f"üöó <b>Samoch√≥d:</b> {car_info}\n"
                    f"üïí <b>Szacowany czas:</b> {arrival_time}\n\n"
                    "üõí <b>Proces realizacji:</b>\n"
                    "1. Kierowca kupi produkty w sklepie\n"
                    "2. Dostarczy je pod wskazany adres\n"
                    "3. Przedstawi paragon do zap≈Çaty\n\n"
                    f"üíµ <b>Do zap≈Çaty:</b>\n"
                    f"- Op≈Çata za us≈Çugƒô: {order.price} z≈Ç\n"
                    f"- Koszt zakup√≥w{budget_info}\n\n"
                    "‚ö†Ô∏è <b>Przygotuj:</b>\n"
                    "1. Dow√≥d osobisty\n"
                    "2. Got√≥wkƒô na pe≈ÇnƒÖ kwotƒô"
                )
            elif order.order_type == "alcohol":
                # –°—Ç–∞—Ä—ã–π —Ç–∏–ø: –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–ª–∫–æ–≥–æ–ª—è (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å)
                arrival_time = "~15 minut"
                message_text = (
                    "‚úÖ <b>Kierowca zaakceptowa≈Ç Twoje zam√≥wienie!</b>\n\n"
                    f"üë§ Kierowca: {callback.from_user.full_name}\n"
                    f"üöó Samoch√≥d: {car_info}\n"
                    f"üïí Czas dojazdu: {arrival_time}\n\n"
                    "üçæ <b>Dostawa alkoholu:</b>\n"
                    "- 20 z≈Ç za dostawƒô (got√≥wka)\n"
                    "- + kwota z paragonu\n\n"
                    "‚ö†Ô∏è Przygotuj:\n"
                    "1. Dow√≥d osobisty\n"
                    "2. Got√≥wkƒô"
                )
            else:
                # –û–±—ã—á–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏
                arrival_time = "~10 minut"
                message_text = (
                    "‚úÖ <b>Kierowca zaakceptowa≈Ç Twoje zam√≥wienie!</b>\n\n"
                    f"üë§ Kierowca: {callback.from_user.full_name}\n"
                    f"üöó Samoch√≥d: {car_info}\n"
                    f"üïí Czas dojazdu: {arrival_time}\n\n"
                    f"üíµ Do zap≈Çaty: {order.price} z≈Ç ({order.payment_method})"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
            try:
                await Bots.client.send_message(
                    chat_id=order.user_id,
                    text=message_text,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"B≈ÇƒÖd wysy≈Çania wiadomo≈õci do klienta: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏ –≤–æ–¥–∏—Ç–µ–ª—é
            location_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìç –¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)]
                ],
                resize_keyboard=True
            )
            await Bots.driver.send_message(
                chat_id=callback.from_user.id,
                text="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–∞—Å—Å–∞–∂–∏—Ä –≤–∏–¥–µ–ª –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
                reply_markup=location_keyboard
            )

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤–æ–¥–∏—Ç–µ–ª—é
            await callback.answer("Zam√≥wienie zaakceptowane!")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
            if order.order_type == "alcohol_delivery":
                confirmation_text = "‚úÖ <b>ZAM√ìWIENIE PRZYJƒòTE</b>\n\n"
                confirmation_text += (
                    f"üõí <b>Twoje zadania:</b>\n"
                    f"1. Wybierz najbli≈ºszy sklep\n"
                    f"2. Kup: {order.products}\n"
                    f"3. Zachowaj paragon!\n"
                    f"4. Dostarcz na: {order.destination}\n\n"
                    f"üí∞ <b>Bud≈ºet klienta:</b> {getattr(order, 'budget', 'N/A')} z≈Ç\n"
                    f"üíµ <b>Twoja op≈Çata:</b> {order.price} z≈Ç"
                )
            else:
                confirmation_text = f"‚úÖ Przyjƒôte przez: {callback.from_user.full_name}"

            await callback.message.answer(
                text=confirmation_text,
                parse_mode="HTML"
            )

    except Exception as e:
        print(f"B≈ÇƒÖd podczas akceptowania zam√≥wienia: {e}")
        await callback.answer("WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania zam√≥wienia")


@router.message(F.location)
async def handle_driver_location(message: Message):
    """Handle driver's location updates"""
    with Session() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –≤–æ–¥–∏—Ç–µ–ª—è
        driver = session.query(DriverVehicle).filter_by(driver_id=message.from_user.id).first()
        if driver:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—è –¥–ª—è –ª–æ–∫–∞—Ü–∏–∏ –≤ –º–æ–¥–µ–ª–∏
            if hasattr(driver, 'last_lat'):
                driver.last_lat = message.location.latitude
                driver.last_lon = message.location.longitude
                session.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –ø–∞—Å—Å–∞–∂–∏—Ä—É, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑
        order = session.query(Order).filter_by(
            driver_id=message.from_user.id,
            status="accepted"
        ).order_by(Order.created_at.desc()).first()

        if order:
            try:
                await Bots.client.send_location(
                    chat_id=order.user_id,
                    latitude=message.location.latitude,
                    longitude=message.location.longitude
                )
                await message.answer("–ü–∞—Å—Å–∞–∂–∏—Ä –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–∏ –ø–∞—Å—Å–∞–∂–∏—Ä—É: {e}")


@router.callback_query(F.data.startswith("reject_"))
async def reject_order(callback: CallbackQuery):
    """Handle order rejection by driver"""
    try:
        order_id = int(callback.data.split("_")[1])

        with Session() as session:
            order = session.query(Order).get(order_id)
            if not order:
                await callback.answer("Zam√≥wienie nie zosta≈Ço znalezione!")
                return

            order.status = "rejected"
            session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
            rejection_message = (
                "‚ùå <b>Zam√≥wienie odrzucone</b>\n\n"
                "Niestety, kierowca nie mo≈ºe zrealizowaƒá Twojego zam√≥wienia.\n"
                "Szukamy innego dostƒôpnego kierowcy..."
            )

            try:
                await Bots.client.send_message(
                    chat_id=order.user_id,
                    text=rejection_message,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"B≈ÇƒÖd wysy≈Çania wiadomo≈õci do klienta: {e}")

        await callback.answer("Zam√≥wienie odrzucone")
        await callback.message.edit_text(
            text=f"{callback.message.text}\n\n"
                 f"‚ùå <b>ODRZUCONE</b> przez: {callback.from_user.full_name}",
            parse_mode="HTML"
        )

    except Exception as e:
        print(f"B≈ÇƒÖd podczas odrzucania zam√≥wienia: {e}")
        await callback.answer("WystƒÖpi≈Ç b≈ÇƒÖ–¥ podczas przetwarzania zam√≥wienia")