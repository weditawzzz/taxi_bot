from aiogram import Router, F
from aiogram.types import CallbackQuery
from core.models import Session, Order, DriverVehicle
from core.bot_instance import Bots
from config import Config
from core.handlers.driver.vehicle_handlers import get_vehicle_keyboard
from core.services.user_service import get_user_language

router = Router()


@router.callback_query(F.data.startswith("accept_"))
async def accept_order(callback: CallbackQuery):
    """Handle order acceptance by driver"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–¥–∏—Ç–µ–ª–µ–º
        if str(callback.from_user.id) not in Config.DRIVER_IDS:
            await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–æ–¥–∏—Ç–µ–ª—è–º", show_alert=True)
            return

        order_id = int(callback.data.split("_")[1])

        with Session() as session:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
            order = session.query(Order).get(order_id)
            if not order:
                await callback.answer("Zam√≥wienie nie zosta≈Ço znalezione!")
                return

            # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ –≤–æ–¥–∏—Ç–µ–ª—è
            vehicle = session.query(DriverVehicle).filter_by(driver_id=callback.from_user.id).first()
            if not vehicle:
                await callback.answer()
                lang = get_user_language(callback.from_user.id)
                await callback.message.answer(
                    "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ",
                    reply_markup=get_vehicle_keyboard(lang)
                )
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            order.status = "accepted"
            order.driver_id = callback.from_user.id
            order.driver_name = callback.from_user.full_name

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
            car_info = f"{vehicle.color} {vehicle.model} ({vehicle.license_plate})"
            arrival_time = "~15 minut" if order.order_type == "alcohol" else "~10 minut"

            session.commit()

            if order.order_type == "alcohol":
                message_text = (
                    "‚úÖ <b>Kierowca zaakceptowa≈Ç Twoje zam√≥wienie!</b>\n\n"
                    f"üë§ Kierowca: {callback.from_user.full_name}\n"
                    f"üöó Samoch√≥d: {car_info}\n"
                    f"üïí Czas dojazdu: {arrival_time}\n\n"
                    "üçæ <b>Dostawa alkoholu:</b>\n"
                    "- 20 z≈Ç za dostawƒô (got√≥wka)\n"
                    "- + kwota z paragonu\n\n"
                    "‚ö†Ô∏è Przygotuj:\n"
                    "1. Dow√≥d osobisty\n"
                    "2. Got√≥wkƒô"
                )
            else:
                message_text = (
                    "‚úÖ <b>Kierowca zaakceptowa≈Ç Twoje zam√≥wienie!</b>\n\n"
                    f"üë§ Kierowca: {callback.from_user.full_name}\n"
                    f"üöó Samoch√≥d: {car_info}\n"
                    f"üïí Czas dojazdu: {arrival_time}\n\n"
                    f"üíµ Do zap≈Çaty: {order.price} z≈Ç ({order.payment_method})"
                )

            try:
                await Bots.client.send_message(
                    chat_id=order.user_id,
                    text=message_text,
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"B≈ÇƒÖd wysy≈Çania wiadomo≈õci do klienta: {e}")

        await callback.answer("Zam√≥wienie zaakceptowane!")
        await callback.message.edit_text(
            text=f"{callback.message.text}\n\n"
                 f"‚úÖ Przyjƒôte przez: {callback.from_user.full_name}"
        )

    except Exception as e:
        print(f"B≈ÇƒÖd podczas akceptowania zam√≥wienia: {e}")
        await callback.answer("WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania zam√≥wienia")


@router.callback_query(F.data.startswith("reject_"))
async def reject_order(callback: CallbackQuery):
    """Handle order rejection by driver"""
    try:
        order_id = int(callback.data.split("_")[1])

        with Session() as session:
            order = session.query(Order).get(order_id)
            if not order:
                await callback.answer("Zam√≥wienie nie zosta≈Ço znalezione!")
                return

            order.status = "rejected"
            session.commit()

            try:
                await Bots.client.send_message(
                    chat_id=order.user_id,
                    text="‚ùå Niestety, kierowca odrzuci≈Ç Twoje zam√≥wienie. "
                         "Szukamy innego kierowcy...",
                    parse_mode="HTML"
                )
            except Exception as e:
                print(f"B≈ÇƒÖd wysy≈Çania wiadomo≈õci do klienta: {e}")

        await callback.answer("Zam√≥wienie odrzucone")
        await callback.message.edit_text(
            text=f"{callback.message.text}\n\n"
                 f"‚ùå Odrzucone przez: {callback.from_user.full_name}"
        )

    except Exception as e:
        print(f"B≈ÇƒÖd podczas odrzucania zam√≥wienia: {e}")
        await callback.answer("WystƒÖpi≈Ç b≈ÇƒÖd podczas przetwarzania zam√≥wienia")