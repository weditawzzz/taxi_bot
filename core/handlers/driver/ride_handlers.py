"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–æ–π –≤–æ–¥–∏—Ç–µ–ª–µ–º —Å —Å–∏—Å—Ç–µ–º–æ–π —Å—á–µ—Ç—á–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è
"""
import json
import logging
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Optional, Dict
from urllib.parse import quote

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from core.models import Session, Ride as Order
from core.bot_instance import Bots
from core.keyboards import get_driver_ride_keyboard, get_location_sharing_keyboard

logger = logging.getLogger(__name__)
driver_ride_router = Router()

# ===================================================================
# –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø –°–ò–°–¢–ï–ú–´ –û–ñ–ò–î–ê–ù–ò–Ø
# ===================================================================

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è
# {ride_id: {'start_time': datetime, 'driver_id': int}}
waiting_timers: Dict[int, Dict] = {}

# ===================================================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ===================================================================

async def get_user_language_simple(user_id: int) -> str:
    """–ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from core.services.user_service import UserService
        user_service = UserService()
        user = await user_service.get_user_by_telegram_id(user_id)
        return user.language if user and user.language else "pl"
    except Exception:
        return "pl"


async def get_current_ride_id(user_id: int) -> Optional[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–µ–∑–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        with Session() as session:
            order = session.query(Order).filter(
                Order.driver_id == user_id,
                Order.status.in_(["accepted", "driver_arrived", "in_progress"])
            ).order_by(Order.created_at.desc()).first()

            return order.id if order else None

    except Exception as e:
        logger.error(f"Error getting current ride ID: {e}")
        return None


def get_waiting_management_keyboard(language: str = "pl"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏–µ–º –¥–ª—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    builder = InlineKeyboardBuilder()

    if language == "en":
        builder.button(text="üìä Check Time", callback_data="check_waiting_time")
        builder.button(text="‚ñ∂Ô∏è Continue Trip", callback_data="end_waiting")
        builder.button(text="üèÅ Complete Trip", callback_data="complete_trip")
    elif language == "ru":
        builder.button(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è", callback_data="check_waiting_time")
        builder.button(text="‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="end_waiting")
        builder.button(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É", callback_data="complete_trip")
    else:  # Polish
        builder.button(text="üìä Sprawd≈∫ czas", callback_data="check_waiting_time")
        builder.button(text="‚ñ∂Ô∏è Kontynuuj podr√≥≈º", callback_data="end_waiting")
        builder.button(text="üèÅ Zako≈Ñcz podr√≥≈º", callback_data="complete_trip")

    builder.adjust(2, 1)
    return builder.as_markup()


def get_driver_waiting_response_keyboard(language: str = "pl"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –≤–æ–¥–∏—Ç–µ–ª—è –Ω–∞ –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    builder = InlineKeyboardBuilder()

    if language == "en":
        builder.button(text="‚è∏Ô∏è Stop & Start Timer", callback_data="accept_waiting")
        builder.button(text="‚ùå Cannot Stop", callback_data="decline_waiting")
    elif language == "ru":
        builder.button(text="‚è∏Ô∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä", callback_data="accept_waiting")
        builder.button(text="‚ùå –ù–µ –º–æ–≥—É –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è", callback_data="decline_waiting")
    else:  # Polish
        builder.button(text="‚è∏Ô∏è Zatrzymaj i uruchom licznik", callback_data="accept_waiting")
        builder.button(text="‚ùå Nie mogƒô siƒô zatrzymaƒá", callback_data="decline_waiting")

    builder.adjust(1)
    return builder.as_markup()


def get_passenger_waiting_keyboard(language: str = "pl"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"""
    builder = InlineKeyboardBuilder()

    if language == "en":
        builder.button(text="‚úÖ Ready to Continue", callback_data="ready_to_continue")
        builder.button(text="üìä Check Cost", callback_data="check_waiting_cost")
    elif language == "ru":
        builder.button(text="‚úÖ –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="ready_to_continue")
        builder.button(text="üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="check_waiting_cost")
    else:  # Polish
        builder.button(text="‚úÖ Gotowy do kontynuacji", callback_data="ready_to_continue")
        builder.button(text="üìä Sprawd≈∫ koszt", callback_data="check_waiting_cost")

    builder.adjust(1)
    return builder.as_markup()


# ===================================================================
# –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ß–ï–¢–ß–ò–ö–û–ú –û–ñ–ò–î–ê–ù–ò–Ø
# ===================================================================

async def start_waiting_counter(ride_id: int, driver_id: int):
    """–ó–∞–ø—É—Å–∫ —Å—á–µ—Ç—á–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è"""
    try:
        current_time = datetime.now()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        waiting_timers[ride_id] = {
            'start_time': current_time,
            'driver_id': driver_id
        }

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with Session() as session:
            order = session.query(Order).get(ride_id)
            if order:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if not hasattr(order, 'waiting_started_at'):
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ–º notes –ø–æ–ª–µ
                    waiting_info = {
                        'waiting_started_at': current_time.isoformat(),
                        'waiting_status': 'active'
                    }
                    if hasattr(order, 'notes') and order.notes:
                        try:
                            existing_notes = json.loads(order.notes)
                            existing_notes.update(waiting_info)
                            order.notes = json.dumps(existing_notes)
                        except:
                            order.notes = json.dumps(waiting_info)
                    else:
                        order.notes = json.dumps(waiting_info)
                else:
                    order.waiting_started_at = current_time

                session.commit()

        logger.info(f"Waiting counter started for ride {ride_id}")

    except Exception as e:
        logger.error(f"Error starting waiting counter: {e}")


async def stop_waiting_counter(ride_id: int) -> Optional[dict]:
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—á–µ—Ç—á–∏–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è"""
    try:
        if ride_id not in waiting_timers:
            return None

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏
        start_time = waiting_timers[ride_id]['start_time']
        end_time = datetime.now()
        elapsed = end_time - start_time
        minutes = max(1, int(elapsed.total_seconds() / 60))  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞
        cost = Decimal(str(minutes))

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with Session() as session:
            order = session.query(Order).get(ride_id)
            if order:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
                base_price = getattr(order, 'estimated_price', getattr(order, 'price', Decimal('0')))
                if isinstance(base_price, (int, float)):
                    base_price = Decimal(str(base_price))

                total_price = base_price + cost

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –æ–∂–∏–¥–∞–Ω–∏–∏ –≤ notes
                waiting_log = {
                    'waiting_started_at': start_time.isoformat(),
                    'waiting_ended_at': end_time.isoformat(),
                    'waiting_minutes': minutes,
                    'waiting_cost': float(cost),
                    'waiting_status': 'completed'
                }

                if hasattr(order, 'notes') and order.notes:
                    try:
                        existing_notes = json.loads(order.notes)
                        if isinstance(existing_notes, dict):
                            existing_notes.update(waiting_log)
                        else:
                            existing_notes = waiting_log
                        order.notes = json.dumps(existing_notes)
                    except:
                        order.notes = json.dumps(waiting_log)
                else:
                    order.notes = json.dumps(waiting_log)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
                if hasattr(order, 'final_price'):
                    order.final_price = total_price
                else:
                    # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º existing field
                    if hasattr(order, 'estimated_price'):
                        order.estimated_price = total_price
                    elif hasattr(order, 'price'):
                        order.price = total_price

                session.commit()

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
        del waiting_timers[ride_id]

        logger.info(f"Waiting counter stopped for ride {ride_id}: {minutes} min, {cost} z≈Ç")

        return {
            'minutes': minutes,
            'cost': cost,
            'start_time': start_time,
            'end_time': end_time
        }

    except Exception as e:
        logger.error(f"Error stopping waiting counter: {e}")
        return None


async def notify_passenger_waiting_started(ride_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ –Ω–∞—á–∞–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è"""
    try:
        with Session() as session:
            order = session.query(Order).get(ride_id)
            if not order:
                return

            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if not client_id:
                return

            text = (
                "‚è∏Ô∏è <b>OCZEKIWANIE ROZPOCZƒòTE</b>\n\n"
                "‚è∞ <b>Taryfa:</b> 1 z≈Ç/minuta\n"
                "üïê <b>Czas rozpoczƒôcia:</b> " + datetime.now().strftime("%H:%M:%S") + "\n\n"
                "Gdy bƒôdziesz gotowy do kontynuacji podr√≥≈ºy, naci≈õnij przycisk poni≈ºej:"
            )

            keyboard = get_passenger_waiting_keyboard("pl")

            await Bots.client.send_message(
                chat_id=client_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

    except Exception as e:
        logger.error(f"Error notifying passenger about waiting start: {e}")


async def notify_passenger_waiting_declined(ride_id: int):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    try:
        with Session() as session:
            order = session.query(Order).get(ride_id)
            if not order:
                return

            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if not client_id:
                return

            text = (
                "‚ùå <b>Pro≈õba o zatrzymanie odrzucona</b>\n\n"
                "Kierowca nie mo≈ºe siƒô zatrzymaƒá w tym momencie.\n"
                "Podr√≥≈º kontynuowana w normalnym trybie."
            )

            await Bots.client.send_message(
                chat_id=client_id,
                text=text,
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"Error notifying passenger about waiting decline: {e}")


async def notify_passenger_waiting_ended(ride_id: int, waiting_info: dict):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
    try:
        with Session() as session:
            order = session.query(Order).get(ride_id)
            if not order:
                return

            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if not client_id:
                return

            text = (
                f"‚ñ∂Ô∏è <b>OCZEKIWANIE ZAKO≈ÉCZONE</b>\n\n"
                f"‚è±Ô∏è <b>Czas oczekiwania:</b> {waiting_info['minutes']} min\n"
                f"üí∞ <b>Koszt oczekiwania:</b> {waiting_info['cost']} z≈Ç\n\n"
                f"Podr√≥≈º jest kontynuowana..."
            )

            await Bots.client.send_message(
                chat_id=client_id,
                text=text,
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"Error notifying passenger about waiting end: {e}")


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–ò–°–¢–ï–ú–´ –û–ñ–ò–î–ê–ù–ò–Ø
# ===================================================================

@driver_ride_router.callback_query(F.data == "accept_waiting")
async def accept_waiting(callback: CallbackQuery, state: FSMContext):
    """–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫"""
    try:
        ride_id = await get_current_ride_id(callback.from_user.id)

        if not ride_id:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–∂–∏–¥–∞–Ω–∏—è
        await start_waiting_counter(ride_id, callback.from_user.id)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
        text = (
            "‚è∏Ô∏è <b>LICZNIK OCZEKIWANIA URUCHOMIONY</b>\n\n"
            "‚è∞ <b>Taryfa:</b> 1 z≈Ç/minuta\n"
            "üïê <b>Czas rozpoczƒôcia:</b> " + datetime.now().strftime("%H:%M:%S") + "\n\n"
            "ZarzƒÖdzanie oczekiwaniem:"
        )

        keyboard = get_waiting_management_keyboard("pl")

        await callback.message.edit_text(
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        await notify_passenger_waiting_started(ride_id)

        await callback.answer("‚úÖ Licznik oczekiwania uruchomiony")

    except Exception as e:
        logger.error(f"Error accepting waiting: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas uruchamiania licznika")


@driver_ride_router.callback_query(F.data == "decline_waiting")
async def decline_waiting(callback: CallbackQuery):
    """–í–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    try:
        ride_id = await get_current_ride_id(callback.from_user.id)

        if not ride_id:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏
        await notify_passenger_waiting_declined(ride_id)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è
        text = "‚ùå <b>Pro≈õba o zatrzymanie odrzucona</b>\n\nPodr√≥≈º kontynuowana w normalnym trybie."

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–æ–π
        lang = await get_user_language_simple(callback.from_user.id)
        keyboard = get_driver_ride_keyboard(lang, "in_progress")

        await callback.message.edit_text(
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        await callback.answer("‚ùå Pro≈õba o zatrzymanie odrzucona")

    except Exception as e:
        logger.error(f"Error declining waiting: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas odrzucania pro≈õby")


@driver_ride_router.callback_query(F.data == "check_waiting_time")
async def check_waiting_time(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
    try:
        ride_id = await get_current_ride_id(callback.from_user.id)

        if not ride_id or ride_id not in waiting_timers:
            await callback.answer("‚ùå Licznik oczekiwania nie jest aktywny")
            return

        # –í—ã—á–∏—Å–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
        start_time = waiting_timers[ride_id]['start_time']
        current_time = datetime.now()
        elapsed = current_time - start_time
        minutes = int(elapsed.total_seconds() / 60)
        cost = Decimal(str(max(1, minutes)))  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞

        text = (
            f"üìä <b>AKTUALNY CZAS OCZEKIWANIA</b>\n\n"
            f"‚è∞ <b>Czas rozpoczƒôcia:</b> {start_time.strftime('%H:%M:%S')}\n"
            f"‚è±Ô∏è <b>Up≈Çynƒô≈Ço czasu:</b> {minutes} min\n"
            f"üí∞ <b>Aktualny koszt:</b> {cost} z≈Ç\n\n"
            f"<i>Taryfa: 1 z≈Ç/minuta</i>"
        )

        await callback.answer(text, show_alert=True)

    except Exception as e:
        logger.error(f"Error checking waiting time: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas sprawdzania czasu")


@driver_ride_router.callback_query(F.data == "end_waiting")
async def end_waiting(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏"""
    try:
        ride_id = await get_current_ride_id(callback.from_user.id)

        if not ride_id:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–∂–∏–¥–∞–Ω–∏—è
        waiting_info = await stop_waiting_counter(ride_id)

        if not waiting_info:
            await callback.answer("‚ùå Licznik oczekiwania nie by≈Ç aktywny")
            return

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
        text = (
            f"‚ñ∂Ô∏è <b>OCZEKIWANIE ZAKO≈ÉCZONE</b>\n\n"
            f"‚è±Ô∏è <b>Czas oczekiwania:</b> {waiting_info['minutes']} min\n"
            f"üí∞ <b>Koszt oczekiwania:</b> {waiting_info['cost']} z≈Ç\n\n"
            f"Podr√≥≈º jest kontynuowana..."
        )

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–æ–π
        lang = await get_user_language_simple(callback.from_user.id)
        keyboard = get_driver_ride_keyboard(lang, "in_progress")

        await callback.message.edit_text(
            text=text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        await notify_passenger_waiting_ended(ride_id, waiting_info)

        await callback.answer("‚úÖ Oczekiwanie zako≈Ñczone, podr√≥≈º kontynuowana")

    except Exception as e:
        logger.error(f"Error ending waiting: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas ko≈Ñczenia oczekiwania")


@driver_ride_router.callback_query(F.data == "ready_to_continue")
async def passenger_ready_to_continue(callback: CallbackQuery):
    """–ü–∞—Å—Å–∞–∂–∏—Ä –≥–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–µ–∑–¥–∫—É"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–µ–∑–¥–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        with Session() as session:
            order = session.query(Order).filter(
                Order.client_id == callback.from_user.id,
                Order.status == "in_progress"
            ).order_by(Order.created_at.desc()).first()

            if not order or not order.driver_id:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
            await Bots.driver.send_message(
                chat_id=order.driver_id,
                text=(
                    "‚úÖ <b>PASA≈ªER GOTOWY DO KONTYNUACJI</b>\n\n"
                    "Pasa≈ºer jest gotowy do kontynuacji podr√≥≈ºy.\n"
                    "Mo≈ºesz zako≈Ñczyƒá oczekiwanie i kontynuowaƒá jazdƒô."
                ),
                parse_mode="HTML"
            )

            await callback.message.edit_text(
                "‚úÖ <b>Kierowca zosta≈Ç powiadomiony</b>\n\n"
                "Poinformowali≈õmy kierowcƒô, ≈ºe jeste≈õ gotowy do kontynuacji podr√≥≈ºy.",
                parse_mode="HTML"
            )

            await callback.answer("‚úÖ Kierowca zosta≈Ç powiadomiony")

    except Exception as e:
        logger.error(f"Error notifying driver passenger ready: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas powiadamiania kierowcy")


@driver_ride_router.callback_query(F.data == "check_waiting_cost")
async def check_waiting_cost_passenger(callback: CallbackQuery):
    """–ü–∞—Å—Å–∞–∂–∏—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–µ–∑–¥–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        with Session() as session:
            order = session.query(Order).filter(
                Order.client_id == callback.from_user.id,
                Order.status == "in_progress"
            ).order_by(Order.created_at.desc()).first()

            if not order:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –ø–æ–µ–∑–¥–∫–∏
            if order.id in waiting_timers:
                start_time = waiting_timers[order.id]['start_time']
                current_time = datetime.now()
                elapsed = current_time - start_time
                minutes = int(elapsed.total_seconds() / 60)
                cost = max(1, minutes)  # –ú–∏–Ω–∏–º—É–º 1 –º–∏–Ω—É—Ç–∞

                text = (
                    f"üìä <b>AKTUALNY KOSZT OCZEKIWANIA</b>\n\n"
                    f"‚è∞ <b>Rozpoczƒôto:</b> {start_time.strftime('%H:%M:%S')}\n"
                    f"‚è±Ô∏è <b>Up≈Çynƒô≈Ço:</b> {minutes} min\n"
                    f"üí∞ <b>Koszt:</b> {cost} z≈Ç\n\n"
                    f"<i>Taryfa: 1 z≈Ç za minutƒô</i>"
                )
            else:
                text = "‚ÑπÔ∏è Licznik oczekiwania nie jest aktywny"

            await callback.answer(text, show_alert=True)

    except Exception as e:
        logger.error(f"Error checking waiting cost for passenger: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas sprawdzania kosztu")


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–¢–ê–¢–£–°–û–ú –ü–û–ï–ó–î–ö–ò (–û–ë–ù–û–í–õ–ï–ù–ù–´–ï)
# ===================================================================

@driver_ride_router.callback_query(F.data == "driver_arrived")
async def driver_arrived(callback: CallbackQuery, state: FSMContext):
    """–í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª –∫ –ø–∞—Å—Å–∞–∂–∏—Ä—É"""
    try:
        with Session() as session:
            order = session.query(Order).filter_by(
                driver_id=callback.from_user.id,
                status="accepted"
            ).order_by(Order.created_at.desc()).first()

            if not order:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            order.status = "driver_arrived"
            order.accepted_at = datetime.now()
            session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if client_id:
                from core.keyboards import get_client_ride_keyboard
                lang = await get_user_language_simple(client_id)

                await Bots.client.send_message(
                    chat_id=client_id,
                    text=(
                        "‚úÖ <b>Kierowca przyjecha≈Ç!</b>\n\n"
                        "üöó Tw√≥j kierowca ju≈º na miejscu i czeka na Ciebie.\n"
                        "Sprawd≈∫ numer rejestracyjny i wsiadaj do samochodu."
                    ),
                    reply_markup=get_client_ride_keyboard(lang, "arrived"),
                    parse_mode="HTML"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–¥–∏—Ç–µ–ª—è
            lang = await get_user_language_simple(callback.from_user.id)

            await callback.message.edit_text(
                f"‚úÖ <b>PRZYJECHA≈ÅE≈ö DO PASA≈ªERA</b>\n\n"
                f"üìç Adres: {order.pickup_address}\n"
                f"üë• Pasa≈ºer√≥w: {getattr(order, 'passengers_count', 1)}\n\n"
                f"üéØ Czekaj na pasa≈ºera i naci≈õnij 'Rozpocznij podr√≥≈º' gdy wsiƒÖdzie do samochodu.",
                reply_markup=get_driver_ride_keyboard(lang, "arrived"),
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ Status zaktualizowany - przyjecha≈Çe≈õ")

    except Exception as e:
        logger.error(f"Error updating driver arrival: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas aktualizacji statusu")


@driver_ride_router.callback_query(F.data == "start_trip")
async def start_trip(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø–æ–µ–∑–¥–∫—É"""
    try:
        with Session() as session:
            order = session.query(Order).filter_by(
                driver_id=callback.from_user.id,
                status="driver_arrived"
            ).order_by(Order.created_at.desc()).first()

            if not order:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–≤–µ—Ä–Ω—ã–π")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            order.status = "in_progress"
            order.started_at = datetime.now()
            session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if client_id:
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                passenger_keyboard = InlineKeyboardBuilder()
                passenger_keyboard.button(text="üõë Popro≈õ o zatrzymanie", callback_data="request_stop")
                passenger_keyboard.button(text="üìç Obecna lokalizacja", callback_data="current_location")
                passenger_keyboard.adjust(1)

                await Bots.client.send_message(
                    chat_id=client_id,
                    text=(
                        "üö¶ <b>Podr√≥≈º rozpoczƒôta!</b>\n\n"
                        f"üìç Cel: {order.destination_address}\n"
                        f"üíµ Koszt: {getattr(order, 'estimated_price', getattr(order, 'price', 0))} z≈Ç\n\n"
                        "≈ªyczymy mi≈Çej podr√≥≈ºy!\n\n"
                        "‚ÑπÔ∏è <b>Dodatkowe opcje:</b>\n"
                        "‚Ä¢ Mo≈ºesz poprosiƒá o zatrzymanie (1 z≈Ç/minuta)\n"
                        "‚Ä¢ Sprawdziƒá bie≈ºƒÖcƒÖ lokalizacjƒô"
                    ),
                    reply_markup=passenger_keyboard.as_markup(),
                    parse_mode="HTML"
                )

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–æ–¥–∏—Ç–µ–ª—è
            lang = await get_user_language_simple(callback.from_user.id)

            await callback.message.edit_text(
                f"üö¶ <b>PODR√ì≈ª ROZPOCZƒòTA</b>\n\n"
                f"üìç SkƒÖd: {order.pickup_address}\n"
                f"üìç DokƒÖd: {order.destination_address}\n"
                f"üíµ Koszt: {getattr(order, 'estimated_price', getattr(order, 'price', 0))} z≈Ç\n\n"
                f"üß≠ Jed≈∫ trasƒÖ do miejsca przeznaczenia.",
                reply_markup=get_driver_ride_keyboard(lang, "in_progress"),
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ Podr√≥≈º rozpoczƒôta")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            navigation_keyboard = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="üìç –¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)],
                    [KeyboardButton(text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")]
                ],
                resize_keyboard=True
            )
            await callback.message.answer(
                "üìç Naci≈õnij przycisk poni≈ºej, aby pasa≈ºer widzia≈Ç TwojƒÖ lokalizacjƒô:",
                reply_markup=navigation_keyboard
            )

    except Exception as e:
        logger.error(f"Error starting trip: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas rozpoczynania podr√≥≈ºy")


@driver_ride_router.callback_query(F.data == "complete_trip")
async def complete_trip(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
    try:
        ride_id = await get_current_ride_id(callback.from_user.id)

        if not ride_id:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
        waiting_info = None
        if ride_id in waiting_timers:
            waiting_info = await stop_waiting_counter(ride_id)

        with Session() as session:
            order = session.query(Order).get(ride_id)
            if not order:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–µ–∑–¥–∫–∏
            order.status = "completed"
            order.completed_at = datetime.now()

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
            base_price = getattr(order, 'estimated_price', getattr(order, 'price', Decimal('0')))
            if isinstance(base_price, (int, float)):
                base_price = Decimal(str(base_price))

            waiting_cost = Decimal('0')
            if waiting_info:
                waiting_cost = waiting_info['cost']

            total_price = base_price + waiting_cost

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ü–µ–Ω—É
            if hasattr(order, 'final_price'):
                order.final_price = total_price
            else:
                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                if hasattr(order, 'estimated_price'):
                    order.estimated_price = total_price
                elif hasattr(order, 'price'):
                    order.price = total_price

            session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —á–µ–∫ –ø–∞—Å—Å–∞–∂–∏—Ä—É
            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if client_id:
                receipt_text = (
                    f"üèÅ <b>PODR√ì≈ª ZAKO≈ÉCZONA!</b>\n\n"
                    f"üíµ <b>Do zap≈Çaty:</b>\n"
                    f"- Taryfa podstawowa: {base_price} z≈Ç\n"
                )

                if waiting_cost > 0:
                    receipt_text += f"- Czas oczekiwania: {waiting_cost} z≈Ç ({waiting_info['minutes']} min)\n"

                receipt_text += (
                    f"- <b>Razem: {total_price} z≈Ç</b>\n\n"
                    f"Dziƒôkujemy za skorzystanie z naszych us≈Çug!"
                )

                await Bots.client.send_message(
                    chat_id=client_id,
                    text=receipt_text,
                    parse_mode="HTML"
                )

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è
            driver_text = (
                f"‚úÖ <b>PODR√ì≈ª ZAKO≈ÉCZONA</b>\n\n"
                f"üí∞ <b>Otrzymano:</b> {total_price} z≈Ç\n"
                f"- Podstawa: {base_price} z≈Ç\n"
            )

            if waiting_cost > 0:
                driver_text += f"- Oczekiwanie: {waiting_cost} z≈Ç\n"

            await callback.message.edit_text(
                driver_text,
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ Podr√≥≈º zako≈Ñczona")
            await state.clear()

            logger.info(f"Trip {ride_id} completed with total cost {total_price} z≈Ç")

    except Exception as e:
        logger.error(f"Error completing trip: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas ko≈Ñczenia podr√≥≈ºy")


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –ó–ê–ü–†–û–°–ê –û–°–¢–ê–ù–û–í–ö–ò –û–¢ –ü–ê–°–°–ê–ñ–ò–†–ê
# ===================================================================

async def notify_driver_stop_request(ride_id: int, passenger_id: int, language: str = "pl"):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –æ –∑–∞–ø—Ä–æ—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    try:
        with Session() as session:
            order = session.query(Order).get(ride_id)
            if not order or not order.driver_id:
                return

            if language == "en":
                text = (
                    "‚è∏Ô∏è <b>PASSENGER REQUESTS STOP</b>\n\n"
                    f"üöñ <b>Trip ID:</b> {ride_id}\n"
                    f"üë§ <b>Passenger:</b> ID {passenger_id}\n\n"
                    "‚è∞ <b>Waiting tariff:</b> 1 z≈Ç/minute\n\n"
                    "Choose your action:"
                )
            elif language == "ru":
                text = (
                    "‚è∏Ô∏è <b>–ü–ê–°–°–ê–ñ–ò–† –ü–†–û–°–ò–¢ –û–°–¢–ê–ù–û–í–ö–£</b>\n\n"
                    f"üöñ <b>ID –ø–æ–µ–∑–¥–∫–∏:</b> {ride_id}\n"
                    f"üë§ <b>–ü–∞—Å—Å–∞–∂–∏—Ä:</b> ID {passenger_id}\n\n"
                    "‚è∞ <b>–¢–∞—Ä–∏—Ñ –æ–∂–∏–¥–∞–Ω–∏—è:</b> 1 z≈Ç/–º–∏–Ω—É—Ç–∞\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                )
            else:  # Polish
                text = (
                    "‚è∏Ô∏è <b>PASA≈ªER PROSI O ZATRZYMANIE</b>\n\n"
                    f"üöñ <b>ID podr√≥≈ºy:</b> {ride_id}\n"
                    f"üë§ <b>Pasa≈ºer:</b> ID {passenger_id}\n\n"
                    "‚è∞ <b>Taryfa oczekiwania:</b> 1 z≈Ç/minuta\n\n"
                    "Wybierz dzia≈Çanie:"
                )

            keyboard = get_driver_waiting_response_keyboard(language)

            await Bots.driver.send_message(
                chat_id=order.driver_id,
                text=text,
                parse_mode="HTML",
                reply_markup=keyboard
            )

    except Exception as e:
        logger.error(f"Error notifying driver about stop request: {e}")


# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "request_stop" –µ—Å–ª–∏ –æ–Ω –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ
@driver_ride_router.callback_query(F.data == "request_stop")
async def handle_stop_request_from_passenger(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–∞"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–µ–∑–¥–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        with Session() as session:
            order = session.query(Order).filter(
                Order.client_id == callback.from_user.id,
                Order.status == "in_progress"
            ).order_by(Order.created_at.desc()).first()

            if not order:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —É–∂–µ —Å—á–µ—Ç—á–∏–∫ –æ–∂–∏–¥–∞–Ω–∏—è
            if order.id in waiting_timers:
                await callback.answer("‚è∞ Licznik oczekiwania ju≈º jest aktywny")
                return

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–æ–¥–∏—Ç–µ–ª—è –æ –∑–∞–ø—Ä–æ—Å–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await notify_driver_stop_request(order.id, callback.from_user.id, "pl")

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            text = (
                "‚è∏Ô∏è <b>Pro≈õba o zatrzymanie wys≈Çana!</b>\n\n"
                "‚è∞ <b>Taryfa oczekiwania:</b> 1 z≈Ç/minuta\n\n"
                "Czekamy na odpowied≈∫ kierowcy..."
            )

            await callback.message.edit_text(
                text=text,
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ Pro≈õba wys≈Çana do kierowcy")

    except Exception as e:
        logger.error(f"Error handling stop request from passenger: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas wysy≈Çania pro≈õby")


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# ===================================================================

@driver_ride_router.callback_query(F.data == "navigate_pickup")
async def navigate_to_pickup(callback: CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –ø–∞—Å—Å–∞–∂–∏—Ä—É"""
    try:
        with Session() as session:
            order = session.query(Order).filter_by(
                driver_id=callback.from_user.id,
                status="accepted"
            ).order_by(Order.created_at.desc()).first()

            if not order:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–πden")
                return

            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            pickup_address = quote(order.pickup_address)
            google_maps_url = f"https://www.google.com/maps/dir/?api=1&destination={pickup_address}&travelmode=driving"

            await callback.message.answer(
                f"üß≠ <b>Nawigacja do pasa≈ºera</b>\n\n"
                f"üìç Adres: {order.pickup_address}\n\n"
                f"[üó∫Ô∏è Otw√≥rz w Google Maps]({google_maps_url})",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            await callback.answer("üß≠ Nawigacja wys≈Çana")

    except Exception as e:
        logger.error(f"Error getting navigation: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas pobierania nawigacji")


@driver_ride_router.callback_query(F.data == "navigate_destination")
async def navigate_to_destination(callback: CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –º–µ—Å—Ç—É –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è"""
    try:
        with Session() as session:
            order = session.query(Order).filter_by(
                driver_id=callback.from_user.id,
                status="in_progress"
            ).order_by(Order.created_at.desc()).first()

            if not order:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ Google Maps –Ω–∞–≤–∏–≥–∞—Ü–∏—é
            destination_address = quote(order.destination_address)
            google_maps_url = f"https://www.google.com/maps/dir/?api=1&destination={destination_address}&travelmode=driving"

            await callback.message.answer(
                f"üß≠ <b>Nawigacja do miejsca przeznaczenia</b>\n\n"
                f"üìç Adres: {order.destination_address}\n\n"
                f"[üó∫Ô∏è Otw√≥rz w Google Maps]({google_maps_url})",
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            await callback.answer("üß≠ Nawigacja wys≈Çana")

    except Exception as e:
        logger.error(f"Error getting destination navigation: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas pobierania nawigacji")


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–í–Ø–ó–ò –° –ü–ê–°–°–ê–ñ–ò–†–û–ú (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
# ===================================================================

@driver_ride_router.callback_query(F.data == "call_passenger")
async def call_passenger(callback: CallbackQuery):
    """–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–∞—Å—Å–∞–∂–∏—Ä–æ–º"""
    await callback.answer(
        "üìû Funkcja dzwonienia zostanie wkr√≥tce dodana",
        show_alert=True
    )


@driver_ride_router.callback_query(F.data == "driver_cancel")
async def driver_cancel_order(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –≤–æ–¥–∏—Ç–µ–ª–µ–º"""
    try:
        ride_id = await get_current_ride_id(callback.from_user.id)

        if not ride_id:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ–∂–∏–¥–∞–Ω–∏—è –µ—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω
        if ride_id in waiting_timers:
            await stop_waiting_counter(ride_id)

        with Session() as session:
            order = session.query(Order).get(ride_id)
            if not order:
                await callback.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            order.status = "cancelled"
            order.cancellation_reason = "Cancelled by driver"
            order.cancelled_at = datetime.now()
            session.commit()

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if client_id:
                await Bots.client.send_message(
                    chat_id=client_id,
                    text=(
                        "‚ùå <b>Kierowca anulowa≈Ç zam√≥wienie</b>\n\n"
                        "Przepraszamy za niedogodno≈õƒá. Mo≈ºesz z≈Ço≈ºyƒá nowe zam√≥wienie."
                    ),
                    parse_mode="HTML"
                )

            await callback.message.edit_text(
                "‚ùå <b>ZAM√ìWIENIE ANULOWANE</b>\n\n"
                "Anulowa≈Çe≈õ zam√≥wienie. Pasa≈ºer zosta≈Ç powiadomiony.",
                parse_mode="HTML"
            )
            await callback.answer("‚úÖ Zam√≥wienie anulowane")

    except Exception as e:
        logger.error(f"Error cancelling order by driver: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas anulowania")


@driver_ride_router.callback_query(F.data == "emergency_stop")
async def emergency_stop(callback: CallbackQuery):
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞"""
    try:
        ride_id = await get_current_ride_id(callback.from_user.id)

        if not ride_id:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        with Session() as session:
            order = session.query(Order).get(ride_id)
            if not order:
                return

            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–∞—Å—Å–∞–∂–∏—Ä–∞
            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if client_id:
                await Bots.client.send_message(
                    chat_id=client_id,
                    text=(
                        "üõë <b>Nag≈Çe zatrzymanie</b>\n\n"
                        "Kierowca musia≈Ç zatrzymaƒá siƒô z powodu sytuacji nadzwyczajnej.\n"
                        "Skontaktuj siƒô z kierowcƒÖ w celu uzyskania szczeg√≥≈Ç√≥w."
                    ),
                    parse_mode="HTML"
                )

            await callback.answer("üõë Pasa≈ºer powiadomiony o nag≈Çym zatrzymaniu")

    except Exception as e:
        logger.error(f"Error emergency stop: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas powiadomienia")


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ì–ï–û–ü–û–ó–ò–¶–ò–ò –ò –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô
# ===================================================================

@driver_ride_router.message(F.location)
async def handle_driver_location_updates(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—è"""
    try:
        with Session() as session:
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –≤–æ–¥–∏—Ç–µ–ª—è
            order = session.query(Order).filter_by(
                driver_id=message.from_user.id
            ).filter(Order.status.in_(["accepted", "driver_arrived", "in_progress"])).order_by(
                Order.created_at.desc()).first()

            if not order:
                await message.answer("‚ÑπÔ∏è Brak aktywnych zam√≥wie≈Ñ do ≈õledzenia")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            from core.models import Vehicle as DriverVehicle
            vehicle = session.query(DriverVehicle).filter_by(driver_id=message.from_user.id).first()
            if vehicle and hasattr(vehicle, 'last_lat'):
                vehicle.last_lat = message.location.latitude
                vehicle.last_lon = message.location.longitude
                session.commit()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–∞—Å—Å–∞–∂–∏—Ä—É
            client_id = getattr(order, 'client_id', getattr(order, 'user_id', None))
            if client_id:
                await Bots.client.send_location(
                    chat_id=client_id,
                    latitude=message.location.latitude,
                    longitude=message.location.longitude,
                    disable_notification=True
                )

                # –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞–¥–∏–∏ –ø–æ–µ–∑–¥–∫–∏
                if order.status == "accepted":
                    status_text = "üöó Kierowca jedzie do Ciebie"
                elif order.status == "driver_arrived":
                    status_text = "‚úÖ Kierowca czeka na miejscu"
                else:  # in_progress
                    status_text = "üö¶ Podr√≥≈º w toku"

                await Bots.client.send_message(
                    chat_id=client_id,
                    text=f"üìç {status_text}",
                    disable_notification=True
                )

            await message.answer("‚úÖ Lokalizacja zaktualizowana", disable_notification=True)

    except Exception as e:
        logger.error(f"Error handling location update: {e}")
        await message.answer("‚ùå B≈ÇƒÖd podczas aktualizacji lokalizacji")


@driver_ride_router.message(F.text == "üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É")
async def complete_trip_button(message: Message):
    """–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø–æ–µ–∑–¥–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É"""
    try:
        ride_id = await get_current_ride_id(message.from_user.id)

        if not ride_id:
            await message.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return

        with Session() as session:
            order = session.query(Order).get(ride_id)
            if not order:
                await message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º –æ–∂–∏–¥–∞–Ω–∏—è
            base_price = getattr(order, 'estimated_price', getattr(order, 'price', 0))
            waiting_cost = Decimal('0')
            waiting_text = ""

            if ride_id in waiting_timers:
                start_time = waiting_timers[ride_id]['start_time']
                current_time = datetime.now()
                elapsed = current_time - start_time
                minutes = max(1, int(elapsed.total_seconds() / 60))
                waiting_cost = Decimal(str(minutes))
                waiting_text = f"\n- Oczekiwanie: {waiting_cost} z≈Ç ({minutes} min)"

            total_price = (Decimal(str(base_price)) if isinstance(base_price, (int, float)) else base_price) + waiting_cost

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            builder = InlineKeyboardBuilder()
            builder.button(text="‚úÖ Tak, zako≈Ñcz", callback_data="complete_trip")
            builder.button(text="‚ùå Anuluj", callback_data="cancel_complete")

            await message.answer(
                f"üèÅ <b>Zako≈Ñczyƒá podr√≥≈º?</b>\n\n"
                f"üìç SkƒÖd: {order.pickup_address}\n"
                f"üìç DokƒÖd: {order.destination_address}\n\n"
                f"üíµ <b>Koszt:</b>\n"
                f"- Podstawa: {base_price} z≈Ç{waiting_text}\n"
                f"- <b>Razem: {total_price} z≈Ç</b>\n\n"
                f"Potwierd≈∫ zako≈Ñczenie podr√≥≈ºy:",
                reply_markup=builder.as_markup(),
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"Error requesting trip completion: {e}")
        await message.answer("‚ùå B≈ÇƒÖd podczas przetwarzania")


@driver_ride_router.callback_query(F.data == "cancel_complete")
async def cancel_complete_trip(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–µ–∑–¥–∫–∏"""
    await callback.message.delete()
    await callback.answer("‚ùå Anulowano")


@driver_ride_router.message(F.text == "üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é")
async def stop_location_sharing(message: Message):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏"""
    from aiogram.types import ReplyKeyboardRemove
    await message.answer(
        "üõë Transmisja lokalizacji zatrzymana",
        reply_markup=ReplyKeyboardRemove()
    )


# ===================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
# ===================================================================

class RideStatusManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–µ–∑–¥–æ–∫"""

    @staticmethod
    def get_status_text(status: str, language: str = "pl") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –Ω—É–∂–Ω–æ–º —è–∑—ã–∫–µ"""
        status_texts = {
            "pending": {
                "pl": "‚è≥ Oczekuje na kierowcƒô",
                "en": "‚è≥ Waiting for driver",
                "ru": "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≤–æ–¥–∏—Ç–µ–ª—è"
            },
            "accepted": {
                "pl": "‚úÖ Kierowca jedzie do Ciebie",
                "en": "‚úÖ Driver is coming to you",
                "ru": "‚úÖ –í–æ–¥–∏—Ç–µ–ª—å –µ–¥–µ—Ç –∫ –≤–∞–º"
            },
            "driver_arrived": {
                "pl": "üöó Kierowca przyjecha≈Ç",
                "en": "üöó Driver has arrived",
                "ru": "üöó –í–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–±—ã–ª"
            },
            "in_progress": {
                "pl": "üö¶ Podr√≥≈º w toku",
                "en": "üö¶ Trip in progress",
                "ru": "üö¶ –ü–æ–µ–∑–¥–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å"
            },
            "completed": {
                "pl": "üèÅ Podr√≥≈º zako≈Ñczona",
                "en": "üèÅ Trip completed",
                "ru": "üèÅ –ü–æ–µ–∑–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
            },
            "cancelled": {
                "pl": "‚ùå Anulowane",
                "en": "‚ùå Cancelled",
                "ru": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
            }
        }

        return status_texts.get(status, {}).get(language, status)


# ===================================================================
# –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø
# ===================================================================

@driver_ride_router.message(F.text.startswith("/driver_status"))
async def check_driver_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è"""
    from config import Config

    if str(message.from_user.id) not in Config.DRIVER_IDS:
        return

    try:
        ride_id = await get_current_ride_id(message.from_user.id)

        if not ride_id:
            await message.answer("üìä <b>STATUS KIEROWCY</b>\n\n‚ùå Brak aktywnych zam√≥wie≈Ñ", parse_mode="HTML")
            return

        with Session() as session:
            order = session.query(Order).get(ride_id)
            if not order:
                await message.answer("‚ùå Zam√≥wienie nie znalezione")
                return

            status_manager = RideStatusManager()
            status_text = status_manager.get_status_text(order.status, "pl")

            result_text = (
                f"üìä <b>STATUS KIEROWCY</b>\n\n"
                f"üÜî <b>Zam√≥wienie:</b> #{order.id}\n"
                f"üìã <b>Status:</b> {status_text}\n"
                f"üìç <b>SkƒÖd:</b> {order.pickup_address}\n"
                f"üìç <b>DokƒÖd:</b> {order.destination_address}\n"
                f"üë• <b>Pasa≈ºer√≥w:</b> {getattr(order, 'passengers_count', 1)}\n"
                f"üíµ <b>Koszt:</b> {getattr(order, 'estimated_price', getattr(order, 'price', 0))} z≈Ç\n"
                f"üïí <b>Utworzono:</b> {order.created_at.strftime('%H:%M:%S')}"
            )

            if order.started_at:
                result_text += f"\nüö¶ <b>Rozpoczƒôto:</b> {order.started_at.strftime('%H:%M:%S')}"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—á–µ—Ç—á–∏–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è
            if ride_id in waiting_timers:
                start_time = waiting_timers[ride_id]['start_time']
                current_time = datetime.now()
                elapsed = current_time - start_time
                minutes = int(elapsed.total_seconds() / 60)
                result_text += f"\n‚è∞ <b>Oczekiwanie:</b> {minutes} min (aktywne)"

            await message.answer(result_text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå B≈ÇƒÖd sprawdzania statusu: {e}")


@driver_ride_router.message(F.text.startswith("/reset_status"))
async def reset_driver_status(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–¥–∏—Ç–µ–ª—è (–æ—Ç–ª–∞–¥–∫–∞)"""
    from config import Config

    if str(message.from_user.id) not in Config.DRIVER_IDS:
        return

    try:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è —ç—Ç–æ–≥–æ –≤–æ–¥–∏—Ç–µ–ª—è
        stopped_timers = []
        for ride_id, timer_info in list(waiting_timers.items()):
            if timer_info.get('driver_id') == message.from_user.id:
                await stop_waiting_counter(ride_id)
                stopped_timers.append(ride_id)

        with Session() as session:
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –≤–æ–¥–∏—Ç–µ–ª—è
            active_orders = session.query(Order).filter_by(
                driver_id=message.from_user.id
            ).filter(Order.status.in_(["accepted", "driver_arrived", "in_progress"])).all()

            cancelled_count = 0
            for order in active_orders:
                order.status = "cancelled"
                order.cancellation_reason = "Reset by driver command"
                order.cancelled_at = datetime.now()
                cancelled_count += 1

            session.commit()

            result_text = (
                f"üîÑ <b>STATUS ZRESETOWANY</b>\n\n"
                f"Anulowane zam√≥wienia: {cancelled_count}\n"
            )

            if stopped_timers:
                result_text += f"Zatrzymane liczniki: {len(stopped_timers)}\n"

            result_text += f"Status kierowcy: wolny"

            await message.answer(result_text, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå B≈ÇƒÖd resetowania statusu: {e}")


# ===================================================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –¢–ï–ö–£–©–ï–ì–û –ú–ï–°–¢–û–ü–û–õ–û–ñ–ï–ù–ò–Ø –ò –î–†–£–ì–ò–• CALLBACK
# ===================================================================

@driver_ride_router.callback_query(F.data == "current_location")
async def show_current_location(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ (–¥–ª—è –ø–∞—Å—Å–∞–∂–∏—Ä–∞)"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–µ–∑–¥–∫—É –ø–∞—Å—Å–∞–∂–∏—Ä–∞
        with Session() as session:
            order = session.query(Order).filter(
                Order.client_id == callback.from_user.id,
                Order.status.in_(["accepted", "driver_arrived", "in_progress"])
            ).order_by(Order.created_at.desc()).first()

            if not order or not order.driver_id:
                await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–µ–∑–¥–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –≤–æ–¥–∏—Ç–µ–ª—è —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
            await Bots.driver.send_message(
                chat_id=order.driver_id,
                text=(
                    "üìç <b>PASA≈ªER PROSI O LOKALIZACJƒò</b>\n\n"
                    "Pasa≈ºer chce poznaƒá TwojƒÖ aktualnƒÖ lokalizacjƒô.\n"
                    "Naci≈õnij przycisk '–¢—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é' aby wys≈Çaƒá swojƒÖ lokalizacjƒô."
                ),
                parse_mode="HTML"
            )

            await callback.answer("‚úÖ Poproszono kierowcƒô o lokalizacjƒô")

            await callback.message.edit_text(
                "üìç <b>Pro≈õba o lokalizacjƒô wys≈Çana</b>\n\n"
                "Poproszono kierowcƒô o przes≈Çanie aktualnej lokalizacji.",
                parse_mode="HTML"
            )

    except Exception as e:
        logger.error(f"Error requesting current location: {e}")
        await callback.answer("‚ùå B≈ÇƒÖd podczas pobierania lokalizacji")


# ===================================================================
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ß–ò–°–¢–ö–ê –ù–ï–ê–ö–¢–ò–í–ù–´–• –°–ß–ï–¢–ß–ò–ö–û–í
# ===================================================================

import asyncio
from datetime import timedelta

async def cleanup_inactive_timers():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –æ–∂–∏–¥–∞–Ω–∏—è"""
    while True:
        try:
            current_time = datetime.now()
            inactive_timers = []

            for ride_id, timer_info in waiting_timers.items():
                # –ï—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω –±–æ–ª–µ–µ 2 —á–∞—Å–æ–≤ - —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
                if current_time - timer_info['start_time'] > timedelta(hours=2):
                    inactive_timers.append(ride_id)

            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç—á–∏–∫–∏
            for ride_id in inactive_timers:
                logger.warning(f"Auto-stopping inactive waiting timer for ride {ride_id}")
                await stop_waiting_counter(ride_id)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
            await asyncio.sleep(1800)

        except Exception as e:
            logger.error(f"Error in cleanup_inactive_timers: {e}")
            await asyncio.sleep(1800)


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
import asyncio
try:
    loop = asyncio.get_event_loop()
    loop.create_task(cleanup_inactive_timers())
except RuntimeError:
    # –ï—Å–ª–∏ event loop –µ—â–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–¥–∞—á–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø–æ–∑–∂–µ
    pass


# ===================================================================
# –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –û–¢–ß–ï–¢–´ –ü–û –û–ñ–ò–î–ê–ù–ò–Æ
# ===================================================================

@driver_ride_router.message(F.text.startswith("/waiting_stats"))
async def show_waiting_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è"""
    from config import Config

    if str(message.from_user.id) not in Config.DRIVER_IDS:
        return

    try:
        with Session() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø–æ–µ–∑–¥–∫–∏ –≤–æ–¥–∏—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            week_ago = datetime.now() - timedelta(days=7)

            orders = session.query(Order).filter(
                Order.driver_id == message.from_user.id,
                Order.status == "completed",
                Order.completed_at >= week_ago
            ).all()

            total_rides = len(orders)
            waiting_rides = 0
            total_waiting_minutes = 0
            total_waiting_cost = Decimal('0')

            for order in orders:
                if hasattr(order, 'notes') and order.notes:
                    try:
                        notes = json.loads(order.notes)
                        if isinstance(notes, dict) and 'waiting_minutes' in notes:
                            waiting_rides += 1
                            total_waiting_minutes += notes.get('waiting_minutes', 0)
                            total_waiting_cost += Decimal(str(notes.get('waiting_cost', 0)))
                    except (json.JSONDecodeError, TypeError):
                        continue

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
            active_timers = sum(1 for timer_info in waiting_timers.values()
                              if timer_info.get('driver_id') == message.from_user.id)

            stats_text = (
                f"üìä <b>STATYSTYKI OCZEKIWANIA (7 dni)</b>\n\n"
                f"üöñ <b>≈ÅƒÖczne przejazdy:</b> {total_rides}\n"
                f"‚è∏Ô∏è <b>Przejazdy z oczekiwaniem:</b> {waiting_rides}\n"
                f"‚è±Ô∏è <b>≈ÅƒÖczny czas oczekiwania:</b> {total_waiting_minutes} min\n"
                f"üí∞ <b>≈ÅƒÖczny zarobek z oczekiwania:</b> {total_waiting_cost} z≈Ç\n"
                f"üìà <b>≈öredni czas oczekiwania:</b> {total_waiting_minutes / max(waiting_rides, 1):.1f} min\n\n"
                f"üîÑ <b>Aktywne liczniki:</b> {active_timers}"
            )

            await message.answer(stats_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"Error showing waiting statistics: {e}")
        await message.answer(f"‚ùå B≈ÇƒÖd podczas pobierania statystyk: {e}")


# ===================================================================
# –≠–ö–°–ü–û–†–¢ –§–£–ù–ö–¶–ò–ô –î–õ–Ø –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –í –î–†–£–ì–ò–• –ú–û–î–£–õ–Ø–•
# ===================================================================

__all__ = [
    'driver_ride_router',
    'start_waiting_counter',
    'stop_waiting_counter',
    'waiting_timers',
    'get_current_ride_id',
    'notify_driver_stop_request'
]