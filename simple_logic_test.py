# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: simple_logic_test.py

"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""


class MockConfig:
    DRIVER_IDS = ['628521909', '6158974369']


# –ú–æ–∫–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
class MockBots:
    class driver:
        @staticmethod
        async def send_message(*args, **kwargs):
            print(f"üì® [MOCK] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ–¥–∏—Ç–µ–ª—é: {args[0] if args else 'Unknown'}")


class DriverNotificationService:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏"""

    def __init__(self):
        self.pending_orders = {}
        self.driver_responses = {}
        self.notification_tasks = {}

    async def handle_driver_response(self, order_id: int, driver_id: int, response: str):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
        print(f"üé¨ Processing {response} from driver {driver_id} for order {order_id}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑
        if order_id not in self.pending_orders:
            print(f"‚ùå Order {order_id} NOT in pending orders: {list(self.pending_orders.keys())}")
            return False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã
        if order_id not in self.driver_responses:
            self.driver_responses[order_id] = {}

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        self.driver_responses[order_id][driver_id] = response
        print(f"üìù Updated responses for {order_id}: {self.driver_responses[order_id]}")

        if response == "accept":
            print(f"‚úÖ ACCEPT: Order {order_id} by driver {driver_id}")
            await self._handle_order_accepted(order_id, driver_id)
            return True

        elif response == "reject":
            print(f"‚ùå REJECT: Order {order_id} by driver {driver_id}")
            await self._handle_driver_rejection(order_id, driver_id)
            return True

        return False

    async def _handle_order_accepted(self, order_id: int, accepting_driver_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞"""
        print(f"üéâ Handling acceptance of order {order_id} by driver {accepting_driver_id}")

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –≤–æ–¥–∏—Ç–µ–ª–µ–π
        for driver_str in MockConfig.DRIVER_IDS:
            driver_id = int(driver_str)
            if driver_id != accepting_driver_id:
                await MockBots.driver.send_message(driver_id, f"Order {order_id} taken")

        # –û—á–∏—â–∞–µ–º –∑–∞–∫–∞–∑
        self._cleanup_order(order_id)
        print(f"‚úÖ Order {order_id} processed successfully")

    async def _handle_driver_rejection(self, order_id: int, rejecting_driver_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è - –ö–õ–Æ–ß–ï–í–ê–Ø –õ–û–ì–ò–ö–ê"""
        print(f"üëé Handling rejection from driver {rejecting_driver_id}")

        responses = self.driver_responses.get(order_id, {})
        all_drivers = [int(d) for d in MockConfig.DRIVER_IDS]

        rejected_drivers = [d_id for d_id, resp in responses.items() if resp == "reject"]
        rejected_count = len(rejected_drivers)
        total_drivers = len(all_drivers)

        print(f"üìä Rejection status: {rejected_count}/{total_drivers}")
        print(f"üìã Rejected by: {rejected_drivers}")
        print(f"üìã All responses: {responses}")

        # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê
        if rejected_count >= total_drivers:
            print(f"üö´ ALL {total_drivers} drivers rejected order {order_id}")
            await self._cancel_order_all_rejected(order_id)
        else:
            remaining = total_drivers - rejected_count
            print(f"‚è≥ Order {order_id} still has {remaining} drivers who can accept")
            print(f"üîÑ Order {order_id} remains ACTIVE")

    async def _cancel_order_all_rejected(self, order_id: int):
        """–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –∫–æ–≥–¥–∞ –≤—Å–µ –æ—Ç–∫–ª–æ–Ω–∏–ª–∏"""
        print(f"üö´ Cancelling order {order_id} - all drivers rejected")
        await MockBots.driver.send_message("client", "All drivers rejected")
        self._cleanup_order(order_id)

    def _cleanup_order(self, order_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –∑–∞–∫–∞–∑–∞"""
        print(f"üßπ Cleaning up order {order_id}")
        self.pending_orders.pop(order_id, None)
        self.driver_responses.pop(order_id, None)
        print(f"üìä Remaining orders: {list(self.pending_orders.keys())}")


async def test_logic():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ DriverNotificationService")
    print("=" * 60)

    service = DriverNotificationService()

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    order_id = 999
    order_data = {'type': 'alcohol', 'client_id': 123}

    print(f"üì¶ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ {order_id}")
    service.pending_orders[order_id] = order_data
    service.driver_responses[order_id] = {}

    print(f"üìä Pending orders: {list(service.pending_orders.keys())}")
    print(f"üöõ Available drivers: {MockConfig.DRIVER_IDS}")

    # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç
    print(f"\n" + "=" * 40)
    print("–¢–ï–°–¢ 1: –ü–µ—Ä–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç")
    print("=" * 40)

    driver1_id = int(MockConfig.DRIVER_IDS[0])
    print(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å {driver1_id} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–∫–∞–∑...")

    result = await service.handle_driver_response(order_id, driver1_id, "reject")

    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"- –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞: {result}")
    print(f"- –ó–∞–∫–∞–∑ –≤ pending_orders: {order_id in service.pending_orders}")
    print(f"- Pending orders: {list(service.pending_orders.keys())}")

    if order_id in service.pending_orders:
        print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ó–∞–∫–∞–∑ –æ—Å—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")

        # –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–æ–π –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
        print(f"\n" + "=" * 40)
        print("–¢–ï–°–¢ 2: –í—Ç–æ—Ä–æ–π –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç")
        print("=" * 40)

        driver2_id = int(MockConfig.DRIVER_IDS[1])
        print(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver2_id} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑...")

        result2 = await service.handle_driver_response(order_id, driver2_id, "accept")

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"- –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞: {result2}")
        print(f"- –ó–∞–∫–∞–∑ –≤ pending_orders: {order_id in service.pending_orders}")
        print(f"- Pending orders: {list(service.pending_orders.keys())}")

        if not (order_id in service.pending_orders):
            print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è")
        else:
            print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–∫–∞–∑ –Ω–µ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è")

    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–∫–∞–∑ –∏—Å—á–µ–∑ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è!")
        return

    # –¢–µ—Å—Ç 3: –í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—é—Ç
    print(f"\n" + "=" * 40)
    print("–¢–ï–°–¢ 3: –í—Å–µ –≤–æ–¥–∏—Ç–µ–ª–∏ –æ—Ç–∫–ª–æ–Ω—è—é—Ç")
    print("=" * 40)

    order_id2 = 998
    service.pending_orders[order_id2] = order_data
    service.driver_responses[order_id2] = {}

    print(f"üì¶ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ {order_id2}")

    for i, driver_str in enumerate(MockConfig.DRIVER_IDS):
        driver_id = int(driver_str)
        print(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å {driver_id} ({i + 1}/{len(MockConfig.DRIVER_IDS)}) –æ—Ç–∫–ª–æ–Ω—è–µ—Ç...")

        await service.handle_driver_response(order_id2, driver_id, "reject")

        print(f"   –ó–∞–∫–∞–∑ –≤ pending_orders: {order_id2 in service.pending_orders}")

    print(f"\nüìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:")
    print(f"- –ó–∞–∫–∞–∑ –≤ pending_orders: {order_id2 in service.pending_orders}")

    if not (order_id2 in service.pending_orders):
        print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—Å–µ–º–∏")
    else:
        print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–∫–∞–∑ –æ—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—Å–µ–º–∏")

    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    import asyncio

    asyncio.run(test_logic())