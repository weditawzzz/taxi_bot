#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏
–ê—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∑–∞–∫–∞–∑—ã —Å —Ü–µ–Ω–æ–π 71.50 z≈Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç
"""

import sqlite3
import json
from datetime import datetime, timedelta
from pathlib import Path


def cleanup_old_orders():
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""

    # –ü—É—Ç–∏ –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
    main_db = Path("data/database.db")
    archive_db = Path("data/archive_database.db")

    if not main_db.exists():
        print("‚ùå –û—Å–Ω–æ–≤–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é –±–∞–∑—É
    archive_db.parent.mkdir(exist_ok=True)

    print("üßπ –ù–ê–ß–ò–ù–ê–ï–ú –û–ß–ò–°–¢–ö–£ –°–¢–ê–†–´–• –ó–ê–ö–ê–ó–û–í")
    print("=" * 50)

    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º
        main_conn = sqlite3.connect(main_db)
        archive_conn = sqlite3.connect(archive_db)

        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
        archive_conn.execute("""
                             CREATE TABLE IF NOT EXISTS archived_orders
                             (
                                 id
                                 INTEGER
                                 PRIMARY
                                 KEY,
                                 original_id
                                 INTEGER,
                                 order_data
                                 TEXT,
                                 reason
                                 TEXT,
                                 archived_at
                                 TIMESTAMP
                                 DEFAULT
                                 CURRENT_TIMESTAMP
                             )
                             """)

        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∞–ª–∫–æ–≥–æ–ª—è
        cursor = main_conn.execute("""
                                   SELECT id, estimated_price, price, order_type, products, created_at, status
                                   FROM rides
                                   WHERE (order_type = 'alcohol_delivery' OR notes LIKE '%ALCOHOL DELIVERY%')
                                     AND (estimated_price = 71.50 OR price = 71.50)
                                   """)

        problem_orders = cursor.fetchall()

        if not problem_orders:
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True

        print(f"üîç –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(problem_orders)}")
        print()

        archived_count = 0

        for order in problem_orders:
            order_id, est_price, price, order_type, products, created_at, status = order

            print(f"üì¶ –ó–∞–∫–∞–∑ #{order_id}:")
            print(f"   –¶–µ–Ω–∞: {est_price} / {price} z≈Ç")
            print(f"   –ü—Ä–æ–¥—É–∫—Ç—ã: {products[:50] if products else 'N/A'}...")
            print(f"   –°—Ç–∞—Ç—É—Å: {status}")
            print(f"   –î–∞—Ç–∞: {created_at}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            action = "UNKNOWN"  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

            if status in ['pending', 'cancelled']:
                # –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
                action = "DELETE"
                reason = f"Inactive order with wrong price {est_price or price} z≈Ç"

                # –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º
                order_data = {
                    'id': order_id,
                    'estimated_price': est_price,
                    'price': price,
                    'order_type': order_type,
                    'products': products,
                    'created_at': created_at,
                    'status': status
                }

                archive_conn.execute(
                    "INSERT INTO archived_orders (original_id, order_data, reason) VALUES (?, ?, ?)",
                    (order_id, json.dumps(order_data), reason)
                )

                # –£–¥–∞–ª—è–µ–º –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã
                main_conn.execute("DELETE FROM rides WHERE id = ?", (order_id,))
                archived_count += 1

            elif status in ['accepted', 'in_progress', 'completed']:
                # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É
                action = "FIX_PRICE"
                reason = f"Fixed price from {est_price or price} z≈Ç to 20 z≈Ç"

                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é
                main_conn.execute(
                    "UPDATE rides SET estimated_price = 20.0, price = 20.0 WHERE id = ?",
                    (order_id,)
                )

                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –∞—Ä—Ö–∏–≤–∞
                log_data = {
                    'id': order_id,
                    'old_price': est_price or price,
                    'new_price': 20.0,
                    'status': status
                }

                archive_conn.execute(
                    "INSERT INTO archived_orders (original_id, order_data, reason) VALUES (?, ?, ?)",
                    (order_id, json.dumps(log_data), reason)
                )
            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –Ω–æ –Ω–µ —É–¥–∞–ª—è–µ–º
                action = "FIX_UNKNOWN_STATUS"
                reason = f"Fixed price for unknown status {status}"

                main_conn.execute(
                    "UPDATE rides SET estimated_price = 20.0, price = 20.0 WHERE id = ?",
                    (order_id,)
                )

            print(f"   ‚úÖ –î–µ–π—Å—Ç–≤–∏–µ: {action}")
            print()

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        main_conn.commit()
        archive_conn.commit()

        print("=" * 50)
        print("üìä –ò–¢–û–ì–ò –û–ß–ò–°–¢–ö–ò:")
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(problem_orders)}")
        print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {archived_count}")
        print(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {len(problem_orders) - archived_count}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor = main_conn.execute("""
                                   SELECT COUNT(*)
                                   FROM rides
                                   WHERE (order_type = 'alcohol_delivery' OR notes LIKE '%ALCOHOL DELIVERY%')
                                     AND (estimated_price = 71.50 OR price = 71.50)
                                   """)

        remaining = cursor.fetchone()[0]

        if remaining == 0:
            print("üéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–ù–´–ï –ó–ê–ö–ê–ó–´ –û–ß–ò–©–ï–ù–´!")
        else:
            print(f"‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {remaining}")

        # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
        create_cleanup_report(archive_conn)

        return True

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
        return False

    finally:
        main_conn.close()
        archive_conn.close()


def create_cleanup_report(archive_conn):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –æ—á–∏—Å—Ç–∫–µ"""

    try:
        cursor = archive_conn.execute("""
                                      SELECT reason, COUNT(*) as count
                                      FROM archived_orders
                                      GROUP BY reason
                                      """)

        report_data = cursor.fetchall()

        report_text = f"""
üìä –û–¢–ß–ï–¢ –ü–û –û–ß–ò–°–¢–ö–ï –ó–ê–ö–ê–ó–û–í
–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
{'=' * 50}

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ï–ô–°–¢–í–ò–ô:
"""

        for reason, count in report_data:
            report_text += f"‚Ä¢ {reason}: {count} –∑–∞–∫–∞–∑–æ–≤\n"

        report_text += f"""
{'=' * 50}
‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ
üìÅ –ê—Ä—Ö–∏–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: data/archive_database.db
"""

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = Path("data/cleanup_report.txt")
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(report_text)

        print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        print(report_text)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")


def verify_cleanup():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏"""

    main_db = Path("data/database.db")

    if not main_db.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    conn = sqlite3.connect(main_db)

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –∞–ª–∫–æ–≥–æ–ª—è
        cursor = conn.execute("""
                              SELECT COUNT(*)                                                             as total,
                                     COUNT(CASE WHEN estimated_price = 20.0 OR price = 20.0 THEN 1 END)   as correct_price,
                                     COUNT(CASE WHEN estimated_price = 71.50 OR price = 71.50 THEN 1 END) as wrong_price
                              FROM rides
                              WHERE order_type = 'alcohol_delivery'
                                 OR notes LIKE '%ALCOHOL DELIVERY%'
                              """)

        total, correct, wrong = cursor.fetchone()

        print("üîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        print(f"üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –∞–ª–∫–æ–≥–æ–ª—è: {total}")
        print(f"‚úÖ –° –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π (20 z≈Ç): {correct}")
        print(f"‚ùå –° –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π (71.50 z≈Ç): {wrong}")

        if wrong == 0:
            print("üéâ –í–°–ï –¶–ï–ù–´ –ò–°–ü–†–ê–í–õ–ï–ù–´!")
        else:
            print("‚ö†Ô∏è –ï—Å—Ç—å –∑–∞–∫–∞–∑—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ü–µ–Ω–∞–º–∏")

        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor = conn.execute("SELECT COUNT(*) FROM rides")
        total_orders = cursor.fetchone()[0]

        cursor = conn.execute("""
                              SELECT order_type, COUNT(*)
                              FROM rides
                              GROUP BY order_type
                              """)

        types = cursor.fetchall()

        print(f"\nüìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_orders}")
        for order_type, count in types:
            print(f"   ‚Ä¢ {order_type or '–æ–±—ã—á–Ω—ã–µ'}: {count}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

    finally:
        conn.close()


if __name__ == "__main__":
    print("üßπ –£–¢–ò–õ–ò–¢–ê –û–ß–ò–°–¢–ö–ò –°–¢–ê–†–´–• –ó–ê–ö–ê–ó–û–í")
    print("=" * 50)

    choice = input(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n1. –û—á–∏—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑—ã\n2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n3. –û–±–∞ –¥–µ–π—Å—Ç–≤–∏—è\n–í–∞—à –≤—ã–±–æ—Ä (1-3): ")

    if choice in ['1', '3']:
        if cleanup_old_orders():
            print("\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")

    if choice in ['2', '3']:
        print("\n" + "=" * 50)
        verify_cleanup()

    print("\nüéâ –ì–æ—Ç–æ–≤–æ!")