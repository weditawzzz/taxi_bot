#!/usr/bin/env python3
"""
–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–∂–∏–¥–∞–Ω–∏—è
"""

import sqlite3
import os
from pathlib import Path


def fix_database_schema():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É rides"""

    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = Path("data/database.db")

    if not db_path.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return False

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(rides)")
        existing_columns = [column[1] for column in cursor.fetchall()]
        print(f"üìã –¢–µ–∫—É—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {len(existing_columns)}")

        # –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        fields_to_add = [
            "waiting_started_at TIMESTAMP",
            "waiting_ended_at TIMESTAMP",
            "waiting_minutes INTEGER DEFAULT 0",
            "waiting_cost DECIMAL(10,2) DEFAULT 0.00",
            "stops_log TEXT"
        ]

        added_count = 0
        for field in fields_to_add:
            field_name = field.split()[0]
            if field_name not in existing_columns:
                try:
                    cursor.execute(f"ALTER TABLE rides ADD COLUMN {field}")
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–µ: {field_name}")
                    added_count += 1
                except sqlite3.Error as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {field_name}: {e}")
            else:
                print(f"‚ÑπÔ∏è –ü–æ–ª–µ {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
        if added_count > 0:
            try:
                cursor.execute("""
                               UPDATE rides
                               SET waiting_minutes = 0,
                                   waiting_cost    = 0.00
                               WHERE waiting_minutes IS NULL
                                  OR waiting_cost IS NULL
                               """)
                print("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏")
            except sqlite3.Error as e:
                print(f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {e}")

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor.execute("PRAGMA table_info(rides)")
        final_columns = [column[1] for column in cursor.fetchall()]
        print(f"üéâ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {len(final_columns)}")

        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        return True

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        conn.rollback()
        return False

    finally:
        conn.close()


def remove_problematic_fields_from_model():
    """–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —É–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç"""

    print("\nüîß –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï:")
    print("–ï—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –Ω–µ –ø–æ–º–æ–≥–ª–∞, –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–∞—á–∞–ª–æ core/models.py:")
    print("""
# –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
class Ride(Base):
    # ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è ...

    # –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–´ –¥–æ –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î:
    # waiting_started_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), nullable=True)
    # waiting_ended_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), nullable=True) 
    # waiting_minutes: Mapped[int] = mapped_column(Integer, nullable=False, default=0)
    # waiting_cost: Mapped[Decimal] = mapped_column(DECIMAL(10, 2), nullable=False, default=Decimal('0.00'))
    # stops_log: Mapped[Optional[str]] = mapped_column(Text, nullable=True)
""")


if __name__ == "__main__":
    print("üöÄ –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)

    if fix_database_schema():
        print("\nüéâ –ì–û–¢–û–í–û! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    else:
        print("\n‚ùå –ú–∏–≥—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
        remove_problematic_fields_from_model()

    print("=" * 50)