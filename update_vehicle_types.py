#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
–ò–°–ü–†–ê–í–õ–Ø–ï–¢: Lancer Sportback ‚Üí Hatchback, –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–∏–ø—ã
"""

import sqlite3
import os
from pathlib import Path
from collections import Counter


def detect_vehicle_type_migration(make: str, model: str) -> str:
    """
    –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫—É–∑–æ–≤–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

    Args:
        make: –ú–∞—Ä–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        model: –ü–æ–ª–Ω–∞—è –º–æ–¥–µ–ª—å

    Returns:
        str: –¢–∏–ø –∫—É–∑–æ–≤–∞
    """
    if not make or not model:
        return "SEDAN"

    make_lower = make.lower() if make else ""
    model_lower = model.lower() if model else ""
    full_name = f"{make_lower} {model_lower}"

    print(f"üîç Analyzing: {make} {model} -> {full_name}")

    # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—ã / Wagon / –ö–æ–º–±–∏
    wagon_keywords = [
        'touring', 'estate', 'wagon', 'kombi', 'avant', 'variant', 'sw', 'break',
        'sportwagon', 'allroad', 'outback', 'cross country'
    ]
    if any(keyword in model_lower for keyword in wagon_keywords):
        print(f"  ‚úÖ Detected: WAGON (keyword match)")
        return "WAGON"

    # –í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫–∏ / SUV (–±–æ–ª—å—à–∏–µ)
    suv_keywords = [
        'x5', 'x7', 'q7', 'q8', 'gle', 'gls', 'cayenne', 'touareg', 'tahoe',
        'escalade', 'navigator', 'expedition', 'suburban', 'yukon', 'range rover',
        'discovery', 'defender'
    ]
    if any(keyword in model_lower for keyword in suv_keywords):
        print(f"  ‚úÖ Detected: SUV (keyword match)")
        return "SUV"

    # –ö—Ä–æ—Å—Å–æ–≤–µ—Ä—ã (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ SUV)
    crossover_keywords = [
        'x1', 'x3', 'q3', 'q5', 'glb', 'glc', 'macan', 'tiguan', 'rav4', 'cr-v',
        'qashqai', 'juke', 'captur', 'tucson', 'sportage', 'cx-5', 'forester',
        'xv', 'impreza', 'crossover', 'cross'
    ]
    if any(keyword in model_lower for keyword in crossover_keywords):
        print(f"  ‚úÖ Detected: CROSSOVER (keyword match)")
        return "CROSSOVER"

    # –§—É—Ä–≥–æ–Ω—ã / Van
    van_keywords = [
        'van', 'transporter', 'sprinter', 'ducato', 'transit', 'crafter',
        'daily', 'master', 'movano', 'boxer'
    ]
    if any(keyword in model_lower for keyword in van_keywords):
        print(f"  ‚úÖ Detected: VAN (keyword match)")
        return "VAN"

    # –ú–∏–Ω–∏–≤—ç–Ω—ã / MPV
    mpv_keywords = [
        'mpv', 'zafira', 'sharan', 'galaxy', 'espace', 'scenic', 'touran',
        'verso', 'carens', 'stream', 'odyssey', 'previa'
    ]
    if any(keyword in model_lower for keyword in mpv_keywords):
        print(f"  ‚úÖ Detected: MPV (keyword match)")
        return "MPV"

    # –ö—É–ø–µ –∏ –∫–∞–±—Ä–∏–æ–ª–µ—Ç—ã
    coupe_keywords = [
        'coupe', 'coup√©', 'cabrio', 'convertible', 'roadster', 'spider', 'spyder',
        'targa', 'z4', 'slk', 'slc', 'tt', 'boxster'
    ]
    if any(keyword in model_lower for keyword in coupe_keywords):
        if any(keyword in model_lower for keyword in ['cabrio', 'convertible', 'roadster', 'spider', 'spyder']):
            print(f"  ‚úÖ Detected: CONVERTIBLE (keyword match)")
            return "CONVERTIBLE"
        else:
            print(f"  ‚úÖ Detected: COUPE (keyword match)")
            return "COUPE"

    # –•—ç—Ç—á–±–µ–∫–∏ (–≤–∫–ª—é—á–∞—è —Å–ø–æ—Ä—Ç–±—ç–∫–∏) - –ò–°–ü–†–ê–í–õ–ï–ù–û!
    hatchback_keywords = [
        'hatchback', 'golf', 'polo', 'corsa', 'fiesta', 'focus', 'astra', 'civic',
        'i20', 'i30', 'rio', 'ceed', 'ibiza', 'leon', 'fabia', 'swift',
        'sportback', 'back'  # –ò–°–ü–†–ê–í–õ–ï–ù–û: Sportback —Ç–æ–∂–µ —Ö—ç—Ç—á–±–µ–∫
    ]

    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Lancer Sportback - –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò!
    if 'lancer' in model_lower and 'sportback' in model_lower:
        print(f"  ‚úÖ Detected: HATCHBACK (Lancer Sportback fix)")
        return "HATCHBACK"

    if any(keyword in model_lower for keyword in hatchback_keywords):
        print(f"  ‚úÖ Detected: HATCHBACK (keyword match)")
        return "HATCHBACK"

    # –ü–∏–∫–∞–ø—ã
    pickup_keywords = [
        'pickup', 'pick-up', 'navara', 'hilux', 'ranger', 'amarok', 'l200',
        'frontier', 'ridgeline', 'colorado', 'canyon'
    ]
    if any(keyword in model_lower for keyword in pickup_keywords):
        print(f"  ‚úÖ Detected: PICKUP (keyword match)")
        return "PICKUP"

    # –≠–ª–µ–∫—Ç—Ä–æ–º–æ–±–∏–ª–∏
    electric_keywords = [
        'tesla', 'electric', 'hybrid', 'prius', 'leaf', 'zoe', 'e-golf',
        'i3', 'i8', 'model s', 'model 3', 'model x', 'model y'
    ]
    if any(keyword in full_name for keyword in electric_keywords):
        print(f"  ‚úÖ Detected: ELECTRIC (keyword match)")
        return "ELECTRIC"

    # –ü—Ä–µ–º–∏—É–º –º–∞—Ä–∫–∏ (–ª—é–∫—Å)
    luxury_makes = [
        'mercedes', 'bmw', 'audi', 'lexus', 'jaguar', 'porsche', 'bentley',
        'rolls-royce', 'maserati', 'ferrari', 'lamborghini', 'aston martin'
    ]

    # –ü—Ä–µ–º–∏—É–º –º–æ–¥–µ–ª–∏
    luxury_models = [
        's-class', 'e-class', '7 series', 'a8', 'ls', 'xj', 'panamera',
        'quattroporte', 'continental', 'phantom', 'ghost'
    ]

    if (make_lower in luxury_makes and any(keyword in model_lower for keyword in luxury_models)) or \
            any(keyword in full_name for keyword in ['s-class', 'phantom', 'continental gt']):
        print(f"  ‚úÖ Detected: LUXURY (premium match)")
        return "LUXURY"

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Å–µ–¥–∞–Ω
    print(f"  ‚û°Ô∏è Default: SEDAN")
    return "SEDAN"


def get_seats_by_type_migration(vehicle_type: str) -> int:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç –ø–æ —Ç–∏–ø—É –∫—É–∑–æ–≤–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    seats_mapping = {
        'COUPE': 2,
        'CONVERTIBLE': 2,
        'SEDAN': 4,
        'HATCHBACK': 4,
        'WAGON': 5,
        'CROSSOVER': 5,
        'SUV': 7,
        'MPV': 7,
        'VAN': 8,
        'PICKUP': 4,
        'ELECTRIC': 4,
        'LUXURY': 4
    }

    return seats_mapping.get(vehicle_type, 4)


def migrate_vehicle_types():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""

    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = Path("data/database.db")

    if not db_path.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –µ—ë —Å–Ω–∞—á–∞–ª–∞.")
        return False

    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ç–∏–ø–æ–≤ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...")
    print("=" * 60)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã vehicles
        cursor.execute("""
                       SELECT name
                       FROM sqlite_master
                       WHERE type = 'table'
                         AND name = 'vehicles'
                       """)

        if not cursor.fetchone():
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ vehicles –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("PRAGMA table_info(vehicles)")
        columns = [column[1] for column in cursor.fetchall()]
        print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {columns}")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É vehicle_type –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        if 'vehicle_type' not in columns:
            try:
                cursor.execute("ALTER TABLE vehicles ADD COLUMN vehicle_type TEXT")
                print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: vehicle_type")
            except sqlite3.Error as e:
                print(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ vehicle_type —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
        cursor.execute("""
                       SELECT id, make, model, driver_name, color, year, license_plate, vehicle_type, seats
                       FROM vehicles
                       """)

        vehicles = cursor.fetchall()
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(vehicles)}")

        if not vehicles:
            print("‚ÑπÔ∏è –ù–µ—Ç –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            return True

        print("\n" + "=" * 60)
        print("üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï –¢–ò–ü–û–í –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô")
        print("=" * 60)

        updated_count = 0
        lancer_fixed = 0
        type_stats = Counter()

        for vehicle in vehicles:
            vehicle_id, make, model, driver_name, color, year, license_plate, current_type, seats = vehicle

            print(f"\nüöó [{vehicle_id}] {make} {model} ({license_plate})")
            print(f"   –¢–µ–∫—É—â–∏–π —Ç–∏–ø: {current_type}")

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–∏–ø
            new_type = detect_vehicle_type_migration(make or "", model or "")
            new_seats = get_seats_by_type_migration(new_type)

            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è Lancer Sportback
            if model and 'lancer' in model.lower() and 'sportback' in model.lower():
                if current_type != 'HATCHBACK':
                    print(f"   üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Lancer Sportback {current_type} ‚Üí HATCHBACK")
                    lancer_fixed += 1

            if current_type != new_type or seats != new_seats:
                try:
                    cursor.execute("""
                                   UPDATE vehicles
                                   SET vehicle_type = ?,
                                       seats        = ?
                                   WHERE id = ?
                                   """, (new_type, new_seats, vehicle_id))

                    print(f"   ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_type} ‚Üí {new_type}, –º–µ—Å—Ç: {seats} ‚Üí {new_seats}")
                    updated_count += 1

                except sqlite3.Error as e:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            else:
                print(f"   ‚û°Ô∏è –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {current_type}")

            type_stats[new_type] += 1

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()

        print("\n" + "=" * 60)
        print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ò–ì–†–ê–¶–ò–ò")
        print("=" * 60)
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(vehicles)}")
        print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {updated_count}")
        print(f"üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ Lancer Sportback: {lancer_fixed}")

        print(f"\nüìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ü–û –¢–ò–ü–ê–ú:")
        for vehicle_type, count in sorted(type_stats.items()):
            percentage = (count / len(vehicles)) * 100
            print(f"   {vehicle_type:12} : {count:2} —à—Ç. ({percentage:.1f}%)")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        cursor.execute("""
                       SELECT vehicle_type, COUNT(*) as count
                       FROM vehicles
                       WHERE vehicle_type IS NOT NULL
                       GROUP BY vehicle_type
                       ORDER BY count DESC
                       """)

        print(f"\nüîç –ü–†–û–í–ï–†–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:")
        results = cursor.fetchall()
        for vehicle_type, count in results:
            print(f"   {vehicle_type}: {count} –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Lancer Sportback
        cursor.execute("""
                       SELECT COUNT(*)
                       FROM vehicles
                       WHERE model LIKE '%lancer%'
                         AND model LIKE '%sportback%'
                         AND vehicle_type = 'HATCHBACK'
                       """)
        lancer_check = cursor.fetchone()[0]
        print(f"\nüéØ Lancer Sportback —Å —Ç–∏–ø–æ–º HATCHBACK: {lancer_check}")

        print("\n" + "=" * 60)
        print("üéâ –ú–ò–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!")
        print("=" * 60)

        return True

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        conn.rollback()
        return False

    finally:
        conn.close()


def verify_migration():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    db_path = Path("data/database.db")

    if not db_path.exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False

    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()

    try:
        print("\nüîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ú–ò–ì–†–ê–¶–ò–ò")
        print("=" * 60)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫—É vehicle_type
        cursor.execute("PRAGMA table_info(vehicles)")
        columns = [column[1] for column in cursor.fetchall()]

        if 'vehicle_type' not in columns:
            print("‚ùå –ö–æ–ª–æ–Ω–∫–∞ vehicle_type –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            return False
        else:
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ vehicle_type –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        cursor.execute("""
                       SELECT vehicle_type,
                              COUNT(*) as count,
                GROUP_CONCAT(make || ' ' || model, ', ') as examples
                       FROM vehicles
                       WHERE vehicle_type IS NOT NULL
                       GROUP BY vehicle_type
                       ORDER BY count DESC
                       """)

        results = cursor.fetchall()
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –¢–ò–ü–ê–ú:")
        for vehicle_type, count, examples in results:
            print(f"\nüöô {vehicle_type} ({count} —à—Ç.):")
            examples_list = examples.split(', ')[:3]  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
            for example in examples_list:
                print(f"   ‚Ä¢ {example}")
            if len(examples.split(', ')) > 3:
                print(f"   ‚Ä¢ ... –∏ –µ—â—ë {len(examples.split(', ')) - 3}")

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Lancer Sportback
        cursor.execute("""
                       SELECT make, model, vehicle_type, license_plate
                       FROM vehicles
                       WHERE model LIKE '%lancer%'
                         AND model LIKE '%sportback%'
                       """)

        lancer_results = cursor.fetchall()
        print(f"\nüéØ –ü–†–û–í–ï–†–ö–ê LANCER SPORTBACK:")
        if lancer_results:
            for make, model, vehicle_type, plate in lancer_results:
                status = "‚úÖ" if vehicle_type == "HATCHBACK" else "‚ùå"
                print(f"   {status} {make} {model} ({plate}) ‚Üí {vehicle_type}")
        else:
            print("   ‚ÑπÔ∏è Lancer Sportback –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –±–µ–∑ —Ç–∏–ø–∞
        cursor.execute("SELECT COUNT(*) FROM vehicles WHERE vehicle_type IS NULL")
        null_count = cursor.fetchone()[0]

        if null_count > 0:
            print(f"\n‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –±–µ–∑ —Ç–∏–ø–∞: {null_count}")
            cursor.execute("""
                           SELECT make, model, license_plate
                           FROM vehicles
                           WHERE vehicle_type IS NULL LIMIT 5
                           """)
            for make, model, plate in cursor.fetchall():
                print(f"   ‚Ä¢ {make} {model} ({plate})")
        else:
            print(f"\n‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ –∏–º–µ—é—Ç —Ç–∏–ø")

        print(f"\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")
        return False

    finally:
        conn.close()


if __name__ == "__main__":
    print("üöó –ú–ò–ì–†–ê–¶–ò–Ø –¢–ò–ü–û–í –ê–í–¢–û–ú–û–ë–ò–õ–ï–ô")
    print("–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç Lancer Sportback –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ —Ç–∏–ø—ã")
    print("=" * 60)

    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    if migrate_vehicle_types():
        print()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        verify_migration()

        print("\n" + "=" * 60)
        print("‚úÖ –í–°–Å –ì–û–¢–û–í–û!")
        print("‚úÖ –¢–µ–ø–µ—Ä—å Lancer Sportback –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∫–∞–∫ Hatchback")
        print("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ç–∏–ø—ã: WAGON, COUPE, MPV, CROSSOVER –∏ –¥—Ä.")
        print("‚úÖ –û—à–∏–±–∫–∏ —Å —Ç–∏–ø–æ–º WAGON –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    else:
        print("\n‚ùå –ú–ò–ì–†–ê–¶–ò–Ø –ù–ï –í–´–ü–û–õ–ù–ï–ù–ê")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É")

    print("=" * 60)