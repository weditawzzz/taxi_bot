# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: test_integration.py

"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ order_handlers —Å driver_notification_service
"""
import os
import sys
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env
current_dir = Path(__file__).parent
env_file = current_dir / '.env'

if env_file.exists():
    from dotenv import load_dotenv

    load_dotenv(env_file)
    os.environ.setdefault('CLIENT_BOT_TOKEN', os.getenv('CLIENT_BOT_TOKEN', 'test'))
    os.environ.setdefault('DRIVER_BOT_TOKEN', os.getenv('DRIVER_BOT_TOKEN', 'test'))
else:
    os.environ['CLIENT_BOT_TOKEN'] = 'test_token'
    os.environ['DRIVER_BOT_TOKEN'] = 'test_token'

sys.path.insert(0, str(current_dir))


# –ú–æ–∫–∞–µ–º CallbackQuery –¥–ª—è —Ç–µ—Å—Ç–∞
class MockUser:
    def __init__(self, user_id, name):
        self.id = user_id
        self.full_name = name


class MockMessage:
    def __init__(self):
        self.message_id = 1

    async def edit_text(self, **kwargs):
        print(f"üìù [MOCK] Edit message: {kwargs.get('text', '')[:50]}...")

    async def answer(self, text, **kwargs):
        print(f"üí¨ [MOCK] Answer: {text[:50]}...")


class MockCallback:
    def __init__(self, user_id, name, order_id, action):
        self.from_user = MockUser(user_id, name)
        self.data = f"{action}_{order_id}"
        self.message = MockMessage()

    async def answer(self, text="", show_alert=False):
        if text:
            print(f"üîî [MOCK] Callback answer: {text}")


async def test_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ handlers —Å —Å–µ—Ä–≤–∏—Å–æ–º"""
    print("üîó –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò order_handlers + driver_notification_service")
    print("=" * 70)

    try:
        # –ò–º–ø–æ—Ä—Ç—ã
        from core.services.driver_notification import driver_notification_service
        from config import Config

        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        print(f"üöõ –í–æ–¥–∏—Ç–µ–ª–∏: {Config.DRIVER_IDS}")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ —Å–µ—Ä–≤–∏—Å–µ (–∫–∞–∫ –¥–µ–ª–∞–µ—Ç alcohol.py)
        order_id = 3001
        order_data = {
            'order_type': 'alcohol_delivery',
            'products': '–¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç—ã',
            'budget': 100,
            'address': '–¢–µ—Å—Ç –∞–¥—Ä–µ—Å',
            'client_id': 999888777,
            'user_id': 999888777
        }

        print(f"\nüì¶ –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ {order_id} –≤ —Å–µ—Ä–≤–∏—Å–µ...")
        driver_notification_service.pending_orders[order_id] = order_data
        driver_notification_service.driver_responses[order_id] = {}

        print(f"üìä Pending orders: {list(driver_notification_service.pending_orders.keys())}")

        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ handlers
        from core.handlers.driver.order_handlers import reject_order, accept_order

        # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç
        print(f"\n" + "=" * 50)
        print("–¢–ï–°–¢ 1: –ü–µ—Ä–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —á–µ—Ä–µ–∑ handler")
        print("=" * 50)

        driver1_id = int(Config.DRIVER_IDS[0])
        mock_callback1 = MockCallback(driver1_id, "–í–æ–¥–∏—Ç–µ–ª—å 1", order_id, "reject")

        print(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å {driver1_id} –Ω–∞–∂–∏–º–∞–µ—Ç 'Odrzuƒá' —á–µ—Ä–µ–∑ handler...")
        await reject_order(mock_callback1)

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ handler:")
        print(f"- –ó–∞–∫–∞–∑ –≤ pending_orders: {order_id in driver_notification_service.pending_orders}")
        print(f"- Pending orders: {list(driver_notification_service.pending_orders.keys())}")
        print(f"- Driver responses: {driver_notification_service.driver_responses.get(order_id, {})}")

        if order_id in driver_notification_service.pending_orders:
            print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ó–∞–∫–∞–∑ –æ—Å—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ handler")

            # –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–æ–π –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
            if len(Config.DRIVER_IDS) > 1:
                print(f"\n" + "=" * 50)
                print("–¢–ï–°–¢ 2: –í—Ç–æ—Ä–æ–π –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —á–µ—Ä–µ–∑ handler")
                print("=" * 50)

                driver2_id = int(Config.DRIVER_IDS[1])
                mock_callback2 = MockCallback(driver2_id, "–í–æ–¥–∏—Ç–µ–ª—å 2", order_id, "accept")

                print(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver2_id} –Ω–∞–∂–∏–º–∞–µ—Ç 'Przyjmij' —á–µ—Ä–µ–∑ handler...")

                # –î–ª—è —Ç–µ—Å—Ç–∞ accept –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –ë–î (–º–æ–∫–∞–µ–º)
                print("‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ accept –Ω—É–∂–Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∞—è –ë–î —Å –∑–∞–∫–∞–∑–æ–º")
                print("‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç accept - –æ–Ω —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ë–î")

        else:
            print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–∫–∞–∑ –∏—Å—á–µ–∑ –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ handler!")
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ handler -> service")

        # –û—á–∏—Å—Ç–∫–∞
        driver_notification_service.pending_orders.clear()
        driver_notification_service.driver_responses.clear()

        print(f"\nüèÅ –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    import asyncio

    asyncio.run(test_integration())