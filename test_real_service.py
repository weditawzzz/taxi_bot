# –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: test_real_service.py

"""
–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
"""
import os
import sys
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é
current_dir = Path(__file__).parent
env_file = current_dir / '.env'

if env_file.exists():
    print(f"üìÅ Loading .env from: {env_file}")
    from dotenv import load_dotenv

    load_dotenv(env_file)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    client_token = os.getenv('CLIENT_BOT_TOKEN')
    driver_token = os.getenv('DRIVER_BOT_TOKEN')

    if client_token and driver_token:
        print(f"‚úÖ Tokens loaded:")
        print(f"   CLIENT: {client_token[:10]}...")
        print(f"   DRIVER: {driver_token[:10]}...")
    else:
        print("‚ùå Tokens not found in .env")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.getenv('CLIENT_BOT_TOKEN'):
        print("‚öôÔ∏è Setting CLIENT_BOT_TOKEN manually")
        os.environ['CLIENT_BOT_TOKEN'] = client_token or "test_token"
    if not os.getenv('DRIVER_BOT_TOKEN'):
        print("‚öôÔ∏è Setting DRIVER_BOT_TOKEN manually")
        os.environ['DRIVER_BOT_TOKEN'] = driver_token or "test_token"
else:
    print(f"‚ùå .env file not found at: {env_file}")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ç–æ–∫–µ–Ω—ã
    os.environ['CLIENT_BOT_TOKEN'] = "test_client_token"
    os.environ['DRIVER_BOT_TOKEN'] = "test_driver_token"
    print("‚öôÔ∏è Using test tokens")

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, str(current_dir))

import asyncio


async def test_real_service():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –†–ï–ê–õ–¨–ù–û–ì–û DriverNotificationService")
    print("=" * 60)

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        from core.services.driver_notification import driver_notification_service
        from config import Config

        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç —É—Å–ø–µ—à–Ω—ã–π!")
        print(f"üöõ Available drivers: {Config.DRIVER_IDS}")
        print(f"üìä Current pending orders: {list(driver_notification_service.pending_orders.keys())}")

        # –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∫–∞–∫ –≤ –ø—Ä–æ—Å—Ç–æ–º —Ç–µ—Å—Ç–µ
        order_id = 1001
        order_data = {
            'order_type': 'alcohol_delivery',
            'products': 'Test products',
            'budget': 50,
            'address': 'Test address',
            'distance': 5.0,
            'price': 20,
            'client_id': 123456,
            'user_id': 123456
        }

        print(f"\nüì¶ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ {order_id}")
        driver_notification_service.pending_orders[order_id] = order_data
        driver_notification_service.driver_responses[order_id] = {}

        print(f"üìä Pending orders: {list(driver_notification_service.pending_orders.keys())}")

        # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç
        print(f"\n" + "=" * 40)
        print("–¢–ï–°–¢ 1: –ü–µ—Ä–≤—ã–π –≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω—è–µ—Ç")
        print("=" * 40)

        driver1_id = int(Config.DRIVER_IDS[0])
        print(f"‚ùå –í–æ–¥–∏—Ç–µ–ª—å {driver1_id} –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –∑–∞–∫–∞–∑...")

        result = await driver_notification_service.handle_driver_response(
            order_id, driver1_id, "reject"
        )

        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
        print(f"- –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞: {result}")
        print(f"- –ó–∞–∫–∞–∑ –≤ pending_orders: {order_id in driver_notification_service.pending_orders}")
        print(f"- Pending orders: {list(driver_notification_service.pending_orders.keys())}")
        print(f"- Driver responses: {driver_notification_service.driver_responses.get(order_id, {})}")

        if order_id in driver_notification_service.pending_orders:
            print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ó–∞–∫–∞–∑ –æ—Å—Ç–∞–ª—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è")

            # –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–æ–π –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç
            if len(Config.DRIVER_IDS) > 1:
                print(f"\n" + "=" * 40)
                print("–¢–ï–°–¢ 2: –í—Ç–æ—Ä–æ–π –≤–æ–¥–∏—Ç–µ–ª—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç")
                print("=" * 40)

                driver2_id = int(Config.DRIVER_IDS[1])
                print(f"‚úÖ –í–æ–¥–∏—Ç–µ–ª—å {driver2_id} –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–∞–∫–∞–∑...")

                result2 = await driver_notification_service.handle_driver_response(
                    order_id, driver2_id, "accept"
                )

                print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                print(f"- –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞: {result2}")
                print(f"- –ó–∞–∫–∞–∑ –≤ pending_orders: {order_id in driver_notification_service.pending_orders}")
                print(f"- Pending orders: {list(driver_notification_service.pending_orders.keys())}")

                if not (order_id in driver_notification_service.pending_orders):
                    print("‚úÖ –ü–†–ê–í–ò–õ–¨–ù–û: –ó–∞–∫–∞–∑ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è")
                    print("‚úÖ –†–ï–ê–õ–¨–ù–´–ô –°–ï–†–í–ò–° –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
                else:
                    print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–∫–∞–∑ –Ω–µ —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è")
            else:
                print("‚ö†Ô∏è –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤–æ–¥–∏—Ç–µ–ª—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ")

        else:
            print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ó–∞–∫–∞–∑ –∏—Å—á–µ–∑ –ø–æ—Å–ª–µ –æ–¥–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è!")
            print("‚ùå –†–ï–ê–õ–¨–ù–´–ô –°–ï–†–í–ò–° –†–ê–ë–û–¢–ê–ï–¢ –ù–ï–ü–†–ê–í–ò–õ–¨–ù–û!")

        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        driver_notification_service.pending_orders.clear()
        driver_notification_service.driver_responses.clear()

        print(f"\nüèÅ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω!")

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        import traceback
        traceback.print_exc()


async def test_real_config():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")

    try:
        from config import Config
        print(f"‚úÖ Config –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        print(f"üöõ DRIVER_IDS: {Config.DRIVER_IDS}")
        print(f"üìä DRIVER_CHAT_ID: {getattr(Config, 'DRIVER_CHAT_ID', 'Not found')}")

        if hasattr(Config, 'DRIVER_IDS') and len(Config.DRIVER_IDS) >= 2:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–æ–¥–∏—Ç–µ–ª–µ–π –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –≤–æ–¥–∏—Ç–µ–ª–µ–π")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    await test_real_config()
    await test_real_service()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback

        traceback.print_exc()